<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[AlgorithmIntroduceExercises]]></title>
      <url>http://wolfand11.coding.me/2017/09/26/algorithm/AlgorithmIntroduceExercises/</url>
      <content type="html"><![CDATA[

<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cryptology]]></title>
      <url>http://wolfand11.coding.me/2017/09/14/architecture/Cryptology/</url>
      <content type="html"><![CDATA[

密码学相关的一些笔记。
<a id="more"></a>

<div id="outline-container-orgheadline147" class="outline-2">
<h2 id="orgheadline147"><span class="section-number-2">1</span> 密码学理论</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-orgheadline8" class="outline-3">
<h3 id="orgheadline8"><span class="section-number-3">1.1</span> 数学</h3>
<div class="outline-text-3" id="text-1-1">
</div><div id="outline-container-orgheadline7" class="outline-4">
<h4 id="orgheadline7"><span class="section-number-4">1.1.1</span> 时钟运算</h4>
<div class="outline-text-4" id="text-1-1-1">
</div><ol class="org-ol"><li><a id="orgheadline1"></a>加法<br><div class="outline-text-5" id="text-1-1-1-1">
<p>
时钟指针向前（顺时针）转 x 刻度会指向几？<br>
new = (old + x) / 12 取余数<br>
</p>
</div></li>
<li><a id="orgheadline2"></a>减法<br><div class="outline-text-5" id="text-1-1-1-2">
<p>
时钟指针向后（逆时针）转 x 刻度会指向几？<br>
减法可以通过下面方法转化为加法<br>
如果 0&lt;x&lt;12<br>
new = (old + (12 - x)) / 12 取余数<br>
如果 x&gt;12<br>
x = x/12 取余数<br>
new = (old + (12 - x)) / 12 取余数<br>
</p>
</div></li>
<li><a id="orgheadline3"></a>乘法<br><div class="outline-text-5" id="text-1-1-1-3">
<p>
时钟指针向前（顺时针）转 x 刻度 y 次会指向几？<br>
乘法可以通过下面方法转化为加法<br>
new = (x * y)/12 取余数<br>
</p>
</div></li>
<li><a id="orgheadline4"></a>除法<br><div class="outline-text-5" id="text-1-1-1-4">
<p>
将"向前（顺时针）转 x 个刻度的操作"重复几次指针会指向 1 呢？<br>
除法可以通过互为倒数的概念转化为乘法(除以一个数等于乘以它的倒数)<br>
</p>

<p>
1 = (x*y)/12 取余数<br>
以 x=7 为例，求 y 的值<br>
<img src="18_mode_division_eg1.jpg"><br>
</p>
</div></li>
<li><a id="orgheadline5"></a>乘方<br><div class="outline-text-5" id="text-1-1-1-5">
<p>
乘方也称为指数运算，乘方可以转化为乘法的多次重复。<br>
new = (x * x * x * &#x2026;)/12 取余数<br>
</p>
</div></li>
<li><a id="orgheadline6"></a>对数<br><div class="outline-text-5" id="text-1-1-1-6">
<p>
乘方的逆运算称为对数运算。时钟运算中的对数称为离散对数。<br>
<img src="18_mode_log_eg1.jpg"><br>
</p>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline82" class="outline-3">
<h3 id="orgheadline82"><span class="section-number-3">1.2</span> 密码</h3>
<div class="outline-text-3" id="text-1-2">
</div><div id="outline-container-orgheadline11" class="outline-4">
<h4 id="orgheadline11"><span class="section-number-4">1.2.1</span> 密码学概述</h4>
<div class="outline-text-4" id="text-1-2-1">
</div><ol class="org-ol"><li><a id="orgheadline9"></a>密码学术语<br><div class="outline-text-5" id="text-1-2-1-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">名称</th>
<th scope="col" class="org-left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">发送者</td>
<td class="org-left">发送信息的人</td>
</tr>

<tr>
<td class="org-left">接收者</td>
<td class="org-left">接收信息的人</td>
</tr>

<tr>
<td class="org-left">窃听者</td>
<td class="org-left">偷看信息的人</td>
</tr>

<tr>
<td class="org-left">消息</td>
<td class="org-left">被发送的信息</td>
</tr>

<tr>
<td class="org-left">密码</td>
<td class="org-left">密码是一种能够让消息内容变得无法解读的技术</td>
</tr>

<tr>
<td class="org-left">明文</td>
<td class="org-left">加密之前的消息</td>
</tr>

<tr>
<td class="org-left">密文</td>
<td class="org-left">加密之后的消息</td>
</tr>

<tr>
<td class="org-left">解密</td>
<td class="org-left">正当接收者将密文还原为明文</td>
</tr>

<tr>
<td class="org-left">密码破译、密码分析</td>
<td class="org-left">接收者以外的其他人试图将密文还原为明文</td>
</tr>

<tr>
<td class="org-left">破译者</td>
<td class="org-left">进行破译的人</td>
</tr>

<tr>
<td class="org-left">加密算法</td>
<td class="org-left">从明文生成密文的步骤，即加密的步骤</td>
</tr>

<tr>
<td class="org-left">解密算法</td>
<td class="org-left">解密的步骤</td>
</tr>

<tr>
<td class="org-left">密码算法</td>
<td class="org-left">加密、解密的算法合在一起统称为密码算法</td>
</tr>

<tr>
<td class="org-left">密钥</td>
<td class="org-left">密钥是一种参数，它是在明文转换为密文或将密文转换为明文的算法中会作为输入的参数</td>
</tr>

<tr>
<td class="org-left">对称密码</td>
<td class="org-left">在加密和解密时使用同一密钥的方式</td>
</tr>

<tr>
<td class="org-left">公钥密码</td>
<td class="org-left">在加密和解密时使用不同密钥的方式，也称为非对称密码</td>
</tr>

<tr>
<td class="org-left">混合密码系统</td>
<td class="org-left">将对称密码和公钥密码结合起来的密码方式</td>
</tr>

<tr>
<td class="org-left">单向散列函数</td>
<td class="org-left">把任意长的输入消息串变化成固定长的输出串且由输出串难以得到输入串的一种函数。一种保证完整性的密码技术</td>
</tr>

<tr>
<td class="org-left">散列值</td>
<td class="org-left">用单向散列函数计算出来的数值</td>
</tr>

<tr>
<td class="org-left">消息认证码</td>
<td class="org-left">一种能够保证完整性和提供认证的密码技术</td>
</tr>

<tr>
<td class="org-left">数字签名</td>
<td class="org-left">能够防止伪装、篡改和否认等威胁的技术</td>
</tr>

<tr>
<td class="org-left">伪随机数生成器</td>
<td class="org-left">一种能够模拟产生随机数列的算法</td>
</tr>
</tbody>
</table>


<div class="figure">
<p><img src="0_cryptographer_toolkit.jpg"><br>
</p>
</div>
</div></li>
<li><a id="orgheadline10"></a>密码与信息安全常识<br><div class="outline-text-5" id="text-1-2-1-2">
<ul class="org-ul">
<li>不要使用保密的密码算法<br></li>
<li>使用低强度的密码比不进行任何加密更危险<br></li>
<li>任何密码总有一天都会被破解<br></li>
<li>密码只是信息安全的一部分<br></li>
</ul>
</div></li></ol>
</div>

<div id="outline-container-orgheadline17" class="outline-4">
<h4 id="orgheadline17"><span class="section-number-4">1.2.2</span> 历史上的密码</h4>
<div class="outline-text-4" id="text-1-2-2">
</div><ol class="org-ol"><li><a id="orgheadline13"></a>凯撒密码<br><div class="outline-text-5" id="text-1-2-2-1">
<p>
凯撒密码是通过将明文中所使用的字母表按照一定的字数平移来进行加密的。<br>
</p>

<p>
例如：所有字母平移 2 位来进行加密。guodong &#x2013;（加密）&#x2013;&gt;iwqfqpi. 此处 2 相当于密钥<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline12"></a>破解方法<br><div class="outline-text-6" id="text-1-2-2-1-1">
<p>
因为密钥空间比较小，只有 26，可以使用暴力破解来破译这种密码.<br>
</p>
</div></li></ol></li>

<li><a id="orgheadline15"></a>简单替换密码<br><div class="outline-text-5" id="text-1-2-2-2">
<p>
将明文中所使用的字母表替换为另一套字母表的密码称为简单替换密码。<br>
</p>


<div class="figure">
<p><img src="1_simple_passwordlist.jpg"><br>
</p>
</div>
</div>
<ol class="org-ol"><li><a id="orgheadline14"></a>破解方法<br><div class="outline-text-6" id="text-1-2-2-2-1">
<p>
使用频率分析的密码破译方法可以破解简单替换密码<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline16"></a>Enigma<br><div class="outline-text-5" id="text-1-2-2-3">
<p>
德国纳粹时期，德国国防军采用了 Enigma。<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline34" class="outline-4">
<h4 id="orgheadline34"><span class="section-number-4">1.2.3</span> 对称密码</h4>
<div class="outline-text-4" id="text-1-2-3">
</div><ol class="org-ol"><li><a id="orgheadline20"></a>基础概念<br><ol class="org-ol"><li><a id="orgheadline18"></a>编码<br><div class="outline-text-6" id="text-1-2-3-1-1">
<p>
将现实世界中的东西映射为比特序列的操作称为编码。例如，常见的字符编码有 ASCII UTF8 等编码<br>
</p>
</div></li>
<li><a id="orgheadline19"></a>XOR 运算<br><div class="outline-text-6" id="text-1-2-3-1-2">
<p>
全称为 exclusive or,译作异或运算。<br>
XOR 运算规则如下:<br>
0 XOR 0 = 0<br>
0 XOR 1 = 1<br>
1 XOR 0 = 1<br>
1 XOR 1 = 0<br>
</p>

<p>
将 0 理解为偶数，将 1 理解为奇数，就可以将 XOR 和一般的加法运算等同起来。<br>
偶数 0 + 偶数 0 = 偶数 0<br>
偶数 0 + 奇数 1 = 奇数 1<br>
奇数 1 + 偶数 0 = 奇数 1<br>
奇数 1 + 奇数 1 = 偶数 0<br>
</p>

<p>
将一个棋子保持原状（不翻转）看做 0，将一个棋子翻转到另一面看做 1，那么 XOR 运算就相当于将黑白棋的一个棋子进行翻转的操作进行连接<br>
不翻转 0 + 不翻转 0 = 不翻转 0<br>
不翻转 0 + 翻转 1 = 翻转 0<br>
翻转 1 + 不翻转 0 = 翻转 0<br>
翻转 1 + 翻转 1 = 不翻转 0<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline21"></a>一次性密码本<br><div class="outline-text-5" id="text-1-2-3-2">
<p>
一次性密码本是将明文与一串随机的比特序列进行 XOR 运算。<br>
一次性密码本是无法破译的。因为密钥和明文的长度相同，使用暴力破解法会枚举出所有明文长度的可能信息，无法判断真正的明文是哪个。<br>
</p>
</div></li>
<li><a id="orgheadline27"></a>DES<br><ol class="org-ol"><li><a id="orgheadline22"></a>概述<br><div class="outline-text-6" id="text-1-2-3-3-1">
<p>
DES 全称 Data Encryption Standard,1999 年 DES ChallengeIII 中用了 22 小时 15 分破解了 DES 加密的密文。目前已经不再使用该加密算法.<br>
DES 是以 64 比特的明文为一个单位来进行加密的，这个 64 比特的单位称为分组。以分组为单位进行处理的密码算法称为分组密码。<br>
DES 每次只能加密 64 比特的数据，如果要加密的明文比较长，就需要对 DES 加密进行迭代，而迭代的具体方式就称为模式。<br>
</p>
</div></li>
<li><a id="orgheadline26"></a>DES 的结构（Feistel 网络）<br><div class="outline-text-6" id="text-1-2-3-3-2">
<p>
在 Feistel 网络中，加密的各个步骤称为轮，整个加密过程就是进行若干次轮的循环。DES 是一种 16 轮循环的 Feistel 网络。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline23"></a>Feistel 的加密<br><div class="outline-text-7" id="text-1-2-3-3-2-1">

<div class="figure">
<p><img src="2_feistel_network_1times.jpg"><br>
</p>
</div>

<p>
一轮的具体计算步骤：<br>
</p>
<ul class="org-ul">
<li>将输入的数据等分为左右两部分<br></li>
<li>将输入的右侧直接发送到输出的右侧<br></li>
<li>将输入的右侧发送到轮函数<br></li>
<li>轮函数根据右侧数据和子密钥，计算初一串看上去是随机的比特序列<br></li>
<li>将上一步得到的比特序列与左侧的数据进行 XOR 运算，并将结果作为加密后的左侧<br></li>
</ul>

<p>
中间的“子密钥”指的是本轮加密所使用的密钥。在 Feistel 网络中，每一轮都需要使用不同的子密钥。由于子密钥只在一轮中使用，它只是一个局部密钥，因此才称为子密钥。<br>
</p>

<p>
<img src="3_feistel_network_3times.jpg"><br>
在一轮运算中，“右侧”根本没有被加密，因此需要用不同的子密钥对一轮的处理重复若干次，并在每两轮处理之间将左侧和右侧数据对调。<br>
</p>
</div></li>
<li><a id="orgheadline24"></a>Feistel 的解密<br><div class="outline-text-7" id="text-1-2-3-3-2-2">
<p>
<img src="4_feistel_network_decryption_1times.jpg"><br>
<img src="5_feistel_network_decryption_3times.jpg"><br>
</p>
</div></li>
<li><a id="orgheadline25"></a>Feistel 网络的性质<br><div class="outline-text-7" id="text-1-2-3-3-2-3">
<ul class="org-ul">
<li>Feistel 网络的轮数可以任意增加<br></li>
<li>加密时无论使用任何函数作为轮函数都可以正确解密<br></li>
<li>加密和解密可以用完全相同的结构来实现<br></li>
</ul>
</div></li></ol></li></ol></li>
<li><a id="orgheadline30"></a>三重 DES<br><ol class="org-ol"><li><a id="orgheadline28"></a>概述<br><div class="outline-text-6" id="text-1-2-3-4-1">
<p>
三重 DES 是为了增加 DES 的强度，将 DES 重复 3 次所得到的一种密码算法。<br>
</p>
</div></li>
<li><a id="orgheadline29"></a>3DES 的机制<br><div class="outline-text-6" id="text-1-2-3-4-2">
<p>
<img src="6_3des_cryption.jpg"><br>
3DES 之所以设计为 加密-&gt;解密-&gt;加密 的过程是为了兼容普通的 DES。<br>
<img src="7_3des_des_cryption.jpg"><br>
<img src="8_3des_decryption.jpg"><br>
</p>

<p>
3DES 目前还被银行等机构使用，但其处理速度不高。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline33"></a>AES<br><ol class="org-ol"><li><a id="orgheadline31"></a>概述<br><div class="outline-text-6" id="text-1-2-3-5-1">
<p>
AES (Advanced Encrytion Standard)是取代其前任标准 DES 而成为新标准的一种对称密码算法。<br>
</p>
</div></li>
<li><a id="orgheadline32"></a>Rijndael<br><div class="outline-text-6" id="text-1-2-3-5-2">
<p>
Rijndael 算法在 2000 年被选为新一代标准密码算法——AES。Rijndael 的分组长度为 128 比特，密钥长度可以以 32 比特为单位在 128 比特到 256 比特的范围内进行选择（在 AES 的规格中，密钥长度只有 128,193,256 比特三种）。<br>
它也是由多个轮构成的，其使用了 SPN 结构。<br>
</p>

<p>
<img src="9_aes_cryption.jpg"><br>
<img src="10_aes_decryption.jpg"><br>
</p>
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline47" class="outline-4">
<h4 id="orgheadline47"><span class="section-number-4">1.2.4</span> 分组密码的模式</h4>
<div class="outline-text-4" id="text-1-2-4">
</div><ol class="org-ol"><li><a id="orgheadline35"></a>基础概念<br><div class="outline-text-5" id="text-1-2-4-1">
<p>
密码算法可以分为分组密码和流密码两种。<br>
</p>
<ul class="org-ul">
<li>分组密码<br></li>
</ul>
<p>
每次只能处理特定长度的一块数据的一类密码算法，这里的“一块”就称为分组。一个分组的比特数就称为分组长度。<br>
</p>
<ul class="org-ul">
<li>流密码<br></li>
</ul>
<p>
对数据流进行连续处理的一类密码算法。<br>
</p>
<ul class="org-ul">
<li>分组密码的模式<br></li>
</ul>
<p>
分组密码算法只能加密固定长度的分组，当需要加密的明文长度超过分组密码的分组长度，就需要对分组密码算法进行迭代，以便将一段很长的明文全部加密。而迭代的方法就称为分组密码的模式。<br>
</p>
<ul class="org-ul">
<li>分组密码模式的分类<br>
<ul class="org-ul">
<li>ECB 模式：Electronic CodeBook mode 电子密码本模式<br></li>
<li>CBC 模式：Cipher Block Channing mode 密码分组链接模式<br></li>
<li>CFB 模式：Cipher FeedBack mode 密文反馈模式<br></li>
<li>OFB 模式：Output FeedBack mode 输出反馈模式<br></li>
<li>CTR 模式：CounTeR mode 计数器模式<br></li>
</ul></li>
<li>明文分组<br></li>
</ul>
<p>
明文分组是指分组密码算法中作为加密对象的明文。明文分组的长度和分组密码算法的分组长度是相等的。<br>
</p>
<ul class="org-ul">
<li>密文分组<br></li>
</ul>
<p>
密文分组是指使用分组密码算法将明文分组加密之后所生成的密文。<br>
</p>
</div></li>
<li><a id="orgheadline37"></a>ECB 模式<br><div class="outline-text-5" id="text-1-2-4-2">
<p>
在 ECB 模式中，将明文分组加密之后的结果将直接成为密文分组。<br>
<img src="11_ecb_mode.jpg"><br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline36"></a>ECB 模式的特点<br><div class="outline-text-6" id="text-1-2-4-2-1">
<p>
相同的明文分组会被转换为相同的密文分组。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline39"></a>CBC 模式<br><div class="outline-text-5" id="text-1-2-4-3">
<p>
在 CBC 模式中，首先将明文分组与前一个密文分组进行 XOR 运算，然后再进行加密<br>
<img src="12_cbc_mode.jpg"><br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline38"></a>CBC 模式的特点<br><div class="outline-text-6" id="text-1-2-4-3-1">
<p>
明文在加密之前回合前一个密文分组进行 XOR 运算，所以相同的明文分组对应的密文也不一样。<br>
有一个密文分组损坏会影响该密文分组以及下一个密文分组的明文，但是下下的密文分组不会受到影响。<br>
<img src="12_cbc_mode_error.jpg"><br>
如果能够对初始化向量中的任意比特进行反转，则第一个明文分组中相应的比特也会被反转。<br>
<img src="12_cbc_mode_crack.jpg"><br>
CBC 模式也可以被重放攻击<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline41"></a>CFB 模式<br><div class="outline-text-5" id="text-1-2-4-4">
<p>
在 CFB 模式中，前一个密文分组会被送回到密码算法的输入端。所谓反馈，这里指的就是返回输入端的意思。<br>
<img src="13_cfb_mode.jpg"><br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline40"></a>CFB 模式的特点<br><div class="outline-text-6" id="text-1-2-4-4-1">
<p>
CFB 模式中，密码算法的输出相当于一次性密码本中的随机比特序列。密码算法就相当于用来生成密钥流的伪随机生成器，而初始化向量就相当于伪随机数生成器的种子。<br>
CFB 模式可以被重放攻击<br>
<img src="13_cfb_mode_crack.jpg"><br>
</p>
</div></li></ol></li>
<li><a id="orgheadline43"></a>OFB 模式<br><div class="outline-text-5" id="text-1-2-4-5">
<p>
在 OFB 模式中，密码算法的输出会反馈到密码算法的输入中。<br>
<img src="14_ofb_mode.jpg"><br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline42"></a>OFB 模式的特点<br><div class="outline-text-6" id="text-1-2-4-5-1">
<p>
OFB 模式中，XOR 所需要的比特序列（密钥流）可以事先通过密码算法生成，和明文分组无关。<br>
OFB 模式中，如果对密钥流的一个分组进行加密后其结果碰巧和加密前是相同的，那么这一分组之后的密钥流就会变成同一值的不断反复。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline45"></a>CTR 模式<br><div class="outline-text-5" id="text-1-2-4-6">
<p>
CTR 模式是一种通过将逐次累加的计数器进行加密来生成密钥流的流密码。<br>
<img src="15_ctr_mode.jpg"><br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline44"></a>CTR 模式的特点<br><div class="outline-text-6" id="text-1-2-4-6-1">
<p>
CTR 模式中可以以任意顺序对分组进行加密和解密，因此在加密和解密时需要用到的“计数器”的值可以由 nonce 和分组序号直接计算出来。<br>
CTR 模式的密文分组中由一个比特被反转了，则解密后明文分组中仅由与之对应的比特会被翻转，这一错误不会放大。但是，攻击者也可以利用该特性来反转密文分组的某些比特，来引起明文中相应比特的反转。<br>
CTR 模式避免了 OFB 中加密前后一致导致的问题。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline46"></a>模式选择<br><div class="outline-text-5" id="text-1-2-4-7">

<div class="figure">
<p><img src="16_block_cipher_mode.jpg"><br>
</p>
</div>
</div></li></ol>
</div>
<div id="outline-container-orgheadline58" class="outline-4">
<h4 id="orgheadline58"><span class="section-number-4">1.2.5</span> 公钥密码</h4>
<div class="outline-text-4" id="text-1-2-5">
</div><ol class="org-ol"><li><a id="orgheadline54"></a>密钥配送问题<br><div class="outline-text-5" id="text-1-2-5-1">
<p>
密钥必须要发送，但又不能发送，这就是对称密码的密钥配送问题。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline49"></a>通过事先共享密钥来解决<br><div class="outline-text-6" id="text-1-2-5-1-1">
<p>
需要用一种安全的方式将密钥交给对方。例如，直接将密钥保存在 U 盘中，然后亲手将 U 盘交给对方。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline48"></a>缺点<br><div class="outline-text-7" id="text-1-2-5-1-1-1">
<p>
当人数很多时，通信需要的密钥数量会增大。1000 名员工彼此加密通讯需要 1000*999/2 = 499500 个密钥<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline51"></a>通过密钥分配中心来解决<br><div class="outline-text-6" id="text-1-2-5-1-2">
<p>
密钥中心为每次会话生成会话密钥，然后，用参与会话的人的密钥加密会话密钥，将加密后的会话密钥发给参与会话的人。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline50"></a>缺点<br><div class="outline-text-7" id="text-1-2-5-1-2-1">
<p>
每次会话都需要密钥中心进行处理，密钥中心负荷随通话增多而增多。<br>
密钥中心瘫痪后，整个加密通讯就瘫痪了。<br>
密钥中心被攻破，全公司的所有加密通讯都会被破译。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline52"></a>通过 Diffie-Hellman 密钥交换来解决<br><div class="outline-text-6" id="text-1-2-5-1-3">
<p>
根据所交换的信息，双方可以各自生成相同的密钥，而窃听者却无法生成相同的密钥。<br>
</p>
</div></li>
<li><a id="orgheadline53"></a>通过公钥密码来解决<br><div class="outline-text-6" id="text-1-2-5-1-4">
<p>
公钥密码中，密钥分为加密密钥和解密密钥，它们是不同的。发送者用加密密钥对消息进行加密，接收者用解密密钥对密文进行解密。只要拥有加密密钥，任何人都可以进行加密，但是没有解密密钥是无法解密的。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline57"></a>公钥密码<br><div class="outline-text-5" id="text-1-2-5-2">
<p>
在公钥密码中，加密密钥一般时公开的。因此该密钥被称为公钥。<br>
在公钥密码中，解密密钥是绝对不能公开的，这个密钥只能自己来使用，因此该密钥被称为私钥。<br>
公钥和私钥是一一对应的，一对公钥和私钥统称为密钥对。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline55"></a>公钥密码通讯流程<br><div class="outline-text-6" id="text-1-2-5-2-1">

<div class="figure">
<p><img src="17_public_key_communication.jpg"><br>
</p>
</div>
</div></li>
<li><a id="orgheadline56"></a>缺点<br><div class="outline-text-6" id="text-1-2-5-2-2">
<p>
公钥密码带来了公钥认证问题，需要判断得到的公钥是否正确合法。<br>
公钥密码的处理速度比对称密码要慢很多.<br>
</p>
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline78" class="outline-4">
<h4 id="orgheadline78"><span class="section-number-4">1.2.6</span> RSA</h4>
<div class="outline-text-4" id="text-1-2-6">
<p>
RSA 是一种公钥密码算法，RSA 可被用于公钥密码和数字签名。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline59"></a>RSA 加密<br><div class="outline-text-5" id="text-1-2-6-1">
<p>
RSA 的密文是代表明文的数字的 E 次方求 mod N 的结果。也就是说将明文和自己做 E 次乘法，然后将其结果除以 N 求余数，这个余数就是密文。<br>
E 和 N 的组合就是公钥。(E 表示 Encryption，N 表示 Number)<br>
</p>
</div></li>
<li><a id="orgheadline60"></a>RSA 解密<br><div class="outline-text-5" id="text-1-2-6-2">
<p>
RSA 的对表示密文的数字的 D 次方求 mod N 的结果。也就是说将密文和自己做 D 次乘法，然后将其结果除以 N 求余数，这个余数就是明文。<br>
D 和 N 的组合就是私钥。(D 表示 Decryption，N 表示 Number)<br>
</p>
</div></li>
<li><a id="orgheadline66"></a>生成密钥对<br><div class="outline-text-5" id="text-1-2-6-3">
<p>
求 E、D、N 这三个数就是生成密钥对。RAS 密钥对的生成步骤如下：<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline61"></a>求 N<br><div class="outline-text-6" id="text-1-2-6-3-1">
<p>
准备两个很大的质数：p 和 q<br>
N = p * q<br>
</p>
</div></li>
<li><a id="orgheadline62"></a>求 L（L 是仅在生成密钥对的过程中使用的数）<br><div class="outline-text-6" id="text-1-2-6-3-2">
<p>
L 是 p-1 和 q-1 的最小公倍数<br>
L = lcm(p-1, q-1)<br>
</p>
</div></li>
<li><a id="orgheadline63"></a>求 E<br><div class="outline-text-6" id="text-1-2-6-3-3">
<p>
E 和 L 之间存在下列关系：<br>
1&lt; E &lt;L<br>
gcd(E,L) = 1 (E 和 L 的最大公约数为 1 E 和 L 互质,该条件保证一定存在解密时需要使用的数 D)<br>
</p>
</div></li>
<li><a id="orgheadline64"></a>求 D<br><div class="outline-text-6" id="text-1-2-6-3-4">
<p>
D、E、L 之间必须具备下列关系：<br>
1&lt;D&lt;L<br>
E*D mod L = 1<br>
</p>
</div></li>
<li><a id="orgheadline65"></a>RSA 生成密钥对图解<br><div class="outline-text-6" id="text-1-2-6-3-5">

<div class="figure">
<p><img src="19_rsa.jpg"><br>
</p>
</div>
</div></li></ol></li>
<li><a id="orgheadline73"></a>对 RSA 的攻击<br><div class="outline-text-5" id="text-1-2-6-4">
<ul class="org-ul">
<li>密码破译者知道的信息：<br>
<ul class="org-ul">
<li>密文：可以通过窃听来获取<br></li>
<li>数 E 和 N:公钥是公开的信息<br></li>
</ul></li>
<li>密码破译者不知道的信息：<br>
<ul class="org-ul">
<li>明文:需要破译的内容<br></li>
<li>数字 D:私钥中至少 D 是不知道的信息<br></li>
<li>其他：密码破译者不知道生成密钥对时所使用的 p、q 和 L<br></li>
</ul></li>
</ul>
</div>
<ol class="org-ol"><li><a id="orgheadline67"></a>通过密文来求明文<br><div class="outline-text-6" id="text-1-2-6-4-1">
<p>
密文 = 明文^E mode N<br>
目前还没有发现求离散对数的高效算法，所以通过明文求密文非常困难。<br>
</p>
</div></li>
<li><a id="orgheadline68"></a>通过暴力破解来找出 D<br><div class="outline-text-6" id="text-1-2-6-4-2">
<p>
RSA 中所使用的 p 和 q 的长度都是 512 比特以上，N 的长度为 1024 比特以上。由于 E 和 D 的长度可以和 N 差不多，因此要找出 D，就需要进行 1024 比特以上的暴力破解，这也非常困难。<br>
</p>
</div></li>
<li><a id="orgheadline71"></a>通过 E 和 N 求出 D<br><div class="outline-text-6" id="text-1-2-6-4-3">
<p>
D 和 E 的关系如下：<br>
E x D mod L = 1<br>
L = lcm(p-1, q-1)<br>
N = p * q<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline69"></a>对 N 进行质因数分解攻击<br><div class="outline-text-7" id="text-1-2-6-4-3-1">
<p>
由 N 求 p 和 q 可以通过将 N 进行质因数分解来完成。所以一旦发现了对大整数进行质因数分解的高效算法，RSA 就能够被破译。<br>
目前还没有发现对大整数进行质因数分解的高效算法，也没有证明质因数分解是否真的是非常困难的问题，也不知道是否存在一种分解质因数的简单方法。<br>
</p>
</div></li>
<li><a id="orgheadline70"></a>通过推测 p 和 q 进行攻击<br><div class="outline-text-7" id="text-1-2-6-4-3-2">
<p>
由于 p 和 q 是通过伪随机数生成器产生的，如果伪随机数生成器的算法很差，密码破译者就有可能推测出来 p 和 q。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline72"></a>中间人攻击<br><div class="outline-text-6" id="text-1-2-6-4-4">

<div class="figure">
<p><img src="19_rsa_middleman_crack.jpg"><br>
</p>
</div>
</div></li></ol></li>

<li><a id="orgheadline77"></a>其他公钥密码<br><ol class="org-ol"><li><a id="orgheadline74"></a>EIGamal 方式<br><div class="outline-text-6" id="text-1-2-6-5-1">
<p>
EIGamal 方式利用了 mod N 下求离散对数的困难度。<br>
EIGamal 方式的一个缺点是，经过加密的密文长度会变为明文的两倍。<br>
</p>
</div></li>
<li><a id="orgheadline75"></a>Rabin 方式<br><div class="outline-text-6" id="text-1-2-6-5-2">
<p>
Rabin 方式利用了 mod N 下求平方根的困难度。<br>
</p>
</div></li>
<li><a id="orgheadline76"></a>椭圆曲线密码<br><div class="outline-text-6" id="text-1-2-6-5-3">
<p>
椭圆曲线密码的特点是所需密钥长度比 RSA 短。<br>
椭圆曲线密码是通过将椭圆曲线上的特定点进行特殊的乘法运算来实现的，它利用了这种乘法运算的逆运算非常困难这一特性。<br>
</p>
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline81" class="outline-4">
<h4 id="orgheadline81"><span class="section-number-4">1.2.7</span> 混合密码系统</h4>
<div class="outline-text-4" id="text-1-2-7">
</div><ol class="org-ol"><li><a id="orgheadline79"></a>加密<br><div class="outline-text-5" id="text-1-2-7-1">

<div class="figure">
<p><img src="20_hybird_encrypt.jpg"><br>
</p>
</div>
</div></li>
<li><a id="orgheadline80"></a>解密<br><div class="outline-text-5" id="text-1-2-7-2">

<div class="figure">
<p><img src="20_hybird_decrypt.jpg"><br>
</p>
</div>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline140" class="outline-3">
<h3 id="orgheadline140"><span class="section-number-3">1.3</span> 认证</h3>
<div class="outline-text-3" id="text-1-3">
</div><div id="outline-container-orgheadline113" class="outline-4">
<h4 id="orgheadline113"><span class="section-number-4">1.3.1</span> 单向散列函数</h4>
<div class="outline-text-4" id="text-1-3-1">
<p>
单向散列函数有一个输入和一个输出，其中输入称为消息，输出称为散列值。单向散列函数可以根据消息的内容计算出散列值，散列值可以被用来检查消息的完整性。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline86"></a>单向散列函数的性质<br><ol class="org-ol"><li><a id="orgheadline83"></a>根据任意长度的消息计算初固定长度的散列值<br></li>
<li><a id="orgheadline84"></a>消息不同散列值也不同<br><div class="outline-text-6" id="text-1-3-1-1-2">
<p>
两个不同的消息产生同一个散列值的情况称为碰撞.<br>
难以发现碰撞的性质称为抗碰撞性。<br>
弱抗碰撞性：当给定某条消息的散列值时，单向散列函数必须确保要找到和该条消息具备相同散列值的另外一条消息是非常困难的。<br>
强抗碰撞性：要找到散列值相同的两条不同的消息时非常困难的，这里的散列值可以是任意值。<br>
</p>
</div></li>
<li><a id="orgheadline85"></a>具备单向性<br><div class="outline-text-6" id="text-1-3-1-1-3">
<p>
无法通过散列值反算出消息的内容。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline93"></a>单向散列函数的应用<br><ol class="org-ol"><li><a id="orgheadline87"></a>检测软件是否被篡改<br><div class="outline-text-6" id="text-1-3-1-2-1">
<p>
用户下载到软件后，可以自行计算散列值，然后与官方网站上公布的散列值进行对比。<br>
</p>
</div></li>
<li><a id="orgheadline88"></a>基于口令的加密<br><div class="outline-text-6" id="text-1-3-1-2-2">
<p>
基于口令的加密（PBE password based encrytion）的原理是将口令和盐（salt，通过伪随机数生成器产生的随机值）混合后计算其散列值，然后，将这个散列值作为加密的密钥。通过这样的方法能够预防针对口令的字典攻击。<br>
</p>
</div></li>
<li><a id="orgheadline89"></a>消息认证码<br><div class="outline-text-6" id="text-1-3-1-2-3">
<p>
使用单向散列函数可以构造消息认证码。消息认证码是将“发送者和接收者之间的共享密钥”和“信息”进行混合后计算出的散列值。<br>
</p>
</div></li>
<li><a id="orgheadline90"></a>数字签名<br><div class="outline-text-6" id="text-1-3-1-2-4">
<p>
数字签名的处理过程非常耗时，因此一般不会对整个消息内容直接施加数字签名，而是先通过单向散列函数计算出消息的散列值，然后再对这个散列值施加数字签名。<br>
</p>
</div></li>
<li><a id="orgheadline91"></a>伪随机数生成器<br><div class="outline-text-6" id="text-1-3-1-2-5">
<p>
密码技术中所使用的随机数需要具备“事实上不可能根据过去的随机数列预测未来的随机数列”这样的性质。为了保证不可预测性，可以利用单向散列函数的单向性。<br>
</p>
</div></li>
<li><a id="orgheadline92"></a>一次性口令<br><div class="outline-text-6" id="text-1-3-1-2-6">
<p>
一次性口令经常被用于服务器对客户端的合法性认证。在这种方式中，通过使用单向散列函数可以保证口令只在通信链路上传送一次，因此即使窃听者窃取了口令，也无法使用。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline98"></a>单向散列函数的具体实例<br><ol class="org-ol"><li><a id="orgheadline94"></a>MD4 MD5<br><div class="outline-text-6" id="text-1-3-1-3-1">
<p>
MD 是消息摘要（Message Digest）的缩写。MD4 和 MD5 目前都已经不安全了。<br>
</p>
</div></li>
<li><a id="orgheadline95"></a>SHA-1 SHA-256 SHA-384 SHA-512<br><div class="outline-text-6" id="text-1-3-1-3-2">
<p>
SHA-1 的强抗碰撞性已于 2005 年被攻破。<br>
</p>
</div></li>
<li><a id="orgheadline96"></a>RIPEMD-160<br><div class="outline-text-6" id="text-1-3-1-3-3">
<p>
RIPEMD-160 是 RIPEMD 的修订版。RIPEMD 的强抗碰撞性已经于 2004 年被攻破。<br>
</p>
</div></li>
<li><a id="orgheadline97"></a>ASH 与 SHA-3<br><div class="outline-text-6" id="text-1-3-1-3-4">
<p>
SHA-3 用于取代 SHA-1。SHA-3 和 AES 一样采用公开竞赛的方式进行标准化。<br>
2012 年 10 月 2 日，期盼已久的 SHA-3 获胜算法终于揭开了她的面纱，她就是 Keccak 算法！Keccak 算法由意法半导体的 Guido Bertoni、Joan Daemen（AES 算法合作者）和 Gilles Van Assche，以及恩智浦半导体的 Michaël Peeters 联合开发。NIST 计算机安全专家 Tim Polk 说，Keccak 的优势在于它与 SHA-2 设计上存在极大差别，适用于 SHA-2 的攻击方法将不能作用于 Keccak。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline108"></a>单向散列函数 SHA-1<br><div class="outline-text-5" id="text-1-3-1-4">

<div class="figure">
<p><img src="21_sha1_overview.jpg"><br>
</p>
</div>
</div>
<ol class="org-ol"><li><a id="orgheadline102"></a>填充<br><div class="outline-text-6" id="text-1-3-1-4-1">
<p>
对消息进行填充处理，使其长度为 512 比特的整数倍。这里 512 比特称为一个输入分组。<br>
输入 SHA-1 的消息长度应大于 0 比特小于 2^64 比特。<br>
SHA-1 的填充过程如下：<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline99"></a>添加 1<br><div class="outline-text-7" id="text-1-3-1-4-1-1">
<p>
在消息末尾添加一个 1 比特的数值“1”，这样消息的长度就增加了 1 比特。<br>
</p>
</div></li>
<li><a id="orgheadline100"></a>添加 0<br><div class="outline-text-7" id="text-1-3-1-4-1-2">
<p>
在消息的末尾继续添加 0，直到消息的长度达到 512 比特的整数倍。但是，最后一个分组的最后 64 比特需要空出来以便保存原始的消息长度。<br>
</p>
</div></li>
<li><a id="orgheadline101"></a>添加消息长度<br><div class="outline-text-7" id="text-1-3-1-4-1-3">
<p>
在最后一个分组的最后 64 比特中保存原始消息的长度。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline105"></a>计算 W0-W79<br><div class="outline-text-6" id="text-1-3-1-4-2">
<p>
根据输入分组的 512 比特计算出 80 个 32 比特的值（W0-W79）<br>
首先，输入分组的 512 比特分成 32 比特*16 组，并将它们命名为 W0-W15.<br>
然后，剩下的 W16-W79 的计算方法如下。<br>
W16 = （W0 xor W2 xor W8 xor W13） 循环左移 1 比特<br>
Wt = W(t-16) xor W(t-14) xor W(t-8) xor W(t-3) 循环左移 1 比特<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline103"></a>循环左移 1 比特操作图如下：<br><div class="outline-text-7" id="text-1-3-1-4-2-1">

<div class="figure">
<p><img src="21_sha1_shiftleft1.jpg"><br>
</p>
</div>
</div></li>
<li><a id="orgheadline104"></a>计算 W0-W79 操作图如下：<br><div class="outline-text-7" id="text-1-3-1-4-2-2">

<div class="figure">
<p><img src="21_sha1_calcW.jpg"><br>
</p>
</div>
</div></li></ol></li>
<li><a id="orgheadline106"></a>分组处理<br><div class="outline-text-6" id="text-1-3-1-4-3">
<p>
对输入分组一次进行 80 个步骤的处理，计算 5 个 32 比特的值（A-E）作为 SHA-1 的内部状态。对所有的分组都要进行这一操作。<br>
160 比特的内部状态是通过名为 ABCDE 的 5 个 32 比特的缓冲区来表示的，80 个步骤所完成的操作，就是将输入分组的 512 比特的数据，与 SHA-1 所保持的 160 比特的内部状态（5 个缓冲区）进行混合。通过上述 80 个步骤的反复执行，SHA-1 就能够将已经过填充的消息全部混入这 160 比特的内部状态中，而 SHA-1 所输出的散列值，就是所有处理结束之后最终的内部状态（160 比特）。<br>
<img src="21_sha1_processblock.jpg"><br>
</p>
</div></li>
<li><a id="orgheadline107"></a>单步处理<br><div class="outline-text-6" id="text-1-3-1-4-4">
<p>
分组处理是由 80 个步骤的处理组成的，其中每个步骤都是基于 W0-W79 使内部状态进行复杂变化的处理。<br>
在一个步骤完成后，缓冲区 ABCD 的内容会被分别复制到 BCDE 中（其中 B 要循环左移 30 比特之后再复制），而缓冲区 E 的内容则会与其他缓冲区的内容以及 Wt，Kt 相加之后再被复制到缓冲区 A 中。<br>
由于上述处理要循环 80 个步骤，因此输入分组中 1 个比特的变化，就会影响到散列值中几乎所有的比特，通过这样的方式，我们就能够实现单向散列函数所应具备的性质。<br>
<img src="21_sha1_onestep.jpg"><br>
</p>
</div></li></ol></li>
<li><a id="orgheadline111"></a>对单向散列函数的攻击<br><ol class="org-ol"><li><a id="orgheadline109"></a>暴力破解<br><div class="outline-text-6" id="text-1-3-1-5-1">
<p>
寻找和特定消息具备相同散列值的另一条不同的消息。这是一种试图破解单向散列函数的“弱抗碰撞性”的攻击<br>
</p>
</div></li>
<li><a id="orgheadline110"></a>生日攻击<br><div class="outline-text-6" id="text-1-3-1-5-2">
<p>
寻找散列值相同的两条消息，散列值可以是任意值。这是一种试图破解单向散列函数的“强抗碰撞性”的攻击<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline112"></a>单向散列函数无法解决的问题<br><div class="outline-text-5" id="text-1-3-1-6">
<p>
单向散列函数可以辨别出“篡改”，但无法辨别出“伪装”<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline137" class="outline-4">
<h4 id="orgheadline137"><span class="section-number-4">1.3.2</span> 消息认证码</h4>
<div class="outline-text-4" id="text-1-3-2">
</div><ol class="org-ol"><li><a id="orgheadline114"></a>什么是消息认证码<br><div class="outline-text-5" id="text-1-3-2-1">
<p>
消息认证码（message authentication code）是一种确认完整性并进行认证的技术，取三个单词的首字母，简称 MAC。<br>
消息认证码的输入包括任意长度的消息和一个发送者和接收者之间共享的密钥，它可以输出固定长度的数据，这个数据称为 MAC 值。<br>
根据任意长度的消息输出固定长度的数据，这一点和单向散列函数很类似。但是单向散列函数中计算散列值时不需要密钥，而消息认证码中则需要使用发送者和接收者之间共享的密钥。<br>
要计算 MAC 必须持有共享密钥，没有共享密钥的人就无法计算 MAC 值，消息认证码正式利用这一性质来完成认证的。<br>
和单向散列函数的散列值一样，哪怕消息中发生 1 比特的变化，MAC 值也会产生变化，消息认证码正是利用这一性质来确认完整性的。<br>
<img src="22_mac_vs_sha.jpg"><br>
</p>
</div></li>
<li><a id="orgheadline115"></a>消息认证码的使用步骤<br><div class="outline-text-5" id="text-1-3-2-2">

<div class="figure">
<p><img src="22_mac.jpg"><br>
</p>
</div>
</div></li>
<li><a id="orgheadline119"></a>消息认证码的实现方法<br><ol class="org-ol"><li><a id="orgheadline116"></a>利用单向散列函数可以实现消息认证码<br></li>
<li><a id="orgheadline117"></a>使用分组密码实现<br><div class="outline-text-6" id="text-1-3-2-3-2">
<p>
使用 DES，AES 之类的分组密码可以实现消息认证码。具体做法为，将分组密码的密钥作为消息认证码的共享密钥来使用，并使用 CBC 模式将消息全部加密。由于消息认证码中不需要解密，因此将除最后一个分组以外的密文部分全部丢弃，而将最后一个分组作为 MAC 值。由于 CBC 模式的最后一个分组会受到整个消息以及密钥的双重影响，因此可以将它用作消息认证码。<br>
</p>
</div></li>
<li><a id="orgheadline118"></a>其他实现方法<br><div class="outline-text-6" id="text-1-3-2-3-3">
<p>
使用流密码和公钥密码也可以实现消息认证码。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline127"></a>HMAC<br><div class="outline-text-5" id="text-1-3-2-4">
<p>
HMAC 是一种使用单向散列函数来构造消息认证码的方法，其中 HMAC 的 H 就是 Hash 的意思。HMAC 中所使用的单向散列函数并不仅限于一种，任何高强度的单向散列函数都可以被用于 HMAC。<br>
<img src="22_mac_hmac.jpg"><br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline120"></a>1 密钥填充<br><div class="outline-text-6" id="text-1-3-2-4-1">
<p>
如果密钥比单向散列函数的分组长度要短，就需要在末尾填充 0，直到其长度达到单向散列函数的分组长度为止。<br>
如果密钥比单向散列函数的分组要长，则要用单向散列函数求出密钥的散列值，然后将这个散列值用作 HMAC 的密钥。<br>
</p>
</div></li>
<li><a id="orgheadline121"></a>2 填充后的密钥与 ipad 的 XOR<br><div class="outline-text-6" id="text-1-3-2-4-2">
<p>
将填充后的密钥与被称为 ipad 的比特序列进行 XOR 运算。ipad 是将 00110110 这一比特序列（即 16 进制的 36）不断循环反复直到达到分组长度所形成的比特序列，其中 ipad 的 i 是 inner（内部）的意思。<br>
XOR 运算所得到的值，就是一个和单向散列函数的分组长度相同，且和密钥相关的比特序列。这里我们将这个比特序列称为 ipadkey<br>
</p>
</div></li>
<li><a id="orgheadline122"></a>3 与消息组合<br><div class="outline-text-6" id="text-1-3-2-4-3">
<p>
随后，将 ipadkey 与消息进行组合，也就是将密钥相关的比特序列（ipadkey）附加在消息的开头。<br>
</p>
</div></li>
<li><a id="orgheadline123"></a>4 计算散列值<br><div class="outline-text-6" id="text-1-3-2-4-4">
<p>
将第 3 步的结果输入单向散列函数，并计算初散列值。<br>
</p>
</div></li>
<li><a id="orgheadline124"></a>5 填充后的密钥与 opad 的 XOR<br><div class="outline-text-6" id="text-1-3-2-4-5">
<p>
将填充后的密钥与被称为 opad 的比特序列进行 XOR 运算。opad 是将 01011100 这一比特序列（即 16 进制的 5C）不断循环反复直到达到分组长度所形成的比特序列，其中 opad 的 o 是 outer（外部）的意思。<br>
XOR 运算所得到的值，这里我们将其称为 opadkey<br>
</p>
</div></li>
<li><a id="orgheadline125"></a>6 将 第 4 步 的散列值拼在 opadkey 后面<br></li>
<li><a id="orgheadline126"></a>7 计算散列值<br><div class="outline-text-6" id="text-1-3-2-4-7">
<p>
将第 6 步的结果输入单向散列函数，并计算出散列值。这个散列值就是最终的 MAC 值。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline133"></a>对消息认证码的攻击<br><ol class="org-ol"><li><a id="orgheadline131"></a>重放攻击<br><div class="outline-text-6" id="text-1-3-2-5-1">
<p>
将正确的 MAC 值保持下来重复利用，这种攻击方式称为重放攻击。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline128"></a>序号<br><div class="outline-text-7" id="text-1-3-2-5-1-1">
<p>
约定每次都对发送的消息赋予一个递增的编号（序号），并且计算 MAC 值时将序号也包含在消息中。这种方法虽然有效，但是对每个通信对象都需要记录最后一个消息的序号。<br>
</p>
</div></li>
<li><a id="orgheadline129"></a>时间戳<br><div class="outline-text-7" id="text-1-3-2-5-1-2">
<p>
约定在消息发送时包含当前的时间，如果收到以前的消息，即便 MAC 值正确也将其当做错误的消息来处理。这种方法需要保证发送者和接收者的时钟必须一致，而且考虑到通信的延迟，必须在时间的判断上留下缓冲，依然还有重放攻击的可能。<br>
</p>
</div></li>
<li><a id="orgheadline130"></a>nonce<br><div class="outline-text-7" id="text-1-3-2-5-1-3">
<p>
在通信之前，接收者先向发送者发送一个一次性的随机数，这个随机数一般称为 nonce。发送者在消息中包含这个 nonce 并计算 MAC 值。由于每次通信时 nonce 的值都会发生变化，因此无法进行重放攻击。该方法虽然有效，但通信的数据量会有所增加。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline132"></a>密钥推测攻击<br><div class="outline-text-6" id="text-1-3-2-5-2">
<p>
对于消息认证码来说，应保证不能根据 MAC 值推测出通信双方所使用的密钥。HMAC 中就是利用单向散列函数的单向性和抗碰撞性来保证无法根据 MAC 值推测出密钥的。<br>
此外，在生成消息认证码所使用的密钥时，必须使用密码学安全的、高强度的伪随机数生成器。如果密钥是人为选定的，则会增加密钥被推测的风险。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline136"></a>消息认证码无法解决的问题<br><ol class="org-ol"><li><a id="orgheadline134"></a>对第三方证明<br></li>
<li><a id="orgheadline135"></a>防止否认<br></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline138" class="outline-4">
<h4 id="orgheadline138"><span class="section-number-4">1.3.3</span> 数字签名</h4>
</div>

<div id="outline-container-orgheadline139" class="outline-4">
<h4 id="orgheadline139"><span class="section-number-4">1.3.4</span> 证书</h4>
</div>
</div>
<div id="outline-container-orgheadline146" class="outline-3">
<h3 id="orgheadline146"><span class="section-number-3">1.4</span> 密码学应用</h3>
<div class="outline-text-3" id="text-1-4">
</div><div id="outline-container-orgheadline141" class="outline-4">
<h4 id="orgheadline141"><span class="section-number-4">1.4.1</span> 密钥-秘密的精华</h4>
</div>
<div id="outline-container-orgheadline142" class="outline-4">
<h4 id="orgheadline142"><span class="section-number-4">1.4.2</span> 随机数-不可预测性的源泉</h4>
</div>
<div id="outline-container-orgheadline143" class="outline-4">
<h4 id="orgheadline143"><span class="section-number-4">1.4.3</span> PGP</h4>
</div>
<div id="outline-container-orgheadline144" class="outline-4">
<h4 id="orgheadline144"><span class="section-number-4">1.4.4</span> SSL/TLS</h4>
</div>
<div id="outline-container-orgheadline145" class="outline-4">
<h4 id="orgheadline145"><span class="section-number-4">1.4.5</span> 密码技术与现实社会</h4>
</div>
</div>
</div>
<div id="outline-container-orgheadline148" class="outline-2">
<h2 id="orgheadline148"><span class="section-number-2">2</span> 密码学实践</h2>
<div class="outline-text-2" id="text-2">
<p>
实践项目 <a href="https://github.com/wolfand11/cryptology" target="_blank" rel="external">https://github.com/wolfand11/cryptology</a><br>
</p>
<ul class="org-ul">
<li>DES 实现<br></li>
<li>AES 实现<br></li>
<li>TEA 实现<br></li>
<li>RSA 实现<br></li>
<li>sha-1 实现<br></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline149" class="outline-2">
<h2 id="orgheadline149"><span class="section-number-2">3</span> 参考资料</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>TEA <a href="https://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm" target="_blank" rel="external">https://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm</a><br></li>
</ul>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> cryptology </category>
            
            <category> theory </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cryptology </tag>
            
            <tag> decode </tag>
            
            <tag> encode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Compiler]]></title>
      <url>http://wolfand11.coding.me/2017/09/14/architecture/Compiler/</url>
      <content type="html"><![CDATA[

关于编译器的一些笔记
<a id="more"></a>

<div id="outline-container-orgheadline9" class="outline-2">
<h2 id="orgheadline9"><span class="section-number-2">1</span> 编译器理论</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> 编译器概述</h3>
</div>
<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2"><span class="section-number-3">1.2</span> 词法分析</h3>
</div>
<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3"><span class="section-number-3">1.3</span> 语法分析</h3>
</div>
<div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4"><span class="section-number-3">1.4</span> 语法制导翻译与抽象语法树</h3>
</div>
<div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5"><span class="section-number-3">1.5</span> 语义分析</h3>
</div>
<div id="outline-container-orgheadline6" class="outline-3">
<h3 id="orgheadline6"><span class="section-number-3">1.6</span> 代码生成</h3>
</div>
<div id="outline-container-orgheadline7" class="outline-3">
<h3 id="orgheadline7"><span class="section-number-3">1.7</span> 中间代码与程序分析</h3>
</div>
<div id="outline-container-orgheadline8" class="outline-3">
<h3 id="orgheadline8"><span class="section-number-3">1.8</span> 代码优化</h3>
</div>
</div>

<div id="outline-container-orgheadline10" class="outline-2">
<h2 id="orgheadline10"><span class="section-number-2">2</span> sproto 源码分析</h2>
</div>


<div id="outline-container-orgheadline11" class="outline-2">
<h2 id="orgheadline11"><span class="section-number-2">3</span> 参考资料</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>中科大 编译原理公开课 <a href="http://mooc.study.163.com/course/USTC-1000002001" target="_blank" rel="external">http://mooc.study.163.com/course/USTC-1000002001</a><br></li>
</ul>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> theory </category>
            
        </categories>
        
        
        <tags>
            
            <tag> compiler </tag>
            
            <tag> theory </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Game Engine Architecture]]></title>
      <url>http://wolfand11.coding.me/2017/09/03/architecture/GameEngineArchitecture/</url>
      <content type="html"><![CDATA[

Game Engine Architecture 读书笔记
<a id="more"></a>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><span class="section-number-2">1</span> 第一部分 Foundations</h2>
</div>
<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2"><span class="section-number-2">2</span> 第二部分 Low-Level Engine Systems</h2>
</div>
<div id="outline-container-orgheadline13" class="outline-2">
<h2 id="orgheadline13"><span class="section-number-2">3</span> 第三部分 Graphics and Motion</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3"><span class="section-number-3">3.1</span> Rendering Engine</h3>
</div>
<div id="outline-container-orgheadline11" class="outline-3">
<h3 id="orgheadline11"><span class="section-number-3">3.2</span> Animation Systems</h3>
<div class="outline-text-3" id="text-3-2">
</div><div id="outline-container-orgheadline8" class="outline-4">
<h4 id="orgheadline8"><span class="section-number-4">3.2.1</span> Skinning and Matrix Palette Generation</h4>
<div class="outline-text-4" id="text-3-2-1">
</div><ol class="org-ol"><li><a id="orgheadline4"></a>Per-Vertex Skinning Information<br><div class="outline-text-5" id="text-3-2-1-1">
<p>
将网格的顶点关联到骨骼就是蒙皮网格。<br>
将网格蒙皮到骨骼时，必须为每个顶点提供额外的信息：<br>
</p>
<ul class="org-ul">
<li>顶点所关联的关节的索引<br></li>
<li>顶点对每个所关联的关节的权重值为多少<br></li>
</ul>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">SkinnedVertex</span>
{
    <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">m_position</span>[3]; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">(Px, Py, Pz)</span>
    <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">m_normal</span>[3]; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">(Nx, Ny, Nz)</span>
    <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">m_u</span>, <span style="color: #eedd82;">m_v</span>; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">texture coordinates (u, v)</span>
    <span style="color: #98fb98;">U8</span> <span style="color: #eedd82;">m_jointIndex</span>[4]; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">joint indices</span>
    <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">m_jointWeight</span>[3]; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">joint weights, last one omitted</span>
}
</pre>
</div>
</div></li>
<li><a id="orgheadline7"></a>The Mathematics of Skinning<br><div class="outline-text-5" id="text-3-2-1-2">
<p>
蒙皮矩阵是将蒙皮网格的顶点从原来的位置（绑定姿势）变换至骨骼的当前姿势的矩阵<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline5"></a>对于单个关节骨骼求解蒙皮矩阵<br><div class="outline-text-6" id="text-3-2-1-2-1">
<ul class="org-ul">
<li>\(V_j\)       为在关节 j 空间下表示的顶点坐标<br></li>
<li>\(V_{B}^{M}\) 为在模型空间下表示的绑定姿势的顶点坐标<br></li>
<li>\(V_{C}^{M}\) 为在模型空间下表示的当前姿势的顶点坐标<br></li>
<li>\(B_{j \to M}\) 绑定姿势下，将关节 j 空间坐标转化为模型空间坐标的矩阵<br></li>
<li>\(B_{M \to j}\) 绑定姿势下，将模型空间坐标转化为关节 j 空间坐标的矩阵<br></li>
</ul>

\begin{align}
& \quad V_j = V_{B}^{M}B_{M \to j} = V_{B}^{M}(B_{j \to M})^{-1}          \nonumber \\
& \quad V_{B}^{M} = V_jC_{j \to M}          \nonumber \\
& \quad V_{C}^{M} = V_jC_{j \to M}                 \nonumber \\
& \quad = V_{B}^{M}(B_{j \to M})^{-1}C_{j \to M}   \nonumber \\
& \quad = V_{B}^{M}K_j                 \nonumber \\
& \quad K_j = (B_{j \to M})^{-1}C_{j \to M}       \nonumber \\
\end{align}

<p>
上面的 \(K_j\) 就是蒙皮矩阵<br>
</p>
</div></li>
<li><a id="orgheadline6"></a>对于多个关节骨骼求解蒙皮矩阵<br><div class="outline-text-6" id="text-3-2-1-2-2">
<ul class="org-ul">
<li>\(P_{j \to p(j)}\)  为关节 j 的当前局部姿势<br></li>
</ul>

\begin{align}
& \quad P_{j \toM} = \prod_{i=j}^{0}P_{i \to p(j)}   \nonumber \\
& \quad K_j = (B_{j \to M})^{-1}P_{j \to M}          \nonumber \\
\end{align}
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline10" class="outline-4">
<h4 id="orgheadline10"><span class="section-number-4">3.2.2</span> Animation Blending</h4>
<div class="outline-text-4" id="text-3-2-2">
<p>
动画混合是指令一个以上的动画片段对角色最终姿势起作用的技术。混合是把两个或更多的输入姿势结合，产生骨骼的输出姿势。<br>
</p>

<p>
动画混合可以是同一时间点，两个或两个以上姿势的混合。例如，通过混合负伤和没负伤的步行动画，可以产生不同负伤程度的步行动画。<br>
也可以是不同时间点的两个已知姿势间的混合。例如，动画关键帧之间的采样；又例如不同片段之间的过渡;<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline9"></a>LERP Blending<br></li></ol>
</div>
</div>

<div id="outline-container-orgheadline12" class="outline-3">
<h3 id="orgheadline12"><span class="section-number-3">3.3</span> Collision And Rigid Body Dynamics</h3>
</div>
</div>
<div id="outline-container-orgheadline14" class="outline-2">
<h2 id="orgheadline14"><span class="section-number-2">4</span> 第四部分 Gameplay Systems</h2>
</div>
]]></content>
      
        <categories>
            
            <category> architecture </category>
            
        </categories>
        
        
        <tags>
            
            <tag> game engine </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ArtTools]]></title>
      <url>http://wolfand11.coding.me/2017/08/28/tools/ArtTools/</url>
      <content type="html"><![CDATA[

记录一些美术工具的使用方法。
<a id="more"></a>

<div id="outline-container-orgheadline30" class="outline-2">
<h2 id="orgheadline30"><span class="section-number-2">1</span> 3ds max</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> 基本操作</h3>
<div class="outline-text-3" id="text-1-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">快捷键</th>
<th scope="col" class="org-left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">按下鼠标滚轮拖动</td>
<td class="org-left">拖动视图</td>
</tr>

<tr>
<td class="org-left">Alt+按下鼠标滚轮拖动</td>
<td class="org-left">旋转视图</td>
</tr>

<tr>
<td class="org-left">Alt+w</td>
<td class="org-left">最大化、最小化视图切换</td>
</tr>

<tr>
<td class="org-left">g</td>
<td class="org-left">显示、隐藏场景中网格线</td>
</tr>

<tr>
<td class="org-left">h</td>
<td class="org-left">按名称选择物体</td>
</tr>

<tr>
<td class="org-left">l t f u p</td>
<td class="org-left">左-顶-前-正交-透视视图切换</td>
</tr>

<tr>
<td class="org-left">F3</td>
<td class="org-left">线框模式显示切换</td>
</tr>

<tr>
<td class="org-left">F4</td>
<td class="org-left">EdgedFaces 模式显示切换</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-orgheadline9" class="outline-3">
<h3 id="orgheadline9"><span class="section-number-3">1.2</span> 动画</h3>
<div class="outline-text-3" id="text-1-2">
</div><div id="outline-container-orgheadline2" class="outline-4">
<h4 id="orgheadline2"><span class="section-number-4">1.2.1</span> 基础知识</h4>
<div class="outline-text-4" id="text-1-2-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">关键帧类型</th>
<th scope="col" class="org-left">颜色</th>
<th scope="col" class="org-left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Planted Key (踩踏/固定关键帧)</td>
<td class="org-left">橙色</td>
<td class="org-left">站军姿 等动作，为保持一动不动时使用</td>
</tr>

<tr>
<td class="org-left">Sliding Key(滑动关键点)</td>
<td class="org-left">黄色</td>
<td class="org-left">走路、跑步等运动中任何一直接触地面的部位都用滑动关键帧</td>
</tr>

<tr>
<td class="org-left">Free Key(自由关键帧)</td>
<td class="org-left">黑色</td>
<td class="org-left">运动中不会一直接触地面的部位都用自由关键帧</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-orgheadline8" class="outline-4">
<h4 id="orgheadline8"><span class="section-number-4">1.2.2</span> 骨骼绑定步骤</h4>
<div class="outline-text-4" id="text-1-2-2">
</div><ol class="org-ol"><li><a id="orgheadline3"></a>分析模型<br><div class="outline-text-5" id="text-1-2-2-1">
<p>
性别 女<br>
个性 豪放<br>
职业 坦克(肉盾) 保护队友 控制<br>
形体 人形 两足(无残缺)<br>
</p>
</div></li>
<li><a id="orgheadline6"></a>分析模型需要活动的部位和道具<br><ol class="org-ol"><li><a id="orgheadline4"></a>CS 人形骨骼自带<br><div class="outline-text-6" id="text-1-2-2-2-1">
<p>
手<br>
脚<br>
头<br>
躯干<br>
</p>
</div></li>
<li><a id="orgheadline5"></a>Bones 骨骼<br><div class="outline-text-6" id="text-1-2-2-2-2">
<p>
盾牌<br>
武器<br>
头发<br>
飘带(衣服的裙摆)<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline7"></a>骨骼配置<br><div class="outline-text-5" id="text-1-2-2-3">
<ol class="org-ol">
<li>确定骨骼重心 与模型重心吻合<br></li>
<li>配置腰或者腿骨骼 让骨骼关节和模型关节吻合<br></li>
<li>根据模型布线来确定躯干<br></li>
<li>确定肩 骨骼肩膀末端（靠近胸的一端）的旋转点要在模型锁骨位置，前端与模型大臂相吻合<br></li>
<li>配置手臂，手，手指<br></li>
<li>配置头<br></li>
</ol>
</div></li></ol>
</div>
</div>

<div id="outline-container-orgheadline28" class="outline-3">
<h3 id="orgheadline28"><span class="section-number-3">1.3</span> MaxScript</h3>
<div class="outline-text-3" id="text-1-3">
</div><div id="outline-container-orgheadline15" class="outline-4">
<h4 id="orgheadline15"><span class="section-number-4">1.3.1</span> 基础语法</h4>
<div class="outline-text-4" id="text-1-3-1">
</div><ol class="org-ol"><li><a id="orgheadline10"></a>if<br><div class="outline-text-5" id="text-1-3-1-1">
<div class="org-src-container">

<pre class="src src-maxscript">-- if
if a&lt;b do
(
	-- ...
)

-- if then else
if a&lt;b then
(
	-- ...
)
else
(
	-- ...
)
</pre>
</div>
</div></li>
<li><a id="orgheadline11"></a>for 循环<br><div class="outline-text-5" id="text-1-3-1-2">
<div class="org-src-container">

<pre class="src src-maxscript">方式一
for i= 1 to tagInfoArr.count do
(
    local tagID = GetIDByName tagInfoArr[i].name
    if tagID==-1 do
    (
	tagID = FrameTagManager.CreateNewTag tagInfoArr[i].name 0
    )
    tagInfoArr[i].id = tagID
)
方式二
for i in 1 to tagInfoArr.count by 2 do
(
    local startTime = FrameTagManager.GetTimeByID tagInfoArr[i].id
    local endTime = FrameTagManager.GetTimeByID tagInfoArr[i+1].id
    local dur = endTime - startTime
    format "i=% dur=%\n" i dur
    if dur&gt;0 do
    (
	configStr = "\n"
	continue
    )
)
</pre>
</div>
</div></li>
<li><a id="orgheadline12"></a>string<br><div class="outline-text-5" id="text-1-3-1-3">
<div class="org-src-container">

<pre class="src src-maxscript">-- 字符串转 float
"12.1" as float
-- 字符串替换
substituteString srcStr oldStr newStr 
local csvFileName = substituteString maxFileName ".max" ".csv"
-- 字符串查找
local tmpIdx = findString tagName endTagNameSuffix
return tmpIdx!=undefined
</pre>
</div>
<p>
<a href="http://docs.autodesk.com/3DSMAX/16/ENU/MAXScript-Help/index.html?url=files/GUID-A6A60FC7-6206-4FFC-80E2-0EF8544BE2C4.htm,topicNumber=d30e158996" target="_blank" rel="external">http://docs.autodesk.com/3DSMAX/16/ENU/MAXScript-Help/index.html?url=files/GUID-A6A60FC7-6206-4FFC-80E2-0EF8544BE2C4.htm,topicNumber=d30e158996</a><br>
</p>
</div></li>
<li><a id="orgheadline13"></a>数组<br><div class="outline-text-5" id="text-1-3-1-4">
<div class="org-src-container">

<pre class="src src-maxscript">-- 定义数组
a = #(1,2,3,4)
-- 数组连接
join a #(5,6,7,8)
-- 打印数组元素个数
print a.count
-- 数组排序
fn CompareFunc lhs rhs = 
(
    case of
    (
	(lhs.startTime &lt; rhs.startTime):-1
	(lhs.startTime &gt; rhs.startTime):1
	default:0
    )
)
qsort tagInfoArr CompareFunc
</pre>
</div>
<ul class="org-ul">
<li>参考资料 <a href="http://docs.autodesk.com/3DSMAX/15/ENU/MAXScript-Help/index.html?url=files/GUID-A5B54C67-BFDD-45C0-9D6B-E6869817282A.htm,topicNumber=d30e171865" target="_blank" rel="external">http://docs.autodesk.com/3DSMAX/15/ENU/MAXScript-Help/index.html?url=files/GUID-A5B54C67-BFDD-45C0-9D6B-E6869817282A.htm,topicNumber=d30e171865</a><br></li>
</ul>
</div></li>
<li><a id="orgheadline14"></a>结构体<br><div class="outline-text-5" id="text-1-3-1-5">
<div class="org-src-container">

<pre class="src src-maxscript">-- 定义结构体 person
Struct person (name, height, age, sex)

-- 定义结构体实例
Bill = person name:"Bill" height:72 age:34 sex:#male
Joe = person name:"Joseph" sex:#male

-- 封装方法
struct myGlobals
(
	myVar1 = undefined,
	myVar2 = undefined,
	myVar3 = undefined,
	mytext = undefined,

	fn run filename =
	(
		mytext = "I'm yours, master!"
		filein filename
	)
)
global myInstance = myGlobals()
myInstance.run "slave.ms"
</pre>
</div>
<ul class="org-ul">
<li>参考资料 <a href="http://help.autodesk.com/view/3DSMAX/2016/ENU/?guid=__files_GUID_A35C74C5_1721_4B19_9FC4_E1CD6563505B_htm" target="_blank" rel="external">http://help.autodesk.com/view/3DSMAX/2016/ENU/?guid=__files_GUID_A35C74C5_1721_4B19_9FC4_E1CD6563505B_htm</a><br></li>
</ul>
</div></li></ol>
</div>
<div id="outline-container-orgheadline19" class="outline-4">
<h4 id="orgheadline19"><span class="section-number-4">1.3.2</span> 各种功能</h4>
<div class="outline-text-4" id="text-1-3-2">
</div><ol class="org-ol"><li><a id="orgheadline16"></a>文件操作<br><div class="outline-text-5" id="text-1-3-2-1">
<div class="org-src-container">

<pre class="src src-maxscript">-- 打开 csv 文件
filePath = getOpenFileName types:"Excel(*.csv)|*.csv|"
</pre>
</div>
<p>
<a href="https://knowledge.autodesk.com/search-result/caas/CloudHelp/cloudhelp/2017/ENU/MAXScript-Help/files/GUID-D4B43A33-8342-4BC9-80AB-91460861D37C-htm.html" target="_blank" rel="external">https://knowledge.autodesk.com/search-result/caas/CloudHelp/cloudhelp/2017/ENU/MAXScript-Help/files/GUID-D4B43A33-8342-4BC9-80AB-91460861D37C-htm.html</a><br>
<a href="https://www.vfxarabia.co/read-external-text-file" target="_blank" rel="external">https://www.vfxarabia.co/read-external-text-file</a><br>
</p>
</div></li>
<li><a id="orgheadline17"></a>和 3dsmax 系统界面交互<br><div class="outline-text-5" id="text-1-3-2-2">
<div class="org-src-container">

<pre class="src src-maxscript">-- 显示动画时间配置框
max time config
</pre>
</div>
<p>
<a href="http://docs.autodesk.com/3DSMAX/16/ENU/MAXScript-Help/index.html?url=files/GUID-846B6AB0-EFF6-43E5-8A67-8D348FF78A57.htm,topicNumber=d30e724211" target="_blank" rel="external">http://docs.autodesk.com/3DSMAX/16/ENU/MAXScript-Help/index.html?url=files/GUID-846B6AB0-EFF6-43E5-8A67-8D348FF78A57.htm,topicNumber=d30e724211</a><br>
</p>
</div></li>
<li><a id="orgheadline18"></a>读写配置文件<br><div class="outline-text-5" id="text-1-3-2-3">
<div class="org-src-container">

<pre class="src src-maxscript">fn SetBoolINISetting key value=
(
--              print ("--" + value)
    setINISetting hdxINIFile hdxINISection key value
),

fn GetBoolINISetting key=
(
    local value = getINISetting hdxINIFile hdxINISection key
--              print ("--" + value)
    return value=="true"
),
</pre>
</div>
</div></li></ol>
</div>
<div id="outline-container-orgheadline26" class="outline-4">
<h4 id="orgheadline26"><span class="section-number-4">1.3.3</span> Tips</h4>
<div class="outline-text-4" id="text-1-3-3">
</div><ol class="org-ol"><li><a id="orgheadline20"></a>print 比较诡异<br><div class="outline-text-5" id="text-1-3-3-1">
<div class="org-src-container">

<pre class="src src-maxscript">print "hello -&gt;" + "world"
-- output: 输出两次
-- "hello -&gt;"
-- "hello -&gt;world"

print("hello -&gt;" + "world")
-- output: 输出两次
-- "hello -&gt;world"
-- "hello -&gt;world"
</pre>
</div>
</div></li>
<li><a id="orgheadline21"></a>maxscript 变量不分大小写<br><div class="outline-text-5" id="text-1-3-3-2">
<div class="org-src-container">

<pre class="src src-maxscript">-- 下面会重名
local tmpIdx = 1
local TmpIdx = 2
</pre>
</div>
</div></li>
<li><a id="orgheadline22"></a>删除老的 macroscript<br><div class="outline-text-5" id="text-1-3-3-3">
<p>
删除#userScripts 目录下的脚本即可。<br>
#userScripts 的值为 "C:\Users\&lt;UserName&gt;\AppData\Local\Autodesk\3dsMax\&lt;ReleaseNumber&gt; - 64bit\ENU\scripts"<br>
<a href="https://knowledge.autodesk.com/search-result/caas/CloudHelp/cloudhelp/2015/ENU/MAXScript-Help/files/GUID-F7577416-051E-478C-BB5D-81243BAAC8EC-htm.html" target="_blank" rel="external">https://knowledge.autodesk.com/search-result/caas/CloudHelp/cloudhelp/2015/ENU/MAXScript-Help/files/GUID-F7577416-051E-478C-BB5D-81243BAAC8EC-htm.html</a><br>
</p>
</div></li>
<li><a id="orgheadline23"></a>maxscript &#x2013;Type error: Call needs function or class, got:undefined<br><div class="outline-text-5" id="text-1-3-3-4">
<p>
安装 maxscript 后，重启 3ds max，执行安装的脚本，报错：maxscript &#x2013;Type error: Call needs function or class, got:undefined<br>
解决方案：<br>
将脚本放到 C:\Program Files\Autodesk\3ds Max 2014\stdplugs\stdscripts 目录下安装就可以了<br>
</p>
</div></li>
<li><a id="orgheadline24"></a>&#x2013; No ""eof"" function for undefined &lt;&lt;<br><div class="outline-text-5" id="text-1-3-3-5">
<p>
打开文件时报如上错误。<br>
解决方案：<br>
查看被打开的文件是否被其他程序打开了，将其他程序关闭再执行。<br>
</p>
</div></li>
<li><a id="orgheadline25"></a>Runtime error: Cannot directly set animation context time - use "at time&#x2026;".<br><div class="outline-text-5" id="text-1-3-3-6">
<div class="org-src-container">

<pre class="src src-maxscript">-- 不能直接设置 currentTime
currentTime = 10
-- 需要使用 sliderTime
sliderTime = 10
</pre>
</div>
</div></li></ol>
</div>

<div id="outline-container-orgheadline27" class="outline-4">
<h4 id="orgheadline27"><span class="section-number-4">1.3.4</span> 参考资料</h4>
<div class="outline-text-4" id="text-1-3-4">
<ul class="org-ul">
<li>官方语言参考 <a href="http://help.autodesk.com/view/3DSMAX/2015/ENU/?guid=__files_GUID_6FC81BE7_58FF_4C63_8362_0BDCFA9F904C_htm" target="_blank" rel="external">http://help.autodesk.com/view/3DSMAX/2015/ENU/?guid=__files_GUID_6FC81BE7_58FF_4C63_8362_0BDCFA9F904C_htm</a><br></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgheadline29" class="outline-3">
<h3 id="orgheadline29"><span class="section-number-3">1.4</span> 参考资料</h3>
<div class="outline-text-3" id="text-1-4">
<ul class="org-ul">
<li>3ds max9 自学教程 <a href="https://jingyan.baidu.com/season/45515" target="_blank" rel="external">https://jingyan.baidu.com/season/45515</a><br></li>
<li>3ds max 制作简单动画 <a href="https://jingyan.baidu.com/article/91f5db1bcd438e1c7e05e370.html" target="_blank" rel="external">https://jingyan.baidu.com/article/91f5db1bcd438e1c7e05e370.html</a><br></li>
<li>3ds max 官方参考  <a href="https://www.autodesk.com/cn/3dsmax/2012help/index.html" target="_blank" rel="external">https://www.autodesk.com/cn/3dsmax/2012help/index.html</a><br></li>
<li>3ds max 导出 fbx 到 unity <a href="http://www.cnblogs.com/wantnon/p/4564522.html" target="_blank" rel="external">http://www.cnblogs.com/wantnon/p/4564522.html</a><br></li>
<li>用电脑制作 3D 动画详细过程是怎样的? <a href="https://www.zhihu.com/question/31554729" target="_blank" rel="external">https://www.zhihu.com/question/31554729</a><br></li>
<li>茶壶动画制作 <a href="https://v.qq.com/x/cover/k4cc6kvbc7bi0qj/y1415xd6w3n.html" target="_blank" rel="external">https://v.qq.com/x/cover/k4cc6kvbc7bi0qj/y1415xd6w3n.html</a><br></li>
</ul>
</div>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> art </tag>
            
            <tag> artist </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python Note]]></title>
      <url>http://wolfand11.coding.me/2017/08/17/language/Python/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4"><span class="section-number-2">1</span> Python Language</h2>
<div class="outline-text-2" id="text-1">
<a id="more"></a>
</div>
<div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> 压缩文件夹</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff;">import</span> os
<span style="color: #00ffff;">import</span> zipfile

<span style="color: #00ffff;">def</span> <span style="color: #87cefa;">ZipDir</span>(src_dir_path, out_zipfile_path):
    <span style="color: #00ffff;">if</span> <span style="color: #00ffff;">not</span> os.path.exists(src_dir_path):
        <span style="color: #00ffff;">print</span>(<span style="color: #ffa07a;">"source dir not exist! src_dir_path = "</span> + src_dir_path)
        <span style="color: #00ffff;">return</span>

    <span style="color: #eedd82;">zip_handler</span> = zipfile.ZipFile(out_zipfile_path, <span style="color: #ffa07a;">'w'</span>)
    <span style="color: #eedd82;">source_dir_len</span> = <span style="color: #b0c4de;">len</span>(os.path.dirname(src_dir_path))
    <span style="color: #00ffff;">for</span> parent_dir, dirs, files <span style="color: #00ffff;">in</span> os.walk(ccsproj_res_abs_path):
        <span style="color: #00ffff;">for</span> <span style="color: #b0c4de;">file</span> <span style="color: #00ffff;">in</span> files:
            <span style="color: #eedd82;">file_path</span> = os.path.join(parent_dir, <span style="color: #b0c4de;">file</span>)
            <span style="color: #eedd82;">relative_path</span> = file_path[source_dir_len:].strip(os.path.sep)
            zip_handler.write(file_path, relative_path)
    zip_handler.close()


<span style="color: #eedd82;">g_curPath</span> = os.path.split(os.path.realpath(__file__))[0]
ZipDir(g_curPath+<span style="color: #ffa07a;">"/testx"</span>, g_curPath+<span style="color: #ffa07a;">"/ttt.zip"</span>)
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3"><span class="section-number-3">1.2</span> Ftp 上传文件</h3>
<div class="outline-text-3" id="text-1-2">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">FTPClient</span>(<span style="color: #b0c4de;">object</span>):
    <span style="color: #ffa07a;">'''''</span>
<span style="color: #ffa07a;">    @note: upload local file or dirs recursively to ftp server</span>
<span style="color: #ffa07a;">    '''</span>
    <span style="color: #eedd82;">_DataTypeFILE</span> = <span style="color: #ffa07a;">'FILE'</span>
    <span style="color: #eedd82;">_DataTypeDIR</span>  = <span style="color: #ffa07a;">'DIR'</span>

    <span style="color: #00ffff;">def</span> <span style="color: #87cefa;">__init__</span>(<span style="color: #00ffff;">self</span>):
        <span style="color: #00ffff;">self</span>.ftp = <span style="color: #7fffd4;">None</span>

    <span style="color: #00ffff;">def</span> <span style="color: #87cefa;">__del__</span>(<span style="color: #00ffff;">self</span>):
        <span style="color: #00ffff;">pass</span>

    <span style="color: #00ffff;">def</span> <span style="color: #87cefa;">setFtpParams</span>(<span style="color: #00ffff;">self</span>, ip, uname, pwd, port=21, timeout=60):
        <span style="color: #00ffff;">self</span>.ip = ip
        <span style="color: #00ffff;">self</span>.uname = uname
        <span style="color: #00ffff;">self</span>.pwd = pwd
        <span style="color: #00ffff;">self</span>.port = port
        <span style="color: #00ffff;">self</span>.timeout = timeout

    <span style="color: #00ffff;">def</span> <span style="color: #87cefa;">initEnv</span>(<span style="color: #00ffff;">self</span>):
        <span style="color: #00ffff;">if</span> <span style="color: #00ffff;">self</span>.ftp <span style="color: #00ffff;">is</span> <span style="color: #7fffd4;">None</span>:
            <span style="color: #00ffff;">self</span>.ftp = ftplib.FTP()
            <span style="color: #00ffff;">print</span> <span style="color: #ffa07a;">'### connect ftp server: %s ...'</span> % <span style="color: #00ffff;">self</span>.ip
            <span style="color: #00ffff;">self</span>.ftp.connect(<span style="color: #00ffff;">self</span>.ip, <span style="color: #00ffff;">self</span>.port, <span style="color: #00ffff;">self</span>.timeout)
            <span style="color: #00ffff;">self</span>.ftp.login(<span style="color: #00ffff;">self</span>.uname, <span style="color: #00ffff;">self</span>.pwd)
            <span style="color: #00ffff;">print</span> <span style="color: #00ffff;">self</span>.ftp.getwelcome()

    <span style="color: #00ffff;">def</span> <span style="color: #87cefa;">clearEnv</span>(<span style="color: #00ffff;">self</span>):
        <span style="color: #00ffff;">if</span> <span style="color: #00ffff;">self</span>.ftp:
            <span style="color: #00ffff;">self</span>.ftp.close()
            <span style="color: #00ffff;">print</span> <span style="color: #ffa07a;">'### disconnect ftp server: %s!'</span> % <span style="color: #00ffff;">self</span>.ip
            <span style="color: #00ffff;">self</span>.ftp = <span style="color: #7fffd4;">None</span>

    <span style="color: #00ffff;">def</span> <span style="color: #87cefa;">uploadDir</span>(<span style="color: #00ffff;">self</span>, localdir=<span style="color: #ffa07a;">'./'</span>, remotedir=<span style="color: #ffa07a;">'./'</span>):
        <span style="color: #00ffff;">if</span> <span style="color: #00ffff;">not</span> os.path.isdir(localdir):
            <span style="color: #00ffff;">return</span>
        <span style="color: #00ffff;">self</span>.ftp.cwd(remotedir)
        <span style="color: #00ffff;">for</span> <span style="color: #b0c4de;">file</span> <span style="color: #00ffff;">in</span> os.listdir(localdir):
            <span style="color: #eedd82;">src</span> = os.path.join(localdir, <span style="color: #b0c4de;">file</span>)
            <span style="color: #00ffff;">if</span> os.path.isfile(src):
                <span style="color: #00ffff;">self</span>.uploadFile(src, <span style="color: #b0c4de;">file</span>)
            <span style="color: #00ffff;">elif</span> os.path.isdir(src):
                <span style="color: #00ffff;">try</span>:
                    <span style="color: #00ffff;">self</span>.ftp.mkd(<span style="color: #b0c4de;">file</span>)
                <span style="color: #00ffff;">except</span>:
                    sys.stderr.write(<span style="color: #ffa07a;">'the dir is exists %s'</span> % <span style="color: #b0c4de;">file</span>)
                <span style="color: #00ffff;">self</span>.uploadDir(src, <span style="color: #b0c4de;">file</span>)
        <span style="color: #00ffff;">self</span>.ftp.cwd(<span style="color: #ffa07a;">'..'</span>)

    <span style="color: #00ffff;">def</span> <span style="color: #87cefa;">uploadFile</span>(<span style="color: #00ffff;">self</span>, localpath, remotepath=<span style="color: #ffa07a;">'./'</span>):
        <span style="color: #00ffff;">if</span> <span style="color: #00ffff;">not</span> os.path.isfile(localpath):
            <span style="color: #00ffff;">return</span>
        <span style="color: #00ffff;">print</span> <span style="color: #ffa07a;">'+++ upload %s to %s:%s'</span> % (localpath, <span style="color: #00ffff;">self</span>.ip, remotepath)
        <span style="color: #00ffff;">self</span>.ftp.storbinary(<span style="color: #ffa07a;">'STOR '</span> + remotepath, <span style="color: #b0c4de;">open</span>(localpath, <span style="color: #ffa07a;">'rb'</span>))

    <span style="color: #00ffff;">def</span> <span style="color: #87cefa;">__filetype</span>(<span style="color: #00ffff;">self</span>, src):
        <span style="color: #00ffff;">if</span> os.path.isfile(src):
            <span style="color: #eedd82;">index</span> = src.rfind(<span style="color: #ffa07a;">'\\'</span>)
            <span style="color: #00ffff;">if</span> index == -1:
                <span style="color: #eedd82;">index</span> = src.rfind(<span style="color: #ffa07a;">'/'</span>)
            <span style="color: #00ffff;">return</span> FTPClient._DataTypeFILE, src[index + 1:]
        <span style="color: #00ffff;">elif</span> os.path.isdir(src):
            <span style="color: #00ffff;">return</span> FTPClient._DataTypeDIR, <span style="color: #ffa07a;">''</span>

    <span style="color: #00ffff;">def</span> <span style="color: #87cefa;">upload</span>(<span style="color: #00ffff;">self</span>, src, des=<span style="color: #ffa07a;">'/'</span>):
        <span style="color: #eedd82;">filetype</span>, <span style="color: #eedd82;">filename</span> = <span style="color: #00ffff;">self</span>.__filetype(src)

        <span style="color: #00ffff;">self</span>.initEnv()
        <span style="color: #00ffff;">if</span> filetype == FTPClient._DataTypeDIR:
            <span style="color: #00ffff;">self</span>.srcDir = src
            <span style="color: #00ffff;">self</span>.uploadDir(<span style="color: #00ffff;">self</span>.srcDir, des)
        <span style="color: #00ffff;">elif</span> filetype == FTPClient._DataTypeFILE:
            <span style="color: #00ffff;">self</span>.uploadFile(src, des+filename)
        <span style="color: #00ffff;">self</span>.clearEnv()

<span style="color: #00ffff;">def</span> <span style="color: #87cefa;">UploadFileOrDir</span>():
    <span style="color: #eedd82;">appDirPath</span> = g_projPath+<span style="color: #ffa07a;">"/build/"</span>+g_platformType
    <span style="color: #eedd82;">fileName</span> = g_appName+<span style="color: #ffa07a;">"_"</span>+g_buildNO
    <span style="color: #eedd82;">localFilePath</span> = <span style="color: #ffa07a;">""</span>
    <span style="color: #eedd82;">remoteDirPath</span> = <span style="color: #ffa07a;">"/GameDistribution/HDX_Dev/"</span>+g_platformType+<span style="color: #ffa07a;">"/"</span>
    <span style="color: #00ffff;">if</span> g_platformType == <span style="color: #ffa07a;">"PC"</span>:
        <span style="color: #eedd82;">fileName</span> = fileName + <span style="color: #ffa07a;">".zip"</span>
    <span style="color: #00ffff;">elif</span> g_platformType == <span style="color: #ffa07a;">"IOS"</span>:
        <span style="color: #eedd82;">fileName</span> = fileName + <span style="color: #ffa07a;">".ipa"</span>
    <span style="color: #00ffff;">elif</span> g_platformType == <span style="color: #ffa07a;">"Android"</span>:
        <span style="color: #eedd82;">fileName</span> = fileName + <span style="color: #ffa07a;">".apk"</span>
    <span style="color: #eedd82;">localFilePath</span> = g_projPath+<span style="color: #ffa07a;">"/build/"</span>+fileName
    <span style="color: #eedd82;">ftpClient</span> = FTPClient()
    ftpClient.setFtpParams(<span style="color: #ffa07a;">'dd-pc'</span>, <span style="color: #ffa07a;">'sa'</span>, <span style="color: #ffa07a;">''</span>)
    LogInfo(<span style="color: #ffa07a;">"upload local file = "</span> + localFilePath)
    LogInfo(<span style="color: #ffa07a;">"upload remote dir = "</span> + remoteDirPath)
    ftpClient.upload(os.path.realpath(localFilePath), remoteDirPath)
</pre>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-4">
<h4 id="orgheadline2"><span class="section-number-4">1.2.1</span> 参考链接：</h4>
<div class="outline-text-4" id="text-1-2-1">
<ul class="org-ul">
<li><a href="http://effbot.org/librarybook/ftplib.htm" target="_blank" rel="external">http://effbot.org/librarybook/ftplib.htm</a><br></li>
<li><a href="http://blog.csdn.net/xudacheng06/article/details/13613647" target="_blank" rel="external">http://blog.csdn.net/xudacheng06/article/details/13613647</a><br></li>
</ul>
</div>
</div>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5"><span class="section-number-2">2</span> Error Fixed</h2>
</div>
]]></content>
      
        <categories>
            
            <category> language </category>
            
        </categories>
        
        
        <tags>
            
            <tag> language </tag>
            
            <tag> python </tag>
            
            <tag> script </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GameAI]]></title>
      <url>http://wolfand11.coding.me/2017/05/15/gameplay/GameAI/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline12" class="outline-2">
<h2 id="orgheadline12"><span class="section-number-2">1</span> GameAI</h2>
<div class="outline-text-2" id="text-1">
<a id="more"></a>
<p>
开发游戏 AI 的目标之一就是要找到一个简单，可扩展的编辑逻辑的方案，从而加速游戏开发的迭代速度。在“行为系统图”中，行为系统（Behavior System）响应游戏中的各种信息，进行决策以挑选接下来将要执行的行动并且监控该行动的执行。<br>
<img src="001_ai_architecture.png"><br>
</p>

<p>
知识模型（Knowledge Model）是对游戏世界中各种信息的抽象。<br>
</p>
</div>

<div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> FSM 有限状态机</h3>
</div>
<div id="outline-container-orgheadline10" class="outline-3">
<h3 id="orgheadline10"><span class="section-number-3">1.2</span> Behavior Tree</h3>
<div class="outline-text-3" id="text-1-2">
<p>
行为树，英文是 Behavior Tree，简称 BT，是由行为节点组成的树状结构.<br>
</p>
</div>
<div id="outline-container-orgheadline2" class="outline-4">
<h4 id="orgheadline2"><span class="section-number-4">1.2.1</span> 行为树和 FSM 比较</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
对于 FSM，每个节点表示一个状态，而对于 BT，每个节点表示一个行为。同样是由节点连接而成，BT 有什么优势呢？<br>
在 BT 中，节点是有层次（Hierarchical）的，子节点由其父节点来控制。每个节点的执行都有一个结果（成功 Success，失败 Failure 或运行 Running），该节点的执行结果都由其父节点来管理，从而决定接下来做什么，父节点的类型决定了不同的控制类型。节点不需要维护向其他节点的转换，节点的模块性（Modularity）被大大增强了。实际上，在 BT 里，由于节点不再有转换，它们不再是状态（State），而是行为（Behavior）。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-4">
<h4 id="orgheadline3"><span class="section-number-4">1.2.2</span> 行为节点的执行状态</h4>
<div class="outline-text-4" id="text-1-2-2">
<p>
行为树是有很多种不同类型的行为节点组成的，但是这些不同类型的行为节点的执行状态是相同的，一共有如下的几种状态：<br>
</p>
<ul class="org-ul">
<li>Success 表示该行为节点执行成功<br></li>
<li>Failure 表示该行为节点执行失败<br></li>
<li>Running 表示执行结果还没确定，行为节点依然在运行中<br></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline9" class="outline-4">
<h4 id="orgheadline9"><span class="section-number-4">1.2.3</span> 行为节点</h4>
<div class="outline-text-4" id="text-1-2-3">
</div><ol class="org-ol"><li><a id="orgheadline4"></a>顺序节点(Sequence)<br><div class="outline-text-5" id="text-1-2-3-1">
<p>
属于组合节点，顺序执行子节点，只要碰到一个子节点返回 false，则停止继续执行，并返回 false，否则返回 true，类似于程序中的逻辑与。<br>
</p>
</div></li>
<li><a id="orgheadline5"></a>选择节点(Selector)<br><div class="outline-text-5" id="text-1-2-3-2">
<p>
属于组合节点，顺序执行子节点，只要碰到一个子节点返回 true，则停止继续执行，并返回 true，否则返回 false，类似于程序中的逻辑或。<br>
</p>
</div></li>
<li><a id="orgheadline6"></a>平行节点(Parallel Node)<br><div class="outline-text-5" id="text-1-2-3-3">
<p>
属于组合节点，提供了平行的概念，无论子节点返回值是什么都会遍历所有子节点。所以不需要像 Selector/Sequence 那样预判哪个 Child Node 应摆前，哪个应摆后。Parallel Node 增加方便性的同时，也增加实现和维护复杂度。<br>
</p>
</div></li>
<li><a id="orgheadline7"></a>条件节点(Condition)<br><div class="outline-text-5" id="text-1-2-3-4">
<p>
属于叶子节点，判断条件是否成立。<br>
</p>
</div></li>
<li><a id="orgheadline8"></a>执行节点(Action)<br><div class="outline-text-5" id="text-1-2-3-5">
<p>
属于叶子节点，执行动作，一般返回 true。<br>
</p>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline11" class="outline-3">
<h3 id="orgheadline11"><span class="section-number-3">1.3</span> AI Tools</h3>
<div class="outline-text-3" id="text-1-3">
<p>
APEX UTILITY AI <a href="http://apexgametools.com/products/apex-utility-ai-2/" target="_blank" rel="external">http://apexgametools.com/products/apex-utility-ai-2/</a><br>
behaviac <a href="http://www.behaviac.com/" target="_blank" rel="external">http://www.behaviac.com/</a><br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline13" class="outline-2">
<h2 id="orgheadline13"><span class="section-number-2">2</span> 参考资料</h2>
<div class="outline-text-2" id="text-2">
<ol class="org-ol">
<li>行为树的基本概念及进阶  <a href="http://www.behaviac.com/concepts/" target="_blank" rel="external">http://www.behaviac.com/concepts/</a><br></li>
<li>Behavior trees for AI: How they work  <a href="http://www.gamasutra.com/blogs/ChrisSimpson/20140717/221339/Behavior_trees_for_AI_How_they_work.php" target="_blank" rel="external">http://www.gamasutra.com/blogs/ChrisSimpson/20140717/221339/Behavior_trees_for_AI_How_they_work.php</a><br></li>
<li>虚幻 4 行为树文档 <a href="https://docs.unrealengine.com/latest/CHN/Engine/AI/BehaviorTrees/index.html" target="_blank" rel="external">https://docs.unrealengine.com/latest/CHN/Engine/AI/BehaviorTrees/index.html</a><br></li>
</ol>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> gameplay </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gameplay </tag>
            
            <tag> ai </tag>
            
            <tag> behaviortree </tag>
            
            <tag> htn </tag>
            
            <tag> fsm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOTween]]></title>
      <url>http://wolfand11.coding.me/2017/04/30/unity/DOTween/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline12" class="outline-2">
<h2 id="orgheadline12"><span class="section-number-2">1</span> DOTween</h2>
<div class="outline-text-2" id="text-1">
<p>
记录一下 DOTween 的一些简单用法。<br>
</p>
<a id="more"></a>
</div>

<div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5"><span class="section-number-3">1.1</span> Tweener</h3>
<div class="outline-text-3" id="text-1-1">
</div><div id="outline-container-orgheadline1" class="outline-4">
<h4 id="orgheadline1"><span class="section-number-4">1.1.1</span> 对物体坐标系属性做动作</h4>
<div class="outline-text-4" id="text-1-1-1">
<p>
DOXXXLocal<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-4">
<h4 id="orgheadline2"><span class="section-number-4">1.1.2</span> 在原始属性上叠加变化值</h4>
<div class="outline-text-4" id="text-1-1-2">
<p>
类似于 cocos 中的 By<br>
DOBlendableXXXBy<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-4">
<h4 id="orgheadline3"><span class="section-number-4">1.1.3</span> 等待一定时间</h4>
<div class="outline-text-4" id="text-1-1-3">
<p>
SetDelay(delayTime)<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-4">
<h4 id="orgheadline4"><span class="section-number-4">1.1.4</span> Tweener 的设置</h4>
<div class="outline-text-4" id="text-1-1-4">
<p>
From(bool isRelative=false);<br>
SetDelay(float delay);<br>
SetSpeedBased(bool isSpeedBased=true);<br>
</p>
</div>
</div>
</div>

<div id="outline-container-orgheadline8" class="outline-3">
<h3 id="orgheadline8"><span class="section-number-3">1.2</span> Seqence</h3>
<div class="outline-text-3" id="text-1-2">
</div><div id="outline-container-orgheadline6" class="outline-4">
<h4 id="orgheadline6"><span class="section-number-4">1.2.1</span> 等待一定时间</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
sq.AppendInterval(delayTime)<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline7" class="outline-4">
<h4 id="orgheadline7"><span class="section-number-4">1.2.2</span> 添加回调函数</h4>
<div class="outline-text-4" id="text-1-2-2">
<p>
sq.AppendCallback(cbFunc)<br>
</p>
</div>
</div>
</div>

<div id="outline-container-orgheadline11" class="outline-3">
<h3 id="orgheadline11"><span class="section-number-3">1.3</span> Tweener 和 Seqence 共用的设置</h3>
<div class="outline-text-3" id="text-1-3">
</div><div id="outline-container-orgheadline9" class="outline-4">
<h4 id="orgheadline9"><span class="section-number-4">1.3.1</span> 实例属性</h4>
<div class="outline-text-4" id="text-1-3-1">
<p>
timeScale<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline10" class="outline-4">
<h4 id="orgheadline10"><span class="section-number-4">1.3.2</span> 级联回调</h4>
<div class="outline-text-4" id="text-1-3-2">
<p>
OnComplete<br>
OnKill<br>
OnPlay<br>
OnPause<br>
OnRewind<br>
OnStart<br>
OnStepComplete<br>
OnUpdate<br>
OnWaypointChange<br>
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-orgheadline13" class="outline-2">
<h2 id="orgheadline13"><span class="section-number-2">2</span> 参考资料</h2>
<div class="outline-text-2" id="text-2">
<p>
DOTween 官网文档<br>
<a href="http://dotween.demigiant.com/documentation.php" target="_blank" rel="external">http://dotween.demigiant.com/documentation.php</a><br>
</p>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> unity </category>
            
            <category> dotween </category>
            
            <category> action </category>
            
        </categories>
        
        
        <tags>
            
            <tag> unity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Matlab]]></title>
      <url>http://wolfand11.coding.me/2017/03/19/tools/Matlab/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4"><span class="section-number-2">1</span> Matlab</h2>
<div class="outline-text-2" id="text-1">
<a id="more"></a>
</div>
<div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> 画对数函数</h3>
<div class="outline-text-3" id="text-1-1">
<p>
\(y = log_2x\) <br>
</p>
<div class="org-src-container">

<pre class="src src-ocatave">% 绘制以 2 为底的对数函数
x = 0:100;
y = log2(x)
plot(y)
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2"><span class="section-number-3">1.2</span> 同时画多个函数</h3>
<div class="outline-text-3" id="text-1-2">
<div class="org-src-container">

<pre class="src src-ocatave">% 绘制以 2 为底的对数函数
x = 0:100;
y1 = log2(x);
y2 = x;
plot(x,y1,x,y2);
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3"><span class="section-number-3">1.3</span> 注释</h3>
<div class="outline-text-3" id="text-1-3">
<pre class="example">
% 逐行注释

%%
这里面的内容都被注释
%%

%{这里面的内容都被注释}%
</pre>
</div>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> matlab </tag>
            
            <tag> math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[KSFramework Note]]></title>
      <url>http://wolfand11.coding.me/2017/03/07/architecture/KSFrameworkNote/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline30" class="outline-2">
<h2 id="orgheadline30"><span class="section-number-2">1</span> KSFramework Note</h2>
<div class="outline-text-2" id="text-1">
<a id="more"></a>
</div>
<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3"><span class="section-number-3">1.1</span> 快速入门</h3>
<div class="outline-text-3" id="text-1-1">
<p>
<a href="http://mr-kelly.github.io/KSFramework/quickstart/" target="_blank" rel="external">http://mr-kelly.github.io/KSFramework/quickstart/</a><br>
</p>
</div>
<div id="outline-container-orgheadline1" class="outline-4">
<h4 id="orgheadline1"><span class="section-number-4">1.1.1</span> 入口</h4>
<div class="outline-text-4" id="text-1-1-1">
<p>
Assets/Code/Game.cs 中<br>
OnFinishInitModules 为所有模块初始化完成的事件<br>
OnGameStart() 为所有模块初始化完成后，回调的事件, 可以在该函数中添加 UIModule.Instance.OpenWindow("Billboard");<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-4">
<h4 id="orgheadline2"><span class="section-number-4">1.1.2</span> 运行程序</h4>
<div class="outline-text-4" id="text-1-1-2">
<p>
打开场景 Assets/Game.unity，点击播放按钮<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline17" class="outline-3">
<h3 id="orgheadline17"><span class="section-number-3">1.2</span> 工作流程</h3>
<div class="outline-text-3" id="text-1-2">
</div><div id="outline-container-orgheadline10" class="outline-4">
<h4 id="orgheadline10"><span class="section-number-4">1.2.1</span> 美术</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
美术将资源放置在 BundleEditing 或 BundleResources 目录下。<br>
BundleResources 目录下的资源会被制作为 AssetBundle<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline4"></a>UI 制作流程<br><div class="outline-text-5" id="text-1-2-1-1">
<ul class="org-ul">
<li>新建一个场景，然后，点击 KEngine/UI(UGUI)/CreateUI(UGUI) 会在该场景下创建一个 UI。<br></li>
<li>编辑完 UI 后，将该场景保存到 Assets/BundleEditing/UI 目录下。<br></li>
<li>最后，点击 KEngine/UI(UGUI)/ExportCurrentUI 会将刚创建的 UI 以 prefab 的形式导出到 Assets/BundleResources/UI/目录。<br></li>
</ul>
</div></li>
<li><a id="orgheadline5"></a>场景制作流程<br></li>
<li><a id="orgheadline8"></a>人物模型制作流程<br><ol class="org-ol"><li><a id="orgheadline6"></a>人物模型<br></li>
<li><a id="orgheadline7"></a>人物模型动画<br></li></ol></li>
<li><a id="orgheadline9"></a>粒子特效制作流程<br></li></ol>
</div>
<div id="outline-container-orgheadline11" class="outline-4">
<h4 id="orgheadline11"><span class="section-number-4">1.2.2</span> 策划</h4>
<div class="outline-text-4" id="text-1-2-2">
<ul class="org-ul">
<li>策划 excel 表格放在 Product/SettingSources 目录，新建表格都放置在该目录下。<br></li>
<li>配置完表格后，返回 Unity 编辑器，会自动对表格进行编译，生成数据。<br></li>
<li>如果是新加了表格或对表格字段进行了修改，还需要点击 KEngine/Settings/Force Compile Settings+Code 生成相应 csharp 代码<br></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline12" class="outline-4">
<h4 id="orgheadline12"><span class="section-number-4">1.2.3</span> 程序</h4>
<div class="outline-text-4" id="text-1-2-3">
<p>
程序的 Lua 目录放置在 Product/Lua 目录，新建 lua 文件都放置在该目录下。这些 lua 文件不需要执行导入工作，框架会到正确目录下去寻找。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline16" class="outline-4">
<h4 id="orgheadline16"><span class="section-number-4">1.2.4</span> 打包流程</h4>
<div class="outline-text-4" id="text-1-2-4">
</div><ol class="org-ol"><li><a id="orgheadline13"></a>程序<br><div class="outline-text-5" id="text-1-2-4-1">
<p>
确保 Lua 中用到的 C#类都已经导出。如果没有，执行 SLua/All/Make<br>
</p>
</div></li>
<li><a id="orgheadline14"></a>策划-美术<br><div class="outline-text-5" id="text-1-2-4-2">
<p>
确保 BundleEditing 中的 UI 都已经导出为 Prefab，如果没有，执行 KEngine/UI(UGUI)/ExportCurrentUI<br>
Tips:<br>
目前没有批量导出 UI 界面为 Prefab 的脚本，需要对每个 UI 执行 KEngine/UI(UGUI)/ExportCurrentUI<br>
</p>
</div></li>
<li><a id="orgheadline15"></a>最终打包<br><div class="outline-text-5" id="text-1-2-4-3">
<ul class="org-ul">
<li>点击 KEngine/AssetBundle/Build All 制作 AssetBundle 并导出到 StreamingAssets/Bundles/XXX 目录下。<br></li>
<li>点击 KEngine/AutoBuilder/Android   打包 Android 版本 app。<br>
这一步会自动将 Lua 和 Setting 目录下的内容 copy 到 StreamingAssets 目录下。<br></li>
</ul>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline29" class="outline-3">
<h3 id="orgheadline29"><span class="section-number-3">1.3</span> 源代码笔记</h3>
<div class="outline-text-3" id="text-1-3">
</div><div id="outline-container-orgheadline18" class="outline-4">
<h4 id="orgheadline18"><span class="section-number-4">1.3.1</span> AssetBundle 打包相关</h4>
<div class="outline-text-4" id="text-1-3-1">
<p>
KSFramework\Assets\Plugins\Editor\KEngineEditor\KEngine.Editor\BuildTools.cs 中实现了 AssetBundle 打包相关的逻辑.<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline25" class="outline-4">
<h4 id="orgheadline25"><span class="section-number-4">1.3.2</span> ResourceModule</h4>
<div class="outline-text-4" id="text-1-3-2">
</div><ol class="org-ol"><li><a id="orgheadline19"></a>KAbstractResourceLoader.cs<br><div class="outline-text-5" id="text-1-3-2-1">
<p>
KSFramework\Assets\Plugins\KEngine\KEngine\CoreModules\ResourceModule\KAbstractResourceLoader.cs 中实现了 ResourceLoader 的抽象类。<br>
</p>
</div></li>
<li><a id="orgheadline20"></a>资源加载器<br><div class="outline-text-5" id="text-1-3-2-2">
<p>
资源加载器持有自己加载的资源，通过调用 Release 来释放资源加载器持有的资源。<br>
</p>
</div></li>
<li><a id="orgheadline21"></a>UI 资源加载<br><div class="outline-text-5" id="text-1-3-2-3">
<p>
UIModule 中通过 UIWindows 字典来保存 ui 所对应的资源加载器。<br>
关闭界面时，释放 ui 对应的加载器。<br>
重新加载界面时，强制释放对应的加载器，重新加载 ui。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">ui &#36164;&#28304;&#21152;&#36733;&#22120;&#20026; StaticAssetLoader</span>
  <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">IEnumerator</span> <span style="color: #87cefa;">LoadUIAsset</span>(<span style="color: #98fb98;">UILoadState</span> <span style="color: #eedd82;">loadState</span>, <span style="color: #98fb98;">UILoadRequest</span> <span style="color: #eedd82;">request</span>)
  {
      <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">path</span> = <span style="color: #98fb98;">string</span>.Format(<span style="color: #ffa07a;">"ui/{0}.prefab"</span>, loadState.TemplateName);
      <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">assetLoader</span> = StaticAssetLoader.Load(path);
      loadState.UIResourceLoader = assetLoader; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#22522;&#26412;&#19981;&#29992;&#25163;&#24037;&#37322;&#25918;&#30340;</span>
      <span style="color: #00ffff;">while</span> (!assetLoader.IsCompleted)
          <span style="color: #00ffff;">yield</span> <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">null</span>;

      request.Asset = assetLoader.TheAsset;
  }
</pre>
</div>
</div></li>
<li><a id="orgheadline22"></a>场景资源加载<br></li>
<li><a id="orgheadline23"></a>资源的释放<br></li>
<li><a id="orgheadline24"></a><br></li></ol>
</div>
<div id="outline-container-orgheadline28" class="outline-4">
<h4 id="orgheadline28"><span class="section-number-4">1.3.3</span> Q&amp;A</h4>
<div class="outline-text-4" id="text-1-3-3">
</div><ol class="org-ol"><li><a id="orgheadline26"></a>如何解决 AssetBundle 被重复加载的问题？<br><div class="outline-text-5" id="text-1-3-3-1">
<p>
在 KAbstractResourceLoader 中，有一个 Dictionary _loadersPool，其中保存了所有的 Loader，字典的 Key 为资源路径。调用 AutoNew 方法，为某个资源创建资源加载器时，若在_loadersPool 中已经存在该 loader，则不进行创建，而是使用以前的加载器，并在为之前的加载器增加引用计数。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">private</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">readonly</span> <span style="color: #98fb98;">Dictionary</span>&lt;Type, <span style="color: #98fb98;">Dictionary</span>&lt;<span style="color: #98fb98;">string</span>, AbstractResourceLoader&gt;&gt; <span style="color: #eedd82;">_loadersPool</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Dictionary</span>&lt;Type, <span style="color: #98fb98;">Dictionary</span>&lt;<span style="color: #98fb98;">string</span>, AbstractResourceLoader&gt;&gt;();

<span style="color: #00ffff;">protected</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">T</span> <span style="color: #87cefa;">AutoNew</span>&lt;<span style="color: #98fb98;">T</span>&gt;(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">url</span>, <span style="color: #98fb98;">LoaderDelgate</span> <span style="color: #eedd82;">callback</span> = <span style="color: #7fffd4;">null</span>, <span style="color: #98fb98;">bool</span> <span style="color: #eedd82;">forceCreateNew</span> = <span style="color: #7fffd4;">false</span>,
            <span style="color: #00ffff;">params</span> <span style="color: #98fb98;">object</span>[] <span style="color: #eedd82;">initArgs</span>) <span style="color: #00ffff;">where</span> T : AbstractResourceLoader, <span style="color: #00ffff;">new</span>()
{
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">.......</span>
}
</pre>
</div>
</div></li>
<li><a id="orgheadline27"></a>InstanceAssetLoader.Load  是如何每次调用都返回一个对象 copy 的？<br><div class="outline-text-5" id="text-1-3-3-2">
<p>
InstanceAssetLoader.Load 调用 AutoNew 时，设置 forceCreateNew 为 true，从而每次都会新建一个 loader。<br>
</p>
</div></li></ol>
</div>
</div>
</div>
<div id="outline-container-orgheadline32" class="outline-2">
<h2 id="orgheadline32"><span class="section-number-2">2</span> 缺点</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-orgheadline31" class="outline-3">
<h3 id="orgheadline31"><span class="section-number-3">2.1</span> 关于 KSFramework 的表格配置</h3>
<div class="outline-text-3" id="text-2-1">
<ol class="org-ol">
<li>KSFramework 的表格配置需要 csharp 代码来解析，这样热更新无法修改表格字段，也无法新加表格。<br></li>
<li>重新生成 csharp 代码后，还需要执行 Slua 导出，否则配置无法在 lua 代码中使用。<br></li>
</ol>
</div>
</div>
</div>

<div id="outline-container-orgheadline35" class="outline-2">
<h2 id="orgheadline35"><span class="section-number-2">3</span> 优点</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-orgheadline33" class="outline-3">
<h3 id="orgheadline33"><span class="section-number-3">3.1</span> 表格配置数据、Lua 文件放置在 Assets 目录外</h3>
<div class="outline-text-3" id="text-3-1">
<p>
减少了 Unity 工程需要处理的文件，加快了编辑器运行速度<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline34" class="outline-3">
<h3 id="orgheadline34"><span class="section-number-3">3.2</span> 支持编辑器模式不导出 AssetBundle 运行</h3>
<div class="outline-text-3" id="text-3-2">
<p>
在编辑器模式下，通过下面配置，支持不使用 AssetBundle，让开发流程更流畅：<br>
</p>
<div class="org-src-container">

<pre class="src src-ini">[KEngine]
AssetBundleExt = .k     
;0 表示使用 AssetBundle，1 表示不使用 AssetBundle
;IsEditorLoadAsset = 0
IsEditorLoadAsset = 1
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgheadline37" class="outline-2">
<h2 id="orgheadline37"><span class="section-number-2">4</span> Error</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-orgheadline36" class="outline-4">
<h4 id="orgheadline36"><span class="section-number-4">4.0.1</span> 发布 Android 包时，提示 UnityEngine.Windows 不存在</h4>
<div class="outline-text-4" id="text-4-0-1">
<p>
因为 Windows 这个类属于 windows 平台的，所以 Slua 导出时需要去掉这几个类导出。在 CustomExport.cs 类中，添加不需要导出的脚本名称，如下所示：<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnGetNoUseList</span>(<span style="color: #00ffff;">out</span> <span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">string</span>&gt; <span style="color: #eedd82;">list</span>)  
{
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">......</span>
    <span style="color: #ff0000;">//</span>
    <span style="color: #ffa07a;">"Windows"</span>
}
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgheadline38" class="outline-2">
<h2 id="orgheadline38"><span class="section-number-2">5</span> 参考资料</h2>
<div class="outline-text-2" id="text-5">
<ol class="org-ol">
<li>KSFramework 官方文档 <a href="http://mr-kelly.github.io/KSFramework/" target="_blank" rel="external">http://mr-kelly.github.io/KSFramework/</a><br></li>
<li>KSFramework 源代码 <a href="https://github.com/mr-kelly/KSFramework" target="_blank" rel="external">https://github.com/mr-kelly/KSFramework</a><br></li>
<li>KEngine Readme <a href="https://github.com/mr-kelly/KEngine" target="_blank" rel="external">https://github.com/mr-kelly/KEngine</a><br></li>
<li>KSFramework 作者博客 <a href="http://www.jianshu.com/u/674f1a626944" target="_blank" rel="external">http://www.jianshu.com/u/674f1a626944</a><br></li>
</ol>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> architecture </category>
            
        </categories>
        
        
        <tags>
            
            <tag> unity </tag>
            
            <tag> slua </tag>
            
            <tag> framework </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unity Hot Update]]></title>
      <url>http://wolfand11.coding.me/2017/02/25/unity/UnityHotUpdate/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline16" class="outline-2">
<h2 id="orgheadline16"><span class="section-number-2">1</span> Unity Hot Update</h2>
<div class="outline-text-2" id="text-1">
<a id="more"></a>
</div>
<div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> 需求</h3>
<div class="outline-text-3" id="text-1-1">
<ol class="org-ol">
<li>资源可以热更新。资源更新的粒度规划。<br></li>
<li>代码可以热更新。代码以文件为单位进行更新。<br></li>
<li>支持代码和资源覆盖更新，即多次更新以后本地不会保存多个版本的内容，本地只保存当前版本的内容以及应用商店提交的原始内容。<br></li>
</ol>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2"><span class="section-number-3">1.2</span> 问题</h3>
</div>
<div id="outline-container-orgheadline10" class="outline-3">
<h3 id="orgheadline10"><span class="section-number-3">1.3</span> 方案</h3>
<div class="outline-text-3" id="text-1-3">
</div><div id="outline-container-orgheadline4" class="outline-4">
<h4 id="orgheadline4"><span class="section-number-4">1.3.1</span> 资源更新</h4>
<div class="outline-text-4" id="text-1-3-1">
</div><ol class="org-ol"><li><a id="orgheadline3"></a><span class="todo TODO">TODO</span> 资源更新的粒度规划<br><div class="outline-text-5" id="text-1-3-1-1">
<ul class="org-ul">
<li>图片资源<br></li>
<li>字体资源<br></li>
<li>Prefab 资源<br></li>
<li>模型 动画<br></li>
<li>场景<br></li>
<li>粒子特效<br></li>
</ul>
</div></li></ol>
</div>
<div id="outline-container-orgheadline5" class="outline-4">
<h4 id="orgheadline5"><span class="section-number-4">1.3.2</span> 代码更新</h4>
<div class="outline-text-4" id="text-1-3-2">
<p>
代码的更新粒度以文件为单位<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline9" class="outline-4">
<h4 id="orgheadline9"><span class="section-number-4">1.3.3</span> Common</h4>
<div class="outline-text-4" id="text-1-3-3">
</div><ol class="org-ol"><li><a id="orgheadline6"></a>更新流程触发点主要分两种：<br><div class="outline-text-5" id="text-1-3-3-1">
<p>
两种情况下都需要保证更新协议不变（或者就是变也不影响原来代码的执行），否则用户无法开始更新。<br>
</p>
<ol class="org-ol">
<li>启动 App 先触发更新流程。<br></li>
<li>启动 App 不触发更新流程，先进入登陆界面，随后选择服务器请求进入游戏服的时候触发更新流程。<br>
这种情况下，要保证更新流程之前的协议不变（或者就是变也不影响原来代码的执行），否则用户在更新之前就出错了，无法走到更新流程。<br></li>
</ol>
</div></li>
<li><a id="orgheadline7"></a>更新结束后的重载入<br><div class="outline-text-5" id="text-1-3-3-2">
<ol class="org-ol">
<li>如果能把除更新模块以外的所有脚本和资源都独立出来，放在更新流程之后再加载，那么更新后的重载脚本和资源都是不需要的。<br></li>
<li>如果没有独立出来更新模块的资源，那么在一开始进登陆模块的时候加载到内存的资源就会包含其他模块的资源，随后更新完毕以后，如果不重载所有资源，和更新模块共用的资源就会是之前版本的资源。<br></li>
<li>独立出来更新模块的脚本比较困难，因为更新模块的脚本会用到各种库脚本，而这些库脚本肯定又被游戏的其他模块使用，所以不要独立更新模块的脚本，只要脚本有更新，就重新载入所有脚本。<br></li>
</ol>

<p>
一个优化方案是让游戏支持重载所有脚本和所有资源而不破坏网络连接，重载完毕后，直接进入登陆界面或者游戏服务器。实现这个优化方案的方法是切换到一个空场景中，释放所有载入的资源，关闭脚本虚拟机，然后开始重新载入流程，载入结束后直接进入登陆界面，或者直接请求进入游戏服务器。<br>
</p>
</div></li>
<li><a id="orgheadline8"></a>更新流程<br><div class="outline-text-5" id="text-1-3-3-3">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">-- &#26356;&#26032;</span>
<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">svr_ver</span> = RequestVersion()
<span style="color: #00ffff;">if</span> (svr_ver.ResVer==0)
{
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#26381;&#21153;&#22120;&#27809;&#26377;&#26356;&#26032;&#21253;&#65292;&#19981;&#38656;&#35201;&#26356;&#26032;</span>

    SetUsedResType(APP_RES);
}
<span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span>(svr_ver.ResVer == app_ver.ResVer)
{
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#26381;&#21153;&#22120;&#20351;&#29992;&#20102; app &#21407;&#22987;&#36164;&#28304;&#29256;&#26412;&#65292;&#25152;&#20197;&#19981;&#38656;&#35201;&#26356;&#26032;</span>

    SetUsedResType(APP_RES);
}
<span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span>(svr_ver.ResVer == doc_ver.ResVer)
{
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#26381;&#21153;&#22120;&#20351;&#29992;&#20102; doc &#30446;&#24405;&#19979;&#30340;&#29256;&#26412;&#65292;&#25152;&#20197;&#19981;&#38656;&#35201;&#26356;&#26032;</span>

    SetUsedResType(DOC_RES);
}
<span style="color: #00ffff;">else</span>
{
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#25191;&#34892;&#26356;&#26032;&#36923;&#36753;</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">1 &#33719;&#21462;&#26381;&#21153;&#22120;&#25152;&#26377;&#36164;&#28304;&#30340; S_MD5</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">2 &#33719;&#24471;&#24403;&#21069;&#25152;&#20351;&#29992;&#30340;&#36164;&#28304;&#29256;&#26412; - &#22914;&#26524; doc &#30446;&#24405;&#19979;&#26377;&#35760;&#24405;&#65292;&#21017;&#20248;&#20808;&#20351;&#29992; doc &#30446;&#24405;&#35760;&#24405;&#30340;&#36164;&#28304;&#29256;&#26412; doc_ver.ResVer&#65292;&#21542;&#21017;&#20351;&#29992; app_ver.ResVer</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">3 &#33719;&#21462;&#26412;&#22320;&#25152;&#26377;&#36164;&#28304;&#30340; C_MD5</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">4 &#27604;&#36739; S_MD5 &#21644; C_MD5 &#24471;&#21040;&#38656;&#35201;&#26356;&#26032;&#30340;&#25152;&#26377;&#36164;&#28304;</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">5 &#26356;&#26032;&#36164;&#28304; &#24182;&#23558;&#26356;&#26032;&#35760;&#24405;&#21040; doc &#30446;&#24405;&#19979;&#30340;&#29256;&#26412;&#20449;&#24687;&#25991;&#20214;&#20013; code_ver.lua res_ver.lua (&#22312;&#36825;&#20004;&#20010;&#25991;&#20214;&#20013;&#35760;&#24405;&#19979;&#26356;&#26032;&#30340;&#25991;&#20214;&#30340; MD5 &#20449;&#24687;)</span>

    SetUsedResType(svr_ver.ResVer);
}


<span style="color: #ff0000;">// </span><span style="color: #ff0000;">-- &#36164;&#28304;&#36733;&#20837;</span>
<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">curUsedResType</span> = GetUsedResType();
<span style="color: #00ffff;">if</span> (curUsedResType == DOC_RES)
{
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#23558; res_ver.lua &#20013;&#35760;&#24405;&#30340;&#25152;&#26377;&#26465;&#30446;&#21152;&#21040;&#25628;&#32034;&#36335;&#24452;&#20013;&#65292;&#25628;&#32034;&#26102;&#20248;&#20808;&#25628;&#32034;</span>
}
</pre>
</div>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline15" class="outline-3">
<h3 id="orgheadline15"><span class="section-number-3">1.4</span> <span class="todo TODO">TODO</span> Q&amp;A</h3>
<div class="outline-text-3" id="text-1-4">
</div><div id="outline-container-orgheadline11" class="outline-4">
<h4 id="orgheadline11"><span class="section-number-4">1.4.1</span> Unity 中是否可以直接使用 Streaming Assets 下的资源？</h4>
<div class="outline-text-4" id="text-1-4-1">
<p>
将一个 Prefab 文件直接放在 StreamingAssets 文件夹下，无法直接使用。必须将该 Prefab 加到一个 AssetBundle 里面<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline12" class="outline-4">
<h4 id="orgheadline12"><span class="section-number-4">1.4.2</span> unity 中是否可以直接加载原始资源？例如，是否可以直接从目录里面读取 prefab 进行实例化？</h4>
</div>
<div id="outline-container-orgheadline13" class="outline-4">
<h4 id="orgheadline13"><span class="section-number-4">1.4.3</span> 如何实现只更新一个 UI Prefab 中 UI 元素的位置，以及 Label 的内容？</h4>
</div>
<div id="outline-container-orgheadline14" class="outline-4">
<h4 id="orgheadline14"><span class="section-number-4">1.4.4</span> 资源的更新粒度也可以以文件为单位吗？这样做的好处和坏处各是什么？</h4>
</div>
</div>
</div>

<div id="outline-container-orgheadline22" class="outline-2">
<h2 id="orgheadline22"><span class="section-number-2">2</span> <span class="todo TODO">TODO</span> 实现步骤</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-orgheadline17" class="outline-3">
<h3 id="orgheadline17"><span class="section-number-3">2.1</span> 打包资源</h3>
<div class="outline-text-3" id="text-2-1">
<ol class="org-ol">
<li>打包 图片-音频-文本-字体（各种配置、shader、lua 代码）等基础资源 ，这类资源不会引用其他资源<br></li>
<li>打包材质资源，材质会引用到图片和 shader<br></li>
<li>打包 prefab，prefab 会引用到基础资源和材质资源<br>
prefab 之间的依赖关系是否需要处理？<br></li>
<li>打包场景资源，场景会引用到上面所有资源<br></li>
</ol>
</div>
</div>
<div id="outline-container-orgheadline18" class="outline-3">
<h3 id="orgheadline18"><span class="section-number-3">2.2</span> 编译版本</h3>
<div class="outline-text-3" id="text-2-2">
<p>
编译各个平台的版本。ios android pc<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline19" class="outline-3">
<h3 id="orgheadline19"><span class="section-number-3">2.3</span> 进入游戏从服务器下载指定文件</h3>
</div>
<div id="outline-container-orgheadline20" class="outline-3">
<h3 id="orgheadline20"><span class="section-number-3">2.4</span> 在游戏中使用下载下来的文件</h3>
</div>
<div id="outline-container-orgheadline21" class="outline-3">
<h3 id="orgheadline21"><span class="section-number-3">2.5</span> 添加版本信息，结合前面步骤实现下载需要更新的文件</h3>
</div>
</div>
<div id="outline-container-orgheadline23" class="outline-2">
<h2 id="orgheadline23"><span class="section-number-2">3</span> 参考资料</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>Unity 官网提供的文档 <a href="https://unity3d.com/cn/learn/tutorials/topics/best-practices/guide-assetbundles-and-resources" target="_blank" rel="external">https://unity3d.com/cn/learn/tutorials/topics/best-practices/guide-assetbundles-and-resources</a><br></li>
</ol>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> unity </category>
            
        </categories>
        
        
        <tags>
            
            <tag> unity </tag>
            
            <tag> hot-update </tag>
            
            <tag> resource </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Action Script Developer Guide To PureMVC]]></title>
      <url>http://wolfand11.coding.me/2017/02/12/architecture/ActionScriptDeveloperGuideToPureMVC/</url>
      <content type="html"><![CDATA[

<p>
《Action Script Developer Guide To PureMVC》的读书笔记.<br>
很早之前的一篇读书笔记，大部分是将原书内容翻译了一下。<br>
</p>
<a id="more"></a>
<div id="outline-container-orgheadline112" class="outline-2">
<h2 id="orgheadline112"><span class="section-number-2">1</span> Action Script Developer Guide To PureMVC</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> 简介</h3>
</div>
<div id="outline-container-orgheadline27" class="outline-3">
<h3 id="orgheadline27"><span class="section-number-3">1.2</span> 使用 PureMVC 创建一个程序</h3>
<div class="outline-text-3" id="text-1-2">
</div><div id="outline-container-orgheadline2" class="outline-4">
<h4 id="orgheadline2"><span class="section-number-4">1.2.1</span> 选择平台</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
不同的平台意味着，创建 View 的方法以及将 View 和 PureMVC 连接的方法会稍有不同。同样数据在 View 组件中的传递，保存和获取也有不同。不同的面向对象平台，语法也会不同。但是，创建 PureMVC 应用程序使用的方式方法应该大致相同。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline7" class="outline-4">
<h4 id="orgheadline7"><span class="section-number-4">1.2.2</span> 写小说和编程</h4>
<div class="outline-text-4" id="text-1-2-2">
</div><ol class="org-ol"><li><a id="orgheadline3"></a>写小说和编程的共同点<br><div class="outline-text-5" id="text-1-2-2-1">
<p>
两者都需要规划和构造。为人物创建清晰的角色，责任，协作是这两者成功的关键。<br>
</p>
</div></li>

<li><a id="orgheadline6"></a>CRC 卡片法<br><div class="outline-text-5" id="text-1-2-2-2">
<p>
CRC 是 Classes, Responsibilities, Collaborations 的缩写。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline4"></a>开发程序<br><div class="outline-text-6" id="text-1-2-2-2-1">
<p>
分析和规划面向对象系统中人物的简单方法是创建 CRC 卡片。<br>
在卡片的最上面，写类或接口的名字<br>
在接下来的多行中，写人物的职责<br>
在最后面，写人物的协作者列表（例如：当前人物知道的所有人物，以及知道当前人物的所有人物）<br>
</p>
</div></li>
<li><a id="orgheadline5"></a>写小说<br><div class="outline-text-6" id="text-1-2-2-2-2">
<p>
所有的人物都有一张卡片，用来描述:他们故事的目标，达成目标的过程中会发生的事情，他们的个性是什么，他们的外形是怎样的。<br>
故事发生的地方被称作故事的环境。在为相关的场景打草稿前，描述了组成环境的每个设定的卡片可以用来创建假想的丰富的地方。<br>
人物的视角，他们的场景目标，他们的对手（一个角色，自然力量等等），落到他们身上的阻碍等所有事物都可以被快速地记录在一张卡片上。<br>
卡片方式的好处是写卡片和丢下卡片一样简单，它使得你的思维保持流畅，你不会觉得那样消耗很大。<br>
</p>
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline13" class="outline-4">
<h4 id="orgheadline13"><span class="section-number-4">1.2.3</span> StoryArchitect 一个写小说的工具</h4>
<div class="outline-text-4" id="text-1-2-3">
<p>
该节描述了开始写一个软件时，明确需求的过程。<br>
</p>
<ul class="org-ul">
<li>我们在编码层面做的选择会受我们所知道的和不知道的领域知识的影响。<br></li>
<li>开发者应该知道，在一个新的软件项目中，有两个最重要的输入：<br>
<ol class="org-ol">
<li>用户试图做什么？<br></li>
<li>用户现在是怎样做的？<br></li>
</ol></li>
<li>需求文档中的特性列表通常无法告诉你很多当前流程中的痛点。以用户的角度理解他们的领域数据和当前的流程，会让你的工作更有意义。<br></li>
</ul>
</div>
<ol class="org-ol"><li><a id="orgheadline8"></a>目的陈述(Statement of Purpose)<br><div class="outline-text-5" id="text-1-2-3-1">
<p>
为了保证所有项目成员，包括用户，对软件的目标有一致的认识。我们需要有意义的、总结性的一句话来描述软件的目标。<br>
例如：StoryArchitect 将允许小说作者做什么？ 这个问题的答案可以作为目标陈述。<br>
StoryArchitect 是一个小说作者的工具，用于整合小说的策划、研究、构想、起草。<br>
</p>
</div></li>
<li><a id="orgheadline9"></a>确定范围（Determining Scope）<br><div class="outline-text-5" id="text-1-2-3-2">
<p>
维护范围的一个重要的原则是，对当前版本的必要特性做计划表，按照计划表进行开发。收集高级特性到一个列表，如果在下一个版本中他们比较重要，则在下一版本中将其列入开发计划。<br>
</p>
</div></li>
<li><a id="orgheadline10"></a>描述领域（Describing the Domain）<br><div class="outline-text-5" id="text-1-2-3-3">
<p>
当开始规划一个项目时，你需要对领域进行更多的研究。<br>
下面列出 小说 的领域描述：<br>
</p>
<ul class="org-ul">
<li>故事是由场景组成的。<br>
Story is made of Scenes.<br>
场景可以看作故事的原子<br></li>
<li>场景可以包含多个草稿，其中的一个草稿被当做当前草稿。<br>
a Scene may have multiple Drafts.<br></li>
<li>场景可以被组织为章节<br>
As Stories grow larger, their Scenes are grouped into Chapters.<br></li>
<li>章节可以被组织为部分<br>
A more complex fiction Story will have its Chapters further grouped into Parts.<br></li>
<li>非小说类的书将章节组织为 Sections<br></li>
<li>电视连续剧包含很多集，它们通常被组织为季（Seasons）<br></li>
<li>无论是故事还是电视连续剧都有对应的人物演员表 （Cast），以及由各种设定组成的环境。<br></li>
</ul>
</div></li>
<li><a id="orgheadline11"></a>构想用户接口（Imagining the User Interface）<br><div class="outline-text-5" id="text-1-2-3-4">
<ul class="org-ul">
<li>应该包含一个简单的输入界面，不需要包含高级的文字装饰和格式，但是需要可以控制字体的大小和间距。<br></li>
<li>可以创建和扩展小说的任何层次的对象。<br></li>
<li>支持非线性的方式来打草稿<br></li>
<li>需要一个按某种方式排序的时间线，从而可以进入故事的任何一点，而且不需要时，可以隐藏该时间线。<br></li>
<li>当创建一个故事或打开一个故事时，应该定位到文字的结尾，方便立刻添加新的内容。<br></li>
<li>可以方便地查看和修改当前选中对象（Story,Part,Chapter 等等）的名字、说明、笔记<br></li>
<li>可以方便地删除对象，可以方便地更改对象的顺序。<br></li>
</ul>

<p>
因为该程序后续还会移植到移动设备上，所以不要使用移动设备上不好操作的 UI 控件。<br>
</p>
</div></li>
<li><a id="orgheadline12"></a>存储策略（Persistence Strategy）<br><div class="outline-text-5" id="text-1-2-3-5">
<p>
最简单的方法是将数据存储在本地，但是，考虑到将来需要在不同客户端编辑内容，还需要将本地内容同步到服务器端。<br>
</p>

<p>
采用的数据存储结构可以分为两种。一种是表结构，可以用 SQLite 来存储这种数据，用 SQL 来查询修改数据。另一种是树结构，可以用 XML 文件来存储这种结构。考虑到当前项目领域中的大部分对象（Series,Season,Story,Part,Chapter,Scene,Draft）都为树形结构，我们采用 XML 来作为数据存储结构。<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline20" class="outline-4">
<h4 id="orgheadline20"><span class="section-number-4">1.2.4</span> 搭建启动框架 （Erecting the Startup Scaffolding）</h4>
<div class="outline-text-4" id="text-1-2-4">
<p>
熟悉 PureMVC 结构和标准的启动流程后，搭建启动框架会变得很容易。<br>
<img src="PureMVC-package-structure.png"><br>
<img src="PureMVC-startup.png"><br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline15"></a>Create an Application Constants Class<br><div class="outline-text-5" id="text-1-2-4-1">
<p>
AppConstants 类用来存放消息名称常量。这些消息可以被 View 和 Controller 发送或接收。<br>
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">Class</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">AppConstants.as</span>

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Code</span>
<span style="color: #00ffff;">package</span> com.futurescale.sa.controller.<span style="color: #7fffd4;">constant</span>
{
    <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">    * Notification Constants for the 'App' (View and Controller tiers)</span>
<span style="color: #ffa07a;">    */</span>
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">AppConstants</span>
    {
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">STARTUP</span>:String = <span style="color: #ffa07a;">"Startup"</span>
    }
}
</pre>
</div>
</div>
<ol class="org-ol"><li><a id="orgheadline14"></a>TIPS<br><div class="outline-text-6" id="text-1-2-4-1-1">
<p>
View 和 Controller 层通常一起被称作应用程序，Model 层应该很容易地抽取出来作为一个独立的库，然后在另一个 App 中复用。<br>
Model 层不应该依赖应用程序，但是应用程序是依赖 Model 层的。应用程序的唯一目的就是将领域模型的细节展示给用户，并且允许用户和模型层交互。所以，View 和 Controller 层是知道 Model 层的角色的。为了保持模型层的独立，应该将模型层发送的消息定义在 Proxys 中，或者一个单独的 ModelConstants 类中。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline17"></a>Create a Startup Command<br><div class="outline-text-5" id="text-1-2-4-2">
<p>
当初始的界面层级被创建时，首要的业务逻辑是，创建你定义的各部分 PureMVC 元素，并且将他们和应用程序连接。<br>
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">Class</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">StartupCommand.as</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Code</span>
com.futurescale.sa.controller.command
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">interfaces</span>.<span style="color: #98fb98;">INotification</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">patterns</span>.<span style="color: #7fffd4;">command</span>.<span style="color: #98fb98;">SimpleCommand</span>;

    <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">    * Startup the PureMVC apparatus, preparing the app for use.</span>
<span style="color: #ffa07a;">    */</span>
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">StartupCommand</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">SimpleCommand</span>
    {
        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">execute</span>( note:INotification ):<span style="color: #98fb98;">void</span>
        {
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Get the application instance from the note</span>
        <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">app</span>:StoryArchitect = StoryArchitect( note.getBody() );

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">That is it for the scaffolding phase.</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">The following will be added incrementally later...</span>

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Register the Proxys</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">.</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">.</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">.</span>

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Register the Mediators</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">.</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">.</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">.</span>
        }
    }
 }
</pre>
</div>
</div>
<ol class="org-ol"><li><a id="orgheadline16"></a>TIPS<br><div class="outline-text-6" id="text-1-2-4-2-1">
<p>
需要先注册 Proxys，后注册 Mediators，因为，在 Mediators 中可能会引用 Proxys。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline18"></a>Create the Application Facade<br><div class="outline-text-5" id="text-1-2-4-3">
<div class="org-src-container">

<pre class="src src-java">Class
ApplicationFacade.as
<span style="color: #98fb98;">Code</span>
<span style="color: #00ffff;">package</span> com.futurescale.<span style="color: #7fffd4;">sa</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">controller</span>.<span style="color: #7fffd4;">command</span>.<span style="color: #98fb98;">StartupCommand</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">controller</span>.<span style="color: #7fffd4;">constant</span>.<span style="color: #98fb98;">AppConstants</span>;

    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">patterns</span>.<span style="color: #7fffd4;">facade</span>.<span style="color: #98fb98;">Facade</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ApplicationFacade</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">Facade</span>
    {
        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * The Singleton instance factory method.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">getInstance</span>( ) : ApplicationFacade
        {
            <span style="color: #00ffff;">if</span> ( instance == <span style="color: #7fffd4;">null</span> ) instance = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ApplicationFacade</span>( );
            <span style="color: #00ffff;">return</span> instance as ApplicationFacade;
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Initialize the Controller and Register the Commands.</span>
<span style="color: #ffa07a;">        */</span>
        override <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">initializeController</span>():<span style="color: #98fb98;">void</span>
        {
            <span style="color: #00ffff;">super</span>.initializeController();
            registerCommand( <span style="color: #7fffd4;">AppConstants</span>.STARTUP, StartupCommand );
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Register the rest of the Commands incrementally later...</span>
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">.</span>
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">.</span>
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">.</span>
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * A convenience method for starting up the PureMVC</span>
<span style="color: #ffa07a;">        * apparatus from the application.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">startup</span>( app:MyApp ):<span style="color: #98fb98;">void</span>
        {
            sendNotification( <span style="color: #7fffd4;">AppConstants</span>.STARTUP, app );
        }
    }
}
</pre>
</div>
</div></li>
<li><a id="orgheadline19"></a>Initialize the Application Facade and call startup()<br><div class="outline-text-5" id="text-1-2-4-4">
<div class="org-src-container">

<pre class="src src-java"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">Class</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">StoryArchitect.mxml</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Code</span>
&lt;?xml version=<span style="color: #ffa07a;">"1.0"</span> encoding=<span style="color: #ffa07a;">"utf-8"</span>?&gt;
&lt;s:WindowedApplication
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#22312;&#24212;&#29992;&#31243;&#24207;&#21551;&#21160;&#23436;&#25104;&#21518;&#65292;&#35843;&#29992; facade.startup(app)</span>
    applicationComplete=<span style="color: #ffa07a;">"facade.startup(this)"</span>
    xmlns:fx=<span style="color: #ffa07a;">"http://ns.adobe.com/mxml/2009"</span>
    xmlns:s=<span style="color: #ffa07a;">"library://ns.adobe.com/flex/spark"</span>
    xmlns:mx=<span style="color: #ffa07a;">"library://ns.adobe.com/flex/mx"</span>&gt;

    &lt;fx:Script&gt;
    &lt;![CDATA[
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #98fb98;">ApplicationFacade</span>;

    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#22312;&#21019;&#24314; MXML &#24212;&#29992;&#31243;&#24207;&#36807;&#31243;&#20013;&#65292;&#21021;&#22987;&#21270; ApplicationFacade</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Initialize the ApplicationFacade during MXML application construction</span>
    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">facade</span>:ApplicationFacade = ApplicationFacade.getInstance();
    ]]&gt;
    &lt;/fx:Script&gt;

&lt;/s:WindowedApplication&gt;
</pre>
</div>
</div></li></ol>
</div>
<div id="outline-container-orgheadline26" class="outline-4">
<h4 id="orgheadline26"><span class="section-number-4">1.2.5</span> 按照从外到内的顺序进行创建</h4>
<div class="outline-text-4" id="text-1-2-5">
<p>
<a id="orgtarget1"></a><br>
</p>
<ul class="org-ul">
<li>先创建 Value Objects 和 View Components，他们属于应用程序的最外层。<br>
好处之一是，不了解应用程序所用框架的人也可以做创建 Value Objects 和 View Components 的工作。<br>
也保证了 Value Objects、View Components 独立于框架，使得他们具有复用性。<br></li>
<li><p>
接下来创建 PureMVC 的各部分元素<br>
</p>
<ul class="org-ul">
<li>首先，创建 Proxys，用它作为应用程序的数据源<br></li>
<li>其次，创建 Mediators，它可以为 View Components 提供数据<br></li>
<li>最后，创建 Commands<br></li>
<li>TIPS:<br></li>
</ul>
<p>
<a href="#orgtarget2">1.8.1</a><br>
</p></li>
</ul>
</div>
<ol class="org-ol"><li><a id="orgheadline21"></a>Step 1: Value Objects<br><div class="outline-text-5" id="text-1-2-5-1">
<p>
创建好启动框架后，首先要做的事情是创建 ValueObjects。思考领域模型并为你想到的每个实体创建 ValueObjects。定义一些枚举或常量来表示合法的属性值。<br>
</p>
<ul class="org-ul">
<li>TIPS:<br></li>
</ul>
<p>
通常在 ValueObjects 类名称后面添加"VO"后缀，来明确类的角色，也可以避免和 View Components 类重名。<br>
</p>
</div></li>
<li><a id="orgheadline22"></a>Step 2: View Components<br><div class="outline-text-5" id="text-1-2-5-2">
<p>
依据领域模型设计和构建适合使用需求的 View Components。这个过程中，就会了解 View Components 需要什么，这些需求从父级 View Components 获得，还是从 Mediator 获得。将公共的属性暴露给父级 View Components 或 Mediator，将 View Components 自己的职责封装起来。<br>
在这个阶段，你可以用前面定义的 ValueObjects 的虚拟数据来填充 View Components，进行测试，这样会提前发现某些 Value Objects 可能需要调整。<br>
</p>
<ul class="org-ul">
<li><p>
TIPS:<br>
</p>
<ul class="org-ul">
<li>View Components 不能依赖任何框架的角色。<br></li>
<li>注意将大的 View Components 划分为小的 View Components，让 View Components 保持简单，从而使其实现更容易理解和修改。<br></li>
<li>View Components 的命名应该按照他们的功能来命名，而不是他们的实现。因为，View Components 的实现可能会被修改。<br></li>
</ul>
<p>
例如： 卡牌集合 一开始使用 ListView 来实现，后来改为用 TableView 来实现，所以 CardSet 比 CardsList 或 CardsTable 更好。<br>
</p></li>
</ul>
</div></li>
<li><a id="orgheadline23"></a>Step 3: Proxys<br><div class="outline-text-5" id="text-1-2-5-3">
<p>
Proxys 决定了 Value Objects 的存储和访问。<br>
Proxys 有很多用处，可以使用它来访问 FlashVars 和 URL 的参数，本地共享对象，加密后的本地存储，文件系统，web 服务器，实时消息协议通道，甚至是当前应用程序状态的临时数据（尽管这些数据不会被当作领域模型的一部分）<br>
Proxy 类通常暴露一个 ValueObject 或一个集合该集合中存储一系列同一类型的 ValueObject。<br>
一个 Proxy 可以和另一个 Proxy 协作来维护相关数据的完整性，尽管这些数据被分开管理。这降低了每个 Proxy 的复杂度。<br>
</p>
<ul class="org-ul">
<li>TIPS:<br>
通常 Proxy 的命名使用“Proxy”做后缀，Proxy 的名字和它所提供的数据相同。<br>
例如：HeroProxy 提供了 HeroVO 数据。<br></li>
</ul>
</div></li>
<li><a id="orgheadline24"></a>Step 4: Mediators<br><div class="outline-text-5" id="text-1-2-5-4">
<p>
并不是所有的 View Component 都需要 Mediator。在视图树中的某些地方，数据或新的 View Component 需要注入和取出，这就是需要调解的地方。<br>
可以为根 View Component 创建 Mediator，而子 View Component 由根 View Component 来处理。<br>
Mediator 的通讯是双向的，它不仅关心它所管理的 View Component 发出的消息，而且也关心系统其他部分发送的和它的 View Component 相关的消息。<br>
</p>
<ul class="org-ul">
<li>TIPS:<br></li>
</ul>
<p>
通常 Mediator 的命名使用"Mediator"后缀。<br>
例如：CardSetMediator<br>
</p>
</div></li>
<li><a id="orgheadline25"></a>Step 5: Commands<br><div class="outline-text-5" id="text-1-2-5-5">
<p>
除了 StartupCommand 以外，当你创建某些 Commands 时，PureMVC 的其他大部分角色已经完善了。<br>
</p>
<ul class="org-ul">
<li>TIPS:<br></li>
</ul>
<p>
通常 Command 的命名使用“Command”后缀，名称按照它实现的操作来命名。例如：DeleteCardCommand<br>
</p>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline48" class="outline-3">
<h3 id="orgheadline48"><span class="section-number-3">1.3</span> 为领域建模</h3>
<div class="outline-text-3" id="text-1-3">
</div><div id="outline-container-orgheadline43" class="outline-4">
<h4 id="orgheadline43"><span class="section-number-4">1.3.1</span> Designing the Schema</h4>
<div class="outline-text-4" id="text-1-3-1">
<p>
通盘考虑 StoryArchitect 应用程序领域模型的各个对象后，我们计划使用 XML 文件来保持数据。一开始会将文件保存在本地，再以后版本中，会将文件同步到服务器。随后，我们需要将 XML 的操作封装到 Value Objects 内部。所以，我们的逻辑起点是设计 XML 的模式（schema）.<br>
如果我们将数据保存到数据库，我们首先应该设计数据库的模式，设计表格和索引。<br>
</p>
<ul class="org-ul">
<li>TIPS:<br></li>
</ul>
<p>
使用 Value Objects 来封装 XML 对象的模式有以下几个优点：<br>
</p>
<ol class="org-ol">
<li>降低 Proxy 的压力，避免 Proxy 需要知道 VOs 的所有一切。（XML 相关的操作就不需要在 Proxy 中实现了）<br></li>
<li>不需要创建操作 XML 的 utility/helper classes(这些类角色松散，增加了依赖和复杂度)<br></li>
<li>可以让你快速处理已经存在或者是新设计的服务器 API 返回的结果。<br></li>
</ol>
</div>
<ol class="org-ol"><li><a id="orgheadline28"></a>复审领域模型实体对象 Reviewing the Domain Model Entities<br><div class="outline-text-5" id="text-1-3-1-1">
<p>
下面是 StoryArchitect 领域模型中的实体对象：<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Entities</th>
<th scope="col" class="org-left">名称</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Note</td>
<td class="org-left">备注/笔记</td>
<td class="org-left">一个 URL 或/和 关于任何实体的任意形式的文本</td>
</tr>

<tr>
<td class="org-left">Setting</td>
<td class="org-left">设定</td>
<td class="org-left">故事发生的地方</td>
</tr>

<tr>
<td class="org-left">Milieu</td>
<td class="org-left">环境</td>
<td class="org-left">和一个故事或连续剧相关的一系列设定（Setting）</td>
</tr>

<tr>
<td class="org-left">Character</td>
<td class="org-left">角色</td>
<td class="org-left">故事或连续剧中的一个个体</td>
</tr>

<tr>
<td class="org-left">Cast</td>
<td class="org-left">演员表</td>
<td class="org-left">和一个故事或连续剧相关的一系列角色（Character）</td>
</tr>

<tr>
<td class="org-left">Draft</td>
<td class="org-left">草稿</td>
<td class="org-left">场景原始文字的一个版本</td>
</tr>

<tr>
<td class="org-left">Scene</td>
<td class="org-left">场景</td>
<td class="org-left">故事的原子元素，可以包含多个草稿</td>
</tr>

<tr>
<td class="org-left">Chapter</td>
<td class="org-left">章节</td>
<td class="org-left">故事或部分中的一组场景，即一组场景可以被划分为一章</td>
</tr>

<tr>
<td class="org-left">Part</td>
<td class="org-left">部分</td>
<td class="org-left">故事中的一组章节，即一组章节可以被划分为一部分</td>
</tr>

<tr>
<td class="org-left">Story</td>
<td class="org-left">故事</td>
<td class="org-left">多个场景的集合，即一组场景可以组成一个故事,也可以被组织到章节或部分中</td>
</tr>

<tr>
<td class="org-left">Season</td>
<td class="org-left">季</td>
<td class="org-left">连续剧中的多个故事一起被划分为一季，即多集电视连续剧可以组成一季</td>
</tr>

<tr>
<td class="org-left">Series</td>
<td class="org-left">连续剧</td>
<td class="org-left">一组故事，它们使用相同的演员表和环境，被称为连续剧</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline42"></a>Creating the Schema<br><ol class="org-ol"><li><a id="orgheadline29"></a>ValueObject<br><div class="outline-text-6" id="text-1-3-1-2-1">
<p>
ValueObject 是永远不会被创建的元素，但是其他元素会继承它的属性和子元素。<br>
<img src="VO_xml_schema.jpg"><br>
</p>
</div></li>
<li><a id="orgheadline30"></a>Note<br><div class="outline-text-6" id="text-1-3-1-2-2">
<p>
Note 不从 VO 扩展，因为它被包含在 VO 内，而且不需要任何 VO 的属性。<br>
<img src="Note_xml_schema.jpg"><br>
</p>
</div></li>
<li><a id="orgheadline31"></a>Setting<br><div class="outline-text-6" id="text-1-3-1-2-3">
<p>
Setting 从 VO 继承了所有它需要的属性.<br>
<img src="Setting_xml_schema.jpg"><br>
</p>
</div></li>
<li><a id="orgheadline32"></a>Milieu<br><div class="outline-text-6" id="text-1-3-1-2-4">

<div class="figure">
<p><img src="Milieu_xml_schema.jpg"><br>
</p>
</div>
</div></li>
<li><a id="orgheadline33"></a>Character<br><div class="outline-text-6" id="text-1-3-1-2-5">

<div class="figure">
<p><img src="Character_xml_schema.jpg"><br>
</p>
</div>
</div></li>
<li><a id="orgheadline34"></a>Cast<br><div class="outline-text-6" id="text-1-3-1-2-6">

<div class="figure">
<p><img src="Cast_xml_schema.jpg"><br>
</p>
</div>
</div></li>
<li><a id="orgheadline35"></a>Draft<br><div class="outline-text-6" id="text-1-3-1-2-7">

<div class="figure">
<p><img src="Draft_xml_schema.jpg"><br>
</p>
</div>
</div></li>
<li><a id="orgheadline36"></a>Scene<br><div class="outline-text-6" id="text-1-3-1-2-8">

<div class="figure">
<p><img src="Scene_xml_schema.jpg"><br>
</p>
</div>
</div></li>
<li><a id="orgheadline37"></a>Chapter<br><div class="outline-text-6" id="text-1-3-1-2-9">

<div class="figure">
<p><img src="Chapter_xml_schema.jpg"><br>
</p>
</div>
</div></li>
<li><a id="orgheadline38"></a>Part<br><div class="outline-text-6" id="text-1-3-1-2-10">

<div class="figure">
<p><img src="Part_xml_schema.jpg"><br>
</p>
</div>
</div></li>
<li><a id="orgheadline39"></a>Story<br><div class="outline-text-6" id="text-1-3-1-2-11">
<div class="org-src-container">

<pre class="src src-nxml">&lt;<span style="color: #87cefa;">Story</span> <span style="color: #eedd82;">uid</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">Story-12345678-1</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">ordinal</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">1</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">isStub</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">false</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">type</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">0</span><span style="color: #ffa07a;">"</span>&gt;
 &lt;<span style="color: #87cefa;">name</span>&gt;Untitled Scifi Story&lt;/<span style="color: #87cefa;">name</span>&gt;
 &lt;<span style="color: #87cefa;">description</span>&gt;The Vroomfastians have been traveling the Dark Matter Highway for quite
awhile. They've just pulled off at our exit, and Man are they hungry!&lt;/<span style="color: #87cefa;">description</span>&gt;
 &lt;<span style="color: #87cefa;">Note</span> <span style="color: #eedd82;">url</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">http://bit.ly/Ogz7Q</span><span style="color: #ffa07a;">"</span>&gt;Interesting article about filaments of Dark Matter
pulling in gas and funneling it across the galaxy.&lt;/<span style="color: #87cefa;">Note</span>&gt;
 &lt;<span style="color: #87cefa;">Note</span>&gt;How about "Once, Upon the Dark Matter Highway" for a title?&lt;/<span style="color: #87cefa;">Note</span>&gt;
 &lt;<span style="color: #87cefa;">Cast</span>/&gt;
 &lt;<span style="color: #87cefa;">Milieu</span>/&gt;
 &lt;<span style="color: #87cefa;">Scene</span> <span style="color: #eedd82;">uid</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">Scene-89543346-3</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">ordinal</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">1</span><span style="color: #ffa07a;">"</span>&gt;
    &lt;<span style="color: #87cefa;">Draft</span> <span style="color: #eedd82;">uid</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">Draft-5465344-43</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">ordinal</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">1</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">isCurrent</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">false</span><span style="color: #ffa07a;">"</span>&gt;It was a dark and
    stormy night.&lt;/<span style="color: #87cefa;">Draft</span>&gt;
    &lt;<span style="color: #87cefa;">Draft</span> <span style="color: #eedd82;">uid</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">Draft-5443523-22</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">ordinal</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">2</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">isCurrent</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">false</span><span style="color: #ffa07a;">"</span>&gt;Dawn hit him in the
    face like a sack of frozen turnips.&lt;/<span style="color: #87cefa;">Draft</span>&gt;
    &lt;<span style="color: #87cefa;">Draft</span> <span style="color: #eedd82;">uid</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">Draft-9678546-34</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">ordinal</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">3</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">isCurrent</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">true</span><span style="color: #ffa07a;">"</span>&gt;A harsh klaxon echoed
    through the ship as the autopilot disengaged from hyperspace.&lt;/<span style="color: #87cefa;">Draft</span>&gt;
 &lt;/<span style="color: #87cefa;">Scene</span>&gt;
 &lt;<span style="color: #87cefa;">Scene</span> <span style="color: #eedd82;">uid</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">Scene-56562546-2</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">ordinal</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">2</span><span style="color: #ffa07a;">"</span> /&gt;
 &lt;<span style="color: #87cefa;">Scene</span> <span style="color: #eedd82;">uid</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">Scene-78678346-12</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">ordinal</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">3</span><span style="color: #ffa07a;">"</span> /&gt;
&lt;/<span style="color: #87cefa;">Story</span>&gt;
</pre>
</div>

<div class="figure">
<p><img src="Story_xml_schema.jpg"><br>
</p>
</div>
</div></li>
<li><a id="orgheadline40"></a>Season<br><div class="outline-text-6" id="text-1-3-1-2-12">
<div class="org-src-container">

<pre class="src src-nxml">&lt;<span style="color: #87cefa;">Season</span> <span style="color: #eedd82;">uid</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">Season-43534573-1</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">ordinal</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">1</span><span style="color: #ffa07a;">"</span>&gt;
  &lt;<span style="color: #87cefa;">Story</span> <span style="color: #eedd82;">uid</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">Story-56562546-41</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">ordinal</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">1</span><span style="color: #ffa07a;">"</span> /&gt;
  &lt;<span style="color: #87cefa;">Story</span> <span style="color: #eedd82;">uid</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">Story-78678346-24</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">ordinal</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">2</span><span style="color: #ffa07a;">"</span> /&gt;
&lt;/<span style="color: #87cefa;">Story</span>
</pre>
</div>

<div class="figure">
<p><img src="Season_xml_schema.jpg"><br>
</p>
</div>
</div></li>
<li><a id="orgheadline41"></a>Series<br><div class="outline-text-6" id="text-1-3-1-2-13">
<div class="org-src-container">

<pre class="src src-nxml">&lt;<span style="color: #87cefa;">Series</span> <span style="color: #eedd82;">uid</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">Story-12345678-1</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">ordinal</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">1</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">isStub</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">false</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">useSeasons</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">false</span><span style="color: #ffa07a;">"</span>&gt;
    &lt;<span style="color: #87cefa;">name</span>&gt;Untitled Scifi Series&lt;/<span style="color: #87cefa;">name</span>&gt;
    &lt;<span style="color: #87cefa;">description</span>&gt;A young boy becomes a central figure in a saga of galactic intrigue when
    he and his father are abducted by aliens and given a powerful secret to keep.
    &lt;/<span style="color: #87cefa;">description</span>&gt;
    &lt;<span style="color: #87cefa;">Note</span> <span style="color: #eedd82;">url</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">http://bit.ly/Ogz7Q</span><span style="color: #ffa07a;">"</span>&gt;Interesting article about filaments of Dark Matter
    pulling in gas and funneling it across the galaxy.&lt;/<span style="color: #87cefa;">Note</span>&gt;
    &lt;<span style="color: #87cefa;">Cast</span>/&gt;
    &lt;<span style="color: #87cefa;">Milieu</span>/&gt;
    &lt;<span style="color: #87cefa;">Story</span> <span style="color: #eedd82;">uid</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">Story-56562546-2</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">ordinal</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">1</span><span style="color: #ffa07a;">"</span>&gt;
        &lt;<span style="color: #87cefa;">name</span>&gt;Once, Upon the Dark Matter Highway&lt;/<span style="color: #87cefa;">name</span>&gt;
        &lt;<span style="color: #87cefa;">description</span>&gt;The Vroomfastians have been traveling the Dark Matter Highway for
        quite awhile. They've just pulled off at our exit, and Man are they hungry!
        &lt;/<span style="color: #87cefa;">description</span>&gt;
    &lt;/<span style="color: #87cefa;">Story</span>&gt;
    &lt;<span style="color: #87cefa;">Story</span> <span style="color: #eedd82;">uid</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">Scene-78678346-12</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">ordinal</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">2</span><span style="color: #ffa07a;">"</span> /&gt;
&lt;/<span style="color: #87cefa;">Series</span>&gt;
</pre>
</div>

<div class="figure">
<p><img src="Series_xml_schema.jpg"><br>
</p>
</div>
</div></li></ol></li></ol>
</div>

<div id="outline-container-orgheadline44" class="outline-4">
<h4 id="orgheadline44"><span class="section-number-4">1.3.2</span> Creating the Value Objects</h4>
<div class="outline-text-4" id="text-1-3-2">
<ul class="org-ul">
<li>TIPS<br></li>
</ul>
<p>
创建的 ValueObjects 不能引用任何 PureMVC 的类，在你的 PureMVC 应用程序外，应该能够独立的测试和复用这些 ValueObjects。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline46" class="outline-4">
<h4 id="orgheadline46"><span class="section-number-4">1.3.3</span> Creating the Enums</h4>
<div class="outline-text-4" id="text-1-3-3">
<p>
Enums 也是一类领域模型实体对象。例如：游戏中卡牌、装备、怪物的品质 1-橙卡，2-紫卡，3-蓝卡，4-绿卡，5-白卡。<br>
将 Enum 值转化为名称的操作、判断相等的操作，封装在 Enum 内部，提高 Enum 的内聚，减少 Enum 的依赖。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline45"></a><span class="todo TODO">TODO</span> 是否存在某些情况，Enum 需要多个名字？如果存在，Enum 应该如何设计来满足这种需求?<br><div class="outline-text-5" id="text-1-3-3-1">
<div class="org-src-container">

<pre class="src src-java"><span style="color: #98fb98;">Enum</span>
<span style="color: #00ffff;">package</span> com.futurescale.sa.model.<span style="color: #00ffff;">enum</span>
{
    <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">    * A base class for enumerations</span>
<span style="color: #ffa07a;">    */</span>
    [Bindable] <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> Enum
    {
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">name</span>:String;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">ordinal</span>:Number;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">description</span>:String;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">Enum</span>( ordinal:Number, name:String, description:String )
        {
            <span style="color: #00ffff;">this</span>.name = name;
            <span style="color: #00ffff;">this</span>.ordinal = ordinal;
            <span style="color: #00ffff;">this</span>.description = description;
        }
        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Compare to another enum instance</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">equals</span>( <span style="color: #00ffff;">enum</span>:Enum ):Boolean
        {
            <span style="color: #00ffff;">return</span> ( ( <span style="color: #00ffff;">this</span>.name == <span style="color: #00ffff;">enum</span>.name ) &amp;&amp;
            ( <span style="color: #00ffff;">this</span>.ordinal == <span style="color: #00ffff;">enum</span>.ordinal ) &amp;&amp;
            ( <span style="color: #00ffff;">this</span>.description == <span style="color: #00ffff;">enum</span>.description )
            );
        }
    }
}
<span style="color: #98fb98;">StoryTypeEnum</span>
<span style="color: #00ffff;">package</span> com.futurescale.sa.model.<span style="color: #00ffff;">enum</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">mx</span>.<span style="color: #7fffd4;">collections</span>.<span style="color: #98fb98;">ArrayCollection</span>;

    <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">    * An enumeration of Story types.</span>
<span style="color: #ffa07a;">    */</span>
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">StoryTypeEnum</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">Enum</span>
    {
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">NONE</span>:StoryTypeEnum =
        <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">StoryTypeEnum</span>( -1, <span style="color: #ffa07a;">"--None Selected--"</span>, <span style="color: #ffa07a;">"Choose a Story Type"</span> );
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">SIMPLE</span>:StoryTypeEnum =
        <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">StoryTypeEnum</span>( 0, <span style="color: #ffa07a;">"Simple"</span>, <span style="color: #ffa07a;">"Scenes only"</span> );
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">NORMAL</span>:StoryTypeEnum =
        <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">StoryTypeEnum</span>( 1, <span style="color: #ffa07a;">"Normal"</span>, <span style="color: #ffa07a;">"Chapters and Scenes"</span> );
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">COMPLEX</span>:StoryTypeEnum =
        <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">StoryTypeEnum</span>( 2, <span style="color: #ffa07a;">"Complex"</span>, <span style="color: #ffa07a;">"Chapters, Parts, and Scenes"</span> );

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">StoryTypeEnum</span>( ordinal:Number, name:String, description:String )
        {
            <span style="color: #00ffff;">super</span>( ordinal, name, description );
        }

        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">function</span> <span style="color: #98fb98;">get</span> <span style="color: #87cefa;">list</span>():Array
        {
            <span style="color: #00ffff;">return</span> [ SIMPLE, NORMAL, COMPLEX ];
        }

        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">function</span> <span style="color: #98fb98;">get</span> <span style="color: #87cefa;">comboList</span>():ArrayCollection
        {
            <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ArrayCollection</span>( [ NONE ].concat( list ) );
        }

        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">equals</span>( <span style="color: #00ffff;">enum</span>:Enum ):Boolean
        {
            <span style="color: #00ffff;">return</span> ( <span style="color: #00ffff;">enum</span> <span style="color: #98fb98;">is</span> <span style="color: #98fb98;">StoryTypeEnum</span> &amp;&amp; <span style="color: #00ffff;">super</span>.equals( <span style="color: #00ffff;">enum</span> ) );
        }
    }
}
</pre>
</div>
</div></li></ol>
</div>
<div id="outline-container-orgheadline47" class="outline-4">
<h4 id="orgheadline47"><span class="section-number-4">1.3.4</span> Testing the Entities</h4>
<div class="outline-text-4" id="text-1-3-4">
<p>
ValueObjects 是整个应用程序的基石。其他代码的作用只是暴露 Value Objects 类的实例给用户，让他们进行操作和持有。因为 Value Objects 封装了序列化和反序列化逻辑，所以在继续完善程序之前，需要对 Value Objects 进行测试。<br>
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">NoteVOTest</span>
<span style="color: #00ffff;">package</span> com.futurescale.sa.model.vo.<span style="color: #7fffd4;">test</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">model</span>.<span style="color: #7fffd4;">vo</span>.<span style="color: #98fb98;">NoteVO</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">flexunit</span>.<span style="color: #7fffd4;">framework</span>.<span style="color: #98fb98;">Assert</span>;
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">NoteVOTest</span>
    {
        [Test] <span style="color: #00ffff;">public</span> function testNoteVOWithXML():<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">url</span>:String = <span style="color: #ffa07a;">"http://google.com"</span>;
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">text</span>:String = <span style="color: #ffa07a;">"Some stuff I'm keeping in the cloud."</span>;
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">xml</span>:XML = &lt;Note url={url}&gt;{text}&lt;/Note&gt;;
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">vo</span>:NoteVO = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">NoteVO</span>( xml );
            <span style="color: #00ffff;">if</span> (! vo is NoteVO ) Assert.fail(<span style="color: #ffa07a;">"Construction with xml failed"</span>);
            <span style="color: #00ffff;">if</span> ( vo.text != text ) Assert.fail(<span style="color: #ffa07a;">"text match failed"</span>);
            <span style="color: #00ffff;">if</span> ( vo.url != url ) Assert.fail(<span style="color: #ffa07a;">"url match failed"</span>);
        }
        [Test] <span style="color: #00ffff;">public</span> function testNoteVOWithoutXML():<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">vo</span>:NoteVO = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">NoteVO</span>();
            <span style="color: #00ffff;">if</span> (! vo is NoteVO ) Assert.fail(<span style="color: #ffa07a;">"Construction without xml failed"</span>);
            <span style="color: #00ffff;">if</span> ( vo.xml.localName() != <span style="color: #7fffd4;">NoteVO</span>.ELEMENT )
            Assert.fail(<span style="color: #ffa07a;">"default xml not provided"</span>);
        }
        [Test] <span style="color: #00ffff;">public</span> function testSet_text():<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">text</span>:String = <span style="color: #ffa07a;">"Bunnies are nice!"</span>;
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">vo</span>:NoteVO = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">NoteVO</span>();
            vo.text = text;
            <span style="color: #00ffff;">if</span> ( vo.text != text ) Assert.fail(<span style="color: #ffa07a;">"text match failed"</span>);
        }
        [Test] <span style="color: #00ffff;">public</span> function testSet_url():<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">url</span>:String = <span style="color: #ffa07a;">"http://puremvc.org"</span>;
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">vo</span>:NoteVO = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">NoteVO</span>();
            vo.url = url;
            <span style="color: #00ffff;">if</span> ( vo.url != url ) Assert.fail(<span style="color: #ffa07a;">"url match failed"</span>);
        }
        [Test] <span style="color: #00ffff;">public</span> function testSet_xml():<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">url</span>:String = <span style="color: #ffa07a;">"http://puremvc.org"</span>;
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">text</span>:String = <span style="color: #ffa07a;">"Code at the Speed of Thought!"</span>;
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">xml</span>:XML = &lt;Note url={url}&gt;{text}&lt;/Note&gt;;
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">vo</span>:NoteVO = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">NoteVO</span>();
            vo.xml = xml;
            <span style="color: #00ffff;">if</span> ( vo.text != text ) Assert.fail(<span style="color: #ffa07a;">"text match failed"</span>);
            <span style="color: #00ffff;">if</span> ( vo.url != url ) Assert.fail(<span style="color: #ffa07a;">"url match failed"</span>);
        }
    }
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline65" class="outline-3">
<h3 id="orgheadline65"><span class="section-number-3">1.4</span> 实现用户界面</h3>
<div class="outline-text-3" id="text-1-4">
<p>
组成用户界面的类应该封装他们自己的行为和表现。当它们需要和外部通讯时，应该只是发布事件、或者设置属性、或者调用它们子控件的方法。<br>
实现 View Components 的时候，你应该暴露事件、属性和交互方法这些 API，隐藏 View Components 的内部实现。<br>
View Components 暴露属性来接收数据；发送事件来传递用户的意图；查看共享选中内容并保持其一致性。它只和自己的子节点，以及赋给它的数据进行交互(这些数据是通过父节点、或者 Mediator 赋给它的)。<br>
</p>
</div>
<div id="outline-container-orgheadline53" class="outline-4">
<h4 id="orgheadline53"><span class="section-number-4">1.4.1</span> Application</h4>
<div class="outline-text-4" id="text-1-4-1">
</div><ol class="org-ol"><li><a id="orgheadline49"></a>Class<br><div class="outline-text-5" id="text-1-4-1-1">
<p>
StoryArchitect.mxml<br>
</p>
</div></li>
<li><a id="orgheadline50"></a>Responsibilities<br><div class="outline-text-5" id="text-1-4-1-2">
<ul class="org-ul">
<li>声明和布局 Chooser 和 Editor View Components<br></li>
<li>初始化 PureMVC Facade<br></li>
<li>触发 PureMVC 的启动流程，传递 app 的引用<br></li>
<li>为 Starting，Chooser 和 Editor 定义三种启动模式<br></li>
<li>暴露一个 bindable 公共属性，来设置字数<br></li>
<li>暴露一个 bindable 公共属性，来设置显示模式<br></li>
<li>暴露一个 bindable 公共属性，来设置 SelectionContxt<br></li>
<li>提供 SelectionContxt 给子节点<br></li>
<li>基于显示模式来控制可见性和布局<br></li>
<li>在状态栏展示显示模式（Editor 模式下，还要显示字数）<br></li>
<li>监听 Editor 组件的 ReportWordCount AppEvents，当该事件发生时，更新 wordCount 属性<br></li>
</ul>
</div></li>
<li><a id="orgheadline51"></a>Collaborations<br></li>
<li><a id="orgheadline52"></a>Code<br><div class="outline-text-5" id="text-1-4-1-4">
<div class="org-src-container">

<pre class="src src-nxml">&lt;?<span style="color: #00ffff;">xml</span> <span style="color: #eedd82;">version</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">1.0</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">encoding</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">utf-8</span><span style="color: #ffa07a;">"</span>?&gt;
<span style="color: #ff0000;">&lt;!--</span><span style="color: #ff0000;"> STORY ARCHITECT APPLICATION </span><span style="color: #ff0000;">--&gt;</span>
&lt;<span style="color: #b0c4de;">s</span>:<span style="color: #87cefa;">WindowedApplication</span> <span style="color: #b0c4de;">xmlns</span>:<span style="color: #eedd82;">editor</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">com.futurescale.sa.view.component.editor.*</span><span style="color: #ffa07a;">"</span>
                        <span style="color: #b0c4de;">xmlns</span>:<span style="color: #eedd82;">chooser</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">com.futurescale.sa.view.component.chooser.*</span><span style="color: #ffa07a;">"</span>
                        <span style="color: #b0c4de;">xmlns</span>:<span style="color: #eedd82;">s</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">library://ns.adobe.com/flex/spark</span><span style="color: #ffa07a;">"</span>
                        <span style="color: #b0c4de;">xmlns</span>:<span style="color: #eedd82;">fx</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">http://ns.adobe.com/mxml/2009</span><span style="color: #ffa07a;">"</span>
                        <span style="color: #eedd82;">applicationComplete</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">facade.startup(this); // startup app</span><span style="color: #ffa07a;">"</span>
                        <span style="color: #eedd82;">minWidth</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">800</span><span style="color: #ffa07a;">"</span> <span style="color: #eedd82;">minHeight</span>=<span style="color: #ffa07a;">"</span><span style="color: #ffa07a;">600</span><span style="color: #ffa07a;">"</span>&gt;
      &lt;<span style="color: #b0c4de;">fx</span>:<span style="color: #87cefa;">Script</span>&gt;
          &lt;![<span style="color: #b0c4de;">CDATA</span>[
              import com.futurescale.sa.ApplicationFacade;
              import com.futurescale.sa.view.context.SelectionContext;

              public static const MODE_STARTING:String = "Starting...";
              public static const MODE_CHOOSER:String = "Chooser";
              public static const MODE_EDITOR:String = "Editor";

              // Selection context shared between View Components.
              [Bindable] public var context:SelectionContext;

              // Word Count (displayed on status bar in Editor mode)
              [Bindable] public var wordCount:String = "";

              // Display Mode (Chooser/Editor)
              [Bindable] private var mode:String = MODE_STARTING;

              // Initialize the PureMVC Facade
              private var facade:ApplicationFacade = ApplicationFacade.getInstance();

              /**
              * Set the application display mode, and if showing
              * the Editor, initialize the word count from the
              * selected Story.
              */
              public function setMode( mode:String ):void
              {
                  this.mode=mode;
                  if (mode == MODE_EDITOR &amp;&amp; context.story) {
                      wordCount = context.story.wordCount.toString();
                  } else {
                      wordCount = "";
                  }
              }
      &lt;/fx:Script&gt;

  &lt;!-- LAYOUT --&gt;
  &lt;s:layout&gt;
      &lt;s:VerticalLayout horizontalAlign="center"/&gt;
  &lt;/s:layout&gt;

  &lt;!-- STATUS BAR --&gt;
  &lt;s:status&gt;{mode}{(wordCount != "")?" | "+wordCount+" words":""}&lt;/s:status&gt;

  &lt;!-- CHOOSER --&gt;
  &lt;chooser:Chooser id="chooser" width="100%" height="100%"
                    includeInLayout="{mode == MODE_CHOOSER}"
                    visible="{mode == MODE_CHOOSER}"/&gt;
  &lt;!-- EDITOR --&gt;
  &lt;editor:Editor id="editor" width="100%" height="100%"
                  includeInLayout="{mode == MODE_EDITOR}"
                  visible="{mode == MODE_EDITOR}"
                  &lt;!-- &#22312;&#36825;&#37324;&#30417;&#21548; reportWordCount &#20107;&#20214; --&gt;
                  reportWordCount="wordCount=String(event.data)"
                  context="{context}"/&gt;
&lt;/s:WindowedApplication&gt;
</pre>
</div>
</div></li></ol>
</div>
<div id="outline-container-orgheadline54" class="outline-4">
<h4 id="orgheadline54"><span class="section-number-4">1.4.2</span> Other View Components</h4>
<div class="outline-text-4" id="text-1-4-2">
<p>
The Chooser<br>
The Story Chooser<br>
The Editor<br>
The Editor Controls<br>
The Details Component<br>
The Item Info Component<br>
The Notes Component<br>
The Timeline Component<br>
The Story Tile<br>
The Part Tile<br>
The Chapter Tile<br>
The Scene Tile<br>
The Draft Tile<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline59" class="outline-4">
<h4 id="orgheadline59"><span class="section-number-4">1.4.3</span> The Selection Context</h4>
<div class="outline-text-4" id="text-1-4-3">
<p>
<a id="orgtarget3"></a><br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline55"></a>Class<br><div class="outline-text-5" id="text-1-4-3-1">
<p>
SelectionContext.as<br>
</p>
</div></li>
<li><a id="orgheadline56"></a>Responsibilities<br><div class="outline-text-5" id="text-1-4-3-2">
<ul class="org-ul">
<li>暴露公共的方法来选择各种各样的 ValueObject 子类对象.<br>
选中操作伴随着，选中其他相关 ValueObject 对象 和 取消选中其他相关 ValueObject 对象。<br></li>
<li>通过 selectedItem 来记录选中操作选择的对象。selectedItem 是 bindable 的<br></li>
<li>暴露 bindable 的属性来读取当前选中的 CastVO,ChapterVO,CharacterVO,DraftVO,MilieuVO,NoteVO,PartVO,SceneVO,SeasonVO,SeriesVO,SettingVO,StoryVO 等等。<br></li>
</ul>
</div></li>
<li><a id="orgheadline57"></a>Collaborations<br></li>
<li><a id="orgheadline58"></a>Code<br><div class="outline-text-5" id="text-1-4-3-4">
<div class="org-src-container">

<pre class="src src-java"><span style="color: #00ffff;">package</span> com.futurescale.sa.view.<span style="color: #7fffd4;">context</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">model</span>.<span style="color: #7fffd4;">vo</span>.<span style="color: #98fb98;">CastVO</span>;
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#30465;&#30053;&#19968;&#37096;&#20998; import ......</span>
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">model</span>.<span style="color: #7fffd4;">vo</span>.<span style="color: #98fb98;">ValueObject</span>;
    <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">    * The currently selected items in the UI.</span>
<span style="color: #ffa07a;">    *</span>
<span style="color: #ffa07a;">    * When calling the select methods, items</span>
<span style="color: #ffa07a;">    * below the selection in the Series/Story</span>
<span style="color: #ffa07a;">    * hierarchy as well as the selected Note,</span>
<span style="color: #ffa07a;">    * Cast and Milieu are automatically nulled</span>
<span style="color: #ffa07a;">    * as appropriate.</span>
<span style="color: #ffa07a;">    */</span>
    [Bindable] <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> SelectionContext
    {
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">NAME</span>:String = <span style="color: #ffa07a;">"SelectionContext"</span>;

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">selectSeries</span>( series:SeriesVO ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #00ffff;">this</span>.selectedItem = series;
            <span style="color: #00ffff;">this</span>.series = series;
            <span style="color: #00ffff;">this</span>.season = <span style="color: #7fffd4;">null</span>;
            <span style="color: #00ffff;">this</span>.story = <span style="color: #7fffd4;">null</span>;
            <span style="color: #00ffff;">this</span>.part = <span style="color: #7fffd4;">null</span>;
            <span style="color: #00ffff;">this</span>.chapter = <span style="color: #7fffd4;">null</span>;
            <span style="color: #00ffff;">this</span>.scene = <span style="color: #7fffd4;">null</span>;
            <span style="color: #00ffff;">this</span>.draft = <span style="color: #7fffd4;">null</span>;
            <span style="color: #00ffff;">this</span>.note = <span style="color: #7fffd4;">null</span>;
            <span style="color: #00ffff;">if</span> ( series ) {
            <span style="color: #00ffff;">this</span>.cast = series.cast;
            <span style="color: #00ffff;">this</span>.milieu = series.milieu;
            <span style="color: #00ffff;">this</span>.setting = <span style="color: #7fffd4;">null</span>;
            <span style="color: #00ffff;">this</span>.character = <span style="color: #7fffd4;">null</span>;
        }
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#27492;&#22788;&#30465;&#30053;&#19968;&#37096;&#20998;&#20195;&#30721;......</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">selectNote</span>( note:NoteVO ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #00ffff;">this</span>.note = note;
        }

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">selectCharacter</span>( character:CharacterVO ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #00ffff;">this</span>.selectedItem = character;
            <span style="color: #00ffff;">this</span>.character = character;
            <span style="color: #00ffff;">this</span>.note = <span style="color: #7fffd4;">null</span>;
        }

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">selectSetting</span>( setting:SettingVO ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #00ffff;">this</span>.selectedItem = setting;
            <span style="color: #00ffff;">this</span>.setting = setting;
            <span style="color: #00ffff;">this</span>.note = <span style="color: #7fffd4;">null</span>;
        }

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">selectedText</span>:String;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">selectedItem</span>:ValueObject;

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">series</span>:SeriesVO;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">season</span>:SeasonVO;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">story</span>:StoryVO;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">part</span>:PartVO;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">chapter</span>:ChapterVO;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">scene</span>:SceneVO;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">draft</span>:DraftVO;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">note</span>:NoteVO;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">cast</span>:CastVO;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">milieu</span>:MilieuVO;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">character</span>:CharacterVO;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">setting</span>:SettingVO;
    }
}
</pre>
</div>
</div></li></ol>
</div>
<div id="outline-container-orgheadline64" class="outline-4">
<h4 id="orgheadline64"><span class="section-number-4">1.4.4</span> The App Event</h4>
<div class="outline-text-4" id="text-1-4-4">
</div><ol class="org-ol"><li><a id="orgheadline60"></a>Class<br><div class="outline-text-5" id="text-1-4-4-1">
<p>
AppEvent.as<br>
</p>
</div></li>
<li><a id="orgheadline61"></a>Responsibilities<br><div class="outline-text-5" id="text-1-4-4-2">
<p>
用 AppEvent 来创建两部分协议的其中一部分。AppEvent 定义了所有从用户界面发起的请求，这些请求在其他地方（其他 ViewCommpoents 或者 Mediators 和 Commands）被处理。两部分协议的另外一部分是 AppConstants，其中定义了消息名称，它们由 View 层和 Controller 层共用。<br>
AppEvent 和 AppConstants 中的一些名称会相同，但是不要将这两个文件合为一个文件，因为 AppEvent 是定义和用户界面相关的事件名称，而 AppConstants 定义的是 PureMVC 系统中用到的消息名称，分开两者可以让 View Components 独立于 PureMVC。<br>
</p>
<ul class="org-ul">
<li>扩展 Flash Event 类<br></li>
<li>定义事件类型<br></li>
<li>为数据和相关数据定义 Object 类型的属性<br></li>
<li>在构造函数中接受 type data related 参数来设置相关的属性<br></li>
</ul>
</div></li>
<li><a id="orgheadline62"></a>Collaborations<br></li>
<li><a id="orgheadline63"></a>Code<br><div class="outline-text-5" id="text-1-4-4-4">
<div class="org-src-container">

<pre class="src src-java"><span style="color: #00ffff;">package</span> com.futurescale.sa.view.<span style="color: #7fffd4;">event</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">flash</span>.<span style="color: #7fffd4;">events</span>.<span style="color: #98fb98;">Event</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">AppEvent</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">Event</span>
    {
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Components of the AppEvent types</span>
        <span style="color: #00ffff;">private</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">ADD</span>:String = <span style="color: #ffa07a;">"add"</span>;
        <span style="color: #00ffff;">private</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">DELETE</span>:String = <span style="color: #ffa07a;">"delete"</span>;
        <span style="color: #00ffff;">private</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">MANAGE</span>:String = <span style="color: #ffa07a;">"manage"</span>;
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">...... &#30465;&#30053;</span>

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">AppEvent types</span>
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">ADD_SERIES</span>:String = ADD+SERIES;
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">ADD_SEASON</span>:String = ADD+SEASON;
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">ADD_EPISODE</span>:String = ADD+EPISODE;
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">...... &#30465;&#30053;</span>

        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">DELETE_SERIES</span>:String = DELETE+SERIES;
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">DELETE_SEASON</span>:String = DELETE+SEASON;
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">DELETE_EPISODE</span>:String = DELETE+EPISODE;
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">...... &#30465;&#30053;</span>

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">data</span>:Object; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">optional data object</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">related</span>:Object; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">optional related data object</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">AppEvent</span>( type:String, data:Object=<span style="color: #7fffd4;">null</span>, related:Object=<span style="color: #7fffd4;">null</span> )
        {
            <span style="color: #00ffff;">super</span>(type, <span style="color: #7fffd4;">true</span>, <span style="color: #7fffd4;">true</span>);
            <span style="color: #00ffff;">this</span>.data = data;
            <span style="color: #00ffff;">this</span>.related = related;
        }
    }
}
</pre>
</div>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline75" class="outline-3">
<h3 id="orgheadline75"><span class="section-number-3">1.5</span> 为模型实现 Proxys</h3>
<div class="outline-text-3" id="text-1-5">
<ul class="org-ul">
<li>Proxy 类非常简单，它有一些生命周期函数，在注册和删除时，这些函数会被调用；它包含一个 Object 类型的数据属性，以及对应的 getData 和 setData 方法；它可以发送消息，来单向通知 Mediators 或触发 Commands 执行。<br></li>
<li>Proxy 应该不关心任何 View 或 Controller 层的类，即不要再 Proxy 中引用任何 View 或 Controller 层的对象。<br></li>
<li>Proxy 通常是长期存在的角色，他们在启动时被注册，并且在运行过程中一直不被释放。那些被动态创建的 Proxy 实例通常为临时对象。<br></li>
<li>将 PureMVC 的 Model 想象为一个银行的地下室，而 Proxy 为其中的保险箱。每个保险箱有一个唯一的 key，你可以在保险箱中存储任何你想存储的东西。<br></li>
<li>Proxy 包含一个 facade 属性，这是一个 ApplicationFacade 的引用。可以用来注册、删除、获取其他 Proxys 甚至 Mediator。该属性是因为 Proxy 从 Notifier 派生而获得的，所以 Proxy 还可以直接调用 sendNotification()发送消息。切记，不要使用 facade 属性来操作和 View 或 Controller 层的对象。<br></li>
</ul>
</div>
<div id="outline-container-orgheadline66" class="outline-4">
<h4 id="orgheadline66"><span class="section-number-4">1.5.1</span> Proxy Life Cycle</h4>
<div class="outline-text-4" id="text-1-5-1">
<ul class="org-ul">
<li>你写的大部分 Proxy 子类，都是为了和远程服务器或文件系统交换数据，执行认证，执行 RTMP 通道通讯，执行 Socket 通讯等。对于系统的剩余部分，Proxys 相当于数据保存者和外面世界的网关。<br></li>
<li>Proxy 通常在模型准备阶段注册一次，一般时在 StartupCommand 中，在 Mediators 注册之前。<br></li>
<li>在运行过程中，Commands 和 Mediators 会使用名称来获取他们需要的 Proxys，然后调用 Proxys 的方法，设置或获取 Proxys 持有的数据。Proxys 不能接收消息。<br></li>
<li>有时候，为了保证数据的完整性，Proxys 之间需要相互通讯。一旦注册，他们可以像 Meditors 和 Commands 一样，获取某个 Proxy，然后和它交互。但是，这需要在 StartupCommand 中保证 Proxys 的注册顺序，从而加大了 StartupCommand 的维护难度。所以，当一个 Proxy 需要和另外一个 Proxy 通讯时，最好是在 Proxy 的构造函数中 require 它所依赖的其他 Proxys。<br></li>
<li>放在 Proxy 构造函数中做的事情，应该移到 onRegister()中，因为在构造函数执行完以后，Proxy 并没有注册，此时通过 facade 无法获取到 Proxy。<br></li>
<li>如果 Proxy 是动态创建和添加的，你需要在 Proxy 的 onRemove()事件中发送消息给 Mediators，让他们设置该 Proxy 的引用为 null<br></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline67" class="outline-4">
<h4 id="orgheadline67"><span class="section-number-4">1.5.2</span> 重新考察持久化策略</h4>
<div class="outline-text-4" id="text-1-5-2">
<p>
同步的工作方式为 数据请求发出后，阻塞等待数据返回，所需数据返回后，直接对数据进行操作。其优点是代码比较简单。<br>
异步的工作方式为 数据请求发出后，立即返回做其他事情，等数据返回后，再对数据进行操作。其优点是程序不会阻塞。<br>
</p>

<p>
在 StoryAchitect 中，应用程序采用同步的方式访问本地文件，本地文件镜像到服务器采用异步的方式。这样就可以充分利用同步和异步各自的优点。<br>
在 StoryAchitect 中，添加 index.xml 来存放实体元素的简介信息。例如：存储新的 StoryVO 时，可以将全部数据存储在一个数据 xml 文件中，将简介数据存储在一个索引 xml 文件中。这样就避免了，程序需要加载所有数据 xml 文件。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline74" class="outline-4">
<h4 id="orgheadline74"><span class="section-number-4">1.5.3</span> 创建 Proxys</h4>
<div class="outline-text-4" id="text-1-5-3">
<ol class="org-ol">
<li>到目前为止，我们确定需要创建下面四个 Proxy 子类：CastProxy,MilieuProxy,SeriesProxy,StoryProxy.我们知道这些类之间存在依赖关系，并且我们允许他们相互协作来管理这些依赖关系，这些类也都会对系统文件 I/O 和索引做很多相同的事情。<br></li>
<li>OOP 的一个经典决策点是：我们应该通过继承方式还是组合方式来添加这些相同的功能？有些人认为你应该总是采用某个而不是另一个，其实，你应该根据当前遇到的问题来选择合适的策略。Delegate 模式是组合方式的一个实例。如果你希望改变这些相同的功能，那么组合方式是一个好的选择，你只要重新设置 Delegate，就可以改变功能。组合描述的是 contain-a 的关系，派生描述的是 is-a 的关系，所以组合更加灵活。<br></li>
<li>StoryAchitect 中采用了继承方式来实现 Proxy 中的公共功能，当然也可以采用组合的方式来实现，在 ProxyHelper 类中实现所有公共的功能，然后，在各个 Proxy 子类中调用 ProxyHelper 的方法。<br></li>
</ol>
</div>
<ol class="org-ol"><li><a id="orgheadline72"></a>AbstractProxy<br><ol class="org-ol"><li><a id="orgheadline68"></a>Class<br><div class="outline-text-6" id="text-1-5-3-1-1">
<p>
AbstractProxy.as<br>
</p>
</div></li>
<li><a id="orgheadline69"></a>Responsibilities<br><div class="outline-text-6" id="text-1-5-3-1-2">
<ul class="org-ul">
<li>提供一个函数来连接到一个文件夹，该文件夹名称由子类提供。如果文件夹不存在就创建它，并且保证文件夹中存在一个索引文件，即使文件夹中不包含任何条目。<br></li>
<li>提供增加、保存、删除 ValueObject 的方法，自动更新文件系统和内存中对应的索引。<br></li>
<li>提供函数返回在文件夹索引文件中保存的 ValueObject 简介内容的集合<br></li>
<li>保证索引按照 ValueObject 的名称排序<br></li>
</ul>
</div></li>
<li><a id="orgheadline70"></a>Collaborations<br><div class="outline-text-6" id="text-1-5-3-1-3">
<p>
AbstractProxy 知道的元素 ：AbstractProxy 知道 Flash 的 File,FileMode 以及 FileStream 类来执行文件系统 I/O.它还知道 ArrayCollection,Sort 以及 SortField 来来创建基于名字排序的索引。它还知道 PureMVC 的 Proxy 类，以及我们定义的 ValueObject 类。<br>
知道 AbstractProxy 的元素：AbstractProxy 只被它的子类所知道<br>
</p>
</div></li>
<li><a id="orgheadline71"></a>Code<br><div class="outline-text-6" id="text-1-5-3-1-4">
<div class="org-src-container">

<pre class="src src-java"><span style="color: #00ffff;">package</span> com.futurescale.sa.model.<span style="color: #7fffd4;">proxy</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">model</span>.<span style="color: #7fffd4;">vo</span>.<span style="color: #98fb98;">ValueObject</span>;

    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">flash</span>.<span style="color: #7fffd4;">filesystem</span>.<span style="color: #98fb98;">File</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">flash</span>.<span style="color: #7fffd4;">filesystem</span>.<span style="color: #98fb98;">FileMode</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">flash</span>.<span style="color: #7fffd4;">filesystem</span>.<span style="color: #98fb98;">FileStream</span>;

    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">mx</span>.<span style="color: #7fffd4;">collections</span>.<span style="color: #98fb98;">ArrayCollection</span>;

    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">patterns</span>.<span style="color: #7fffd4;">proxy</span>.<span style="color: #98fb98;">Proxy</span>;

    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">spark</span>.<span style="color: #7fffd4;">collections</span>.<span style="color: #98fb98;">Sort</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">spark</span>.<span style="color: #7fffd4;">collections</span>.<span style="color: #98fb98;">SortField</span>;

    <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">    * Provides subclasses with a simple VO-to-disk</span>
<span style="color: #ffa07a;">    * API with automatic name-sorted indexing.</span>
<span style="color: #ffa07a;">    */</span>
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">AbstractProxy</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">Proxy</span>
    {

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Extension for files</span>
        <span style="color: #00ffff;">private</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">FILE_EXT</span>:String = <span style="color: #ffa07a;">".xml"</span>;

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Index filename</span>
        <span style="color: #00ffff;">private</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">INDEX</span>:String = <span style="color: #ffa07a;">"index"</span>+FILE_EXT;

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">The folder to access. Set by connectToFolder()</span>
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">folder</span>:File;

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Constructor.</span>
<span style="color: #ffa07a;">        *</span>
<span style="color: #ffa07a;">        * Name provided by subclass, data property</span>
<span style="color: #ffa07a;">        * (used for the index of stubbed VOs) is</span>
<span style="color: #ffa07a;">        * initialized to ArrayCollection.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">AbstractProxy</span>( name:String )
        {
            <span style="color: #00ffff;">super</span>( name, <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ArrayCollection</span>() );
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * The name-sorted index of stubbed VOs.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #98fb98;">get</span> <span style="color: #87cefa;">index</span>():ArrayCollection
        {
            <span style="color: #00ffff;">return</span> data as ArrayCollection;
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Abstract factory method to create stubbed VOs</span>
<span style="color: #ffa07a;">        * for the index. Must be overridden in subclass</span>
<span style="color: #ffa07a;">        * and return a stubbed VO of the appropriate type</span>
<span style="color: #ffa07a;">        * for inclusion in the index.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">getVoInstance</span>( xml:XML ):ValueObject
        {
            <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">null</span>;
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Sets the protected folder property.</span>
<span style="color: #ffa07a;">        *</span>
<span style="color: #ffa07a;">        * Also, if the folder does not exist, it is</span>
<span style="color: #ffa07a;">        * created and an empty index written. Otherwise,</span>
<span style="color: #ffa07a;">        * the index is read from the existing folder.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">connectToFolder</span>( name:String ):<span style="color: #98fb98;">void</span>
        {
            folder = File.applicationStorageDirectory.resolvePath( name );
            <span style="color: #00ffff;">if</span> ( !folder.exists ) {
                folder.createDirectory();
                writeIndex();
            } <span style="color: #00ffff;">else</span> {
                readIndex();
            }
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Write the Value Object's XML property to a file</span>
<span style="color: #ffa07a;">        * and update the index on disk and in memory.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">writeVO</span>( vo:ValueObject ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">file</span>:File = getFile( vo );
            writeFile( file, vo.xml );
            updateIndex( vo );
        }
        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        *From the stub passed in, read the corresponding VO</span>
<span style="color: #ffa07a;">        * from the disk and return the XML.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">readVO</span>( voStub:ValueObject ):XML
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">file</span>:File = getFile( voStub );
            <span style="color: #00ffff;">return</span> XML ( readFile( file ) );
        }
        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * From the VO passed in, delete the corresponding VO</span>
<span style="color: #ffa07a;">        * from the disk and update the index.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">deleteVO</span>( vo:ValueObject ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">file</span>:File = getFile( vo );
            <span style="color: #00ffff;">if</span> ( file.exists ) file.deleteFile();
            updateIndex( vo, <span style="color: #7fffd4;">true</span> );
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Read the index XML from disk and create the</span>
<span style="color: #ffa07a;">        * in memory index of stubbed VOs.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">readIndex</span>():<span style="color: #98fb98;">void</span>
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">read in the index XML</span>
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">file</span>:File = folder.resolvePath( INDEX );
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">xml</span>:XML = readFile( file );

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">build the index from the XML</span>
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">ac</span>:ArrayCollection = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ArrayCollection</span>();
            <span style="color: #00ffff;">for</span> each ( <span style="color: #98fb98;">var</span> <span style="color: #87cefa;">ix</span>:XML in xml.children() )
            {
                <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">vo</span>:ValueObject = getVoInstance( ix );
                ac.addItem( vo );
            }

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Sort the index by name</span>
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">sort</span>:Sort = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Sort</span>();
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">field</span>:SortField = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">SortField</span>( <span style="color: #ffa07a;">"name"</span> );
            sort.fields = [ field ];
            ac.sort = sort;
            ac.refresh();

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">set the index as the proxy data</span>
            setData( ac );
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Read the in memory index of stubbed VOs to</span>
<span style="color: #ffa07a;">        * the index XML file on disk.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">writeIndex</span>():<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">file</span>:File = folder.resolvePath( INDEX );
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">xml</span>:XML = &lt;<span style="color: #98fb98;">index</span>&gt;&lt;/index&gt;;
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">ivo</span>:ValueObject;
            <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">i</span>:<span style="color: #98fb98;">int</span>=0; i &lt; index.<span style="color: #98fb98;">length</span>; i++ ){
                ivo = ValueObject( index.getItemAt(i) );
                xml.appendChild( ivo.getStub() );
            }
            writeFile( file, xml );
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Update the in memory index of stubbed VOs, replacing or</span>
<span style="color: #ffa07a;">        * removing the stubbed VO passed in, sort the index, and</span>
<span style="color: #ffa07a;">        * write the index XML file on disk.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">updateIndex</span>( vo:ValueObject, removing:Boolean=<span style="color: #7fffd4;">false</span> ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Find and remove existing item if present</span>
            <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">i</span>:<span style="color: #98fb98;">int</span>=0; i &lt; index.<span style="color: #98fb98;">length</span>; i++ ){
                <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">ivo</span>:ValueObject = ValueObject( index.getItemAt(i) );
                <span style="color: #00ffff;">if</span> ( ivo.uid == vo.uid ) {
                    index.removeItemAt( i );
                    <span style="color: #00ffff;">break</span>;
                }
            }

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">add the new or updated item to index if not removing</span>
            <span style="color: #00ffff;">if</span> ( ! removing ) index.addItem( getVoInstance( vo.getStub() ) );

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">re-sort the index</span>
            index.refresh();

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">persist the index</span>
            writeIndex();
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Write xml to a file.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">writeFile</span>( file:File, xml:XML ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">stream</span>:FileStream = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">FileStream</span>()
            stream.open( file, <span style="color: #7fffd4;">FileMode</span>.WRITE );
            stream.writeUTFBytes( xml );
            stream.close();
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Read XML from a file and return it.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">readFile</span>( file:File ):XML
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">stream</span>:FileStream = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">FileStream</span>()
            stream.open( file, <span style="color: #7fffd4;">FileMode</span>.READ );
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">xml</span>:XML = XML( stream.readUTFBytes( stream.bytesAvailable ) );
            stream.close();
            <span style="color: #00ffff;">return</span> xml;
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Get the corresponding File object for a given VO.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">getFile</span>( vo:ValueObject ):File
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">filename</span>:String = vo.uid + FILE_EXT;
            <span style="color: #00ffff;">return</span> folder.resolvePath( filename );
        }
    }
}
</pre>
</div>
</div></li></ol></li>
<li><a id="orgheadline73"></a>其他 Proxy<br><div class="outline-text-5" id="text-1-5-3-2">
<ul class="org-ul">
<li>CastProxy<br></li>
<li>MilieuProxy<br></li>
<li>StoryProxy<br></li>
<li>SeriesProxy<br></li>
</ul>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline88" class="outline-3">
<h3 id="orgheadline88"><span class="section-number-3">1.6</span> 为视图实现 Mediators</h3>
<div class="outline-text-3" id="text-1-6">
<ol class="org-ol">
<li>就像前面说的，通讯是个双向街道。这是 Mediator 存在的核心原因，Mediator 用来促进 View Component 和应用程序的剩余部分之间的双向通讯。所以，Mediator 的大部分职责都是处理来自 ViewComponent 的事件，以及处理来自应用程序剩余部分的消息。这样就解除了应用程序和 ViewComponents 之间的耦合。<br></li>
<li>Mediator 类有一个 facade 属性，它是 ApplicationFacade 的引用。使用 facade 属性可以注册、删除、获取 Meditor，Proxys 以及 Commands。这个属性是通过继承 Notifier 来获得的，所以 Meditor 还可以调用 sendNotification。切记，不要使用 facade 来获取其他 Mediators，这样会让 Mediators 之间耦合在一起。<br></li>
</ol>
</div>
<div id="outline-container-orgheadline76" class="outline-4">
<h4 id="orgheadline76"><span class="section-number-4">1.6.1</span> Mediator Life Cycle</h4>
<div class="outline-text-4" id="text-1-6-1">
<ul class="org-ul">
<li>Mediator 获得它的 ViewComponent 的方式包括：<br></li>
<li>创建 Mediator 时，将 ViewComponent 传递给 Mediator 的构造函数。<br></li>
<li>Mediator 自己创建 ViewComponent<br></li>
<li>Mediator 注册之后，从某个消息接收到 ViewComponent<br></li>
</ul>
<p>
等等<br>
</p>
<ul class="org-ul">
<li>通常 Mediator 从被注册开始，在运行过程中长期存在。<br></li>
<li>在 Mediator 的 onRegister()方法中，我们会监听 ViewComponent 发送给 Mediator 的事件；获取 Mediator 要交互的 Proxys。<br></li>
<li>在 Mediator 的 onRemove()方法中，移除对 Proxys 的引用<br></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline78" class="outline-4">
<h4 id="orgheadline78"><span class="section-number-4">1.6.2</span> 和 ViewComponent 的交互</h4>
<div class="outline-text-4" id="text-1-6-2">
<ul class="org-ul">
<li>在实现一个 ViewComponent 的时候，我们不会到达应用程序的内部，获取一个 Proxy 来得到所需的数据。我们会为 ViewComponent 暴露属性和方法，这样数据就可以传递到 ViewComponent 内部。同样的在系统的其他地方，我们也不会直接获取一个 ViewCompoent，然后对它直接进行操作。我们会发送一个消息给它的 Mediator，由 Mediator 来通知它。<br></li>
<li>一个 Mediator 它应该调节，而不是思考。将思考的工作留给 Commands，它们只是将消息传递走。<br></li>
</ul>
</div>
<ol class="org-ol"><li><a id="orgheadline77"></a>依赖注入 Dependency Injection<br><div class="outline-text-5" id="text-1-6-2-1">
<p>
很多人认为 PureMVC 缺乏 DI 特性，其实 Mediator 做的事情就是依赖注入。通过函数调用或设置属性它将 VO 传递给 ViewComponent。ViewComponent 依赖于 ValueObject 来执行工作。Mediator 将 ValueObject 注入到 ViewComponent 中。<br>
PureMVC 缺乏的是编译级别的依赖注入。例如 Flex 的数据绑定就是编译器依赖注入。而编译级别的依赖注入，会降低应用程序的可移植性。<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline79" class="outline-4">
<h4 id="orgheadline79"><span class="section-number-4">1.6.3</span> 和应用程序的交互</h4>
<div class="outline-text-4" id="text-1-6-3">
<ol class="org-ol">
<li>通过 listNotificationInterests()来列出 Mediator 感兴趣的消息<br></li>
<li>通过 handleNotification()来相应接收到的消息<br></li>
<li><p>
什么时候你发送一个消息给 Command 来处理，而什么时候你直接和 Proxys 交互？<br>
</p>
<ul class="org-ul">
<li>如果你要执行逻辑，传递或验证数据或者是和多个 Proxy 通讯，最好是将这些操作放在一个 Command 中，然后，通过 Mediator 发送一个消息来触发 Command 的执行。<br></li>
</ul>
<p>
当你需要在很多地方触发相同的功能时，也采用这种方式。<br>
Notification 和 Command 是多对一的关系。不同的消息，可以触发相同的 Command。<br>
</p>
<ul class="org-ul">
<li>如果你只是将数据从 ViewComponent 传递给 Proxy 的一个方法，你可以直接调用 Proxy 的方法即可。<br></li>
</ul></li>
<li>避免在一个 Mediator 中获取另一个 Mediator，来调用另一个 Mediator 的方法或设置它的属性。Proxys 之间可以获取彼此，是为了方便维护数据模型的完整性，而 Mediator 之间没有什么理由耦合在一起。<br></li>
<li>一个 ViewComponent 可以有多个 Mediator，Notification 有一个 type 属性，通过该属性可以标识，消息发送给哪个 Meditor。<br></li>
</ol>
</div>
</div>
<div id="outline-container-orgheadline80" class="outline-4">
<h4 id="orgheadline80"><span class="section-number-4">1.6.4</span> 确定调解的粒度 (Determing Granularity of Mediation)</h4>
<div class="outline-text-4" id="text-1-6-4">
<p>
我们需要多少 Mediator，是否每个 Button 都需要一个 Mediator？<br>
这取决于我们创建的视图树。以及由多少组件需要自定义处理。最好的方式是从上到下来考虑，而不是从一个 Button 开始考虑。<br>
首先，我们通常人物 App 需要一个 Mediator。在我们的 StoryArchitect 中，这个 App 的 Mediator 需要有注入的 SelectionContxt，并且我们可以让 ApplicationMediator 来切换 StoryArchitect 的显示模式。<br>
其次，Chooser 和 Editor 是用户界面中的两个主要视图，他们在需求上完全不同，所以将分别为他们创建 Mediator 比将所有操作都放在 ApplicationMediator 中要更好。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline87" class="outline-4">
<h4 id="orgheadline87"><span class="section-number-4">1.6.5</span> 创建 Mediators</h4>
<div class="outline-text-4" id="text-1-6-5">
<p>
根据我们的情况，我们需要创建下面三个 Mediator 子类：ApplicationMediator,ChooserMediator,EditorMediator.这些类之间不需要共享公共的功能，所以我们不需要创建一个像 AbstractProxy 一样的 AbstractMediator。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline85"></a>ApplicationMediator<br><ol class="org-ol"><li><a id="orgheadline81"></a>Class<br><div class="outline-text-6" id="text-1-6-5-1-1">
<p>
ApplicationMediator.as<br>
</p>
</div></li>
<li><a id="orgheadline82"></a>Responsibilities<br><div class="outline-text-6" id="text-1-6-5-1-2">
<ul class="org-ul">
<li>在注册的时候，获取临时的 Proxy 保存 SelectionContext 并且设置 StoryArchitect 的 context 属性。<br></li>
<li>在注册的时候，同时设置应用程序为 StoryArchitect.MODE_CHOOSER<br></li>
<li>需要注意的是，在注册的时候，StoryArchitect 不会发送任何我们需要处理的事件<br></li>
<li>声明感兴趣的消息：AppConstants.SHOW_EDITOR 和 AppConstants.SHOW_CHOOSER<br></li>
<li>通过设置 Application 为对于的模式来处理这些消息<br></li>
<li>定义一个名为 app 的私有的 getter 方法，将 viewComponent 属性转化为 StoryArchitect 类型<br></li>
</ul>
</div></li>
<li><a id="orgheadline83"></a>Collaborations<br></li>
<li><a id="orgheadline84"></a>Code<br><div class="outline-text-6" id="text-1-6-5-1-4">
<div class="org-src-container">

<pre class="src src-java"><span style="color: #00ffff;">package</span> com.futurescale.sa.view.<span style="color: #7fffd4;">mediator</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">controller</span>.<span style="color: #7fffd4;">constant</span>.<span style="color: #98fb98;">AppConstants</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">context</span>.<span style="color: #98fb98;">SelectionContext</span>;

    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">interfaces</span>.<span style="color: #98fb98;">INotification</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">interfaces</span>.<span style="color: #98fb98;">IProxy</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">patterns</span>.<span style="color: #7fffd4;">mediator</span>.<span style="color: #98fb98;">Mediator</span>;

    <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">    * Mediate communications with the Application component.</span>
<span style="color: #ffa07a;">    */</span>
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ApplicationMediator</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">Mediator</span>
    {
        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Mediator registration name.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">NAME</span>:String = <span style="color: #ffa07a;">"ApplicationMediator"</span>;

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Construct with an instance of the application.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">ApplicationMediator</span>( app:StoryArchitect )
        {
            <span style="color: #00ffff;">super</span>( NAME, app );
        }
        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Called when Mediator is registered.</span>
<span style="color: #ffa07a;">        */</span>
        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">onRegister</span>():<span style="color: #98fb98;">void</span>
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Set the SelectionContext</span>
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">scProxy</span>:IProxy = facade.retrieveProxy( <span style="color: #7fffd4;">SelectionContext</span>.NAME );
            app.context = SelectionContext( scProxy.getData() );

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Set the initial display mode</span>
            app.setMode( <span style="color: #7fffd4;">StoryArchitect</span>.MODE_CHOOSER );
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Notifications this Mediator is interested in.</span>
<span style="color: #ffa07a;">        */</span>
        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">listNotificationInterests</span>():Array
        {
            <span style="color: #00ffff;">return</span> [ <span style="color: #7fffd4;">AppConstants</span>.SHOW_EDITOR,
            <span style="color: #7fffd4;">AppConstants</span>.SHOW_CHOOSER,
            ];
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Handle the notifications this Mediator is interested in.</span>
<span style="color: #ffa07a;">        */</span>
        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">handleNotification</span>( note:INotification ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #00ffff;">switch</span> ( note.getName() )
            {
                <span style="color: #00ffff;">case</span> <span style="color: #7fffd4;">AppConstants</span>.SHOW_EDITOR:
                    app.setMode( <span style="color: #7fffd4;">StoryArchitect</span>.MODE_EDITOR );
                    <span style="color: #00ffff;">break</span>;
                <span style="color: #00ffff;">case</span> <span style="color: #7fffd4;">AppConstants</span>.SHOW_CHOOSER:
                    app.setMode( <span style="color: #7fffd4;">StoryArchitect</span>.MODE_CHOOSER );
                    <span style="color: #00ffff;">break</span>;
            }
        }
        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Cast the View Component to the correct type</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">function</span> <span style="color: #98fb98;">get</span> <span style="color: #87cefa;">app</span>():StoryArchitect
        {
            <span style="color: #00ffff;">return</span> viewComponent as StoryArchitect;
        }
    }
}
</pre>
</div>
</div></li></ol></li>
<li><a id="orgheadline86"></a>其他 Mediator<br><div class="outline-text-5" id="text-1-6-5-2">
<ul class="org-ul">
<li>ChooserMediator<br></li>
<li>EditorMediator<br></li>
</ul>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline102" class="outline-3">
<h3 id="orgheadline102"><span class="section-number-3">1.7</span> 在 Commands 中实现业务逻辑</h3>
<div class="outline-text-3" id="text-1-7">
</div><div id="outline-container-orgheadline92" class="outline-4">
<h4 id="orgheadline92"><span class="section-number-4">1.7.1</span> 两种逻辑</h4>
<div class="outline-text-4" id="text-1-7-1">
</div><ol class="org-ol"><li><a id="orgheadline89"></a>领域逻辑 Domain Logic<br><div class="outline-text-5" id="text-1-7-1-1">
<ul class="org-ul">
<li>ValueObject,AbstarctProxy 以及它们的子类都属于领域逻辑。它主要处理领域模型数据结构的表示持久化。<br></li>
<li>ValueObjects 封装一些必要的逻辑来将数据表示为类型对象，并且提供属性让应用程序的其他部分操作。通常 ValueObjects 中只有属性，而没有逻辑；或者是当逻辑很简单时，它可以放在 Proxys 中；或者是当逻辑很多时，以 delegate 或者 helper 的形式来被 Proxys 使用。<br></li>
<li>Proxys 和 VOs 以可靠的方式来处理数据的持久化和获取。我们不会依赖 Commands 来保证数据的完整性，或者是直接负责数据的持久化。<br></li>
</ul>
</div></li>
<li><a id="orgheadline90"></a>业务逻辑 Business Logic<br><div class="outline-text-5" id="text-1-7-1-2">
<p>
业务逻辑必须处理应用程序的目标或者业务，满足各种使用需求。这些代码使用领域模型数据来工作，但是其目的是为了准备让 View 层来展示这些数据。它不属于 Model 层，当某个使用需求不需要时，可以去掉该使用需求相应的 Business Logic 代码，但是这些业务逻辑代码使用的领域数据不能去掉，因为这些数据可能还会被其他业务逻辑使用。<br>
</p>
</div></li>
<li><a id="orgheadline91"></a>为什么要区分领域逻辑和业务逻辑？<br><div class="outline-text-5" id="text-1-7-1-3">
<p>
这样提高了 Model 层的复用性。当需要复用 Model 时，只需要将相关的 ValueObjects、Proxys 打包到另一个应用程序中就可以了。而如果不区分这两者时，还需要在 Command 中分离出业务逻辑相关的代码，如果业务逻辑和领域逻辑混合在一起，分离就更加困难了。<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline93" class="outline-4">
<h4 id="orgheadline93"><span class="section-number-4">1.7.2</span> Command Life Cycle</h4>
<div class="outline-text-4" id="text-1-7-2">
<ul class="org-ul">
<li>Commands 通常在 ApplicationFacade 的 initializeController()函数中注册，在那里将一个或多个事件名称注册给一个 Command 类。<br></li>
<li>Command 没有 onRegister()和 onRemove()方法，它是一个短生命周期的角色。当任何一个 Command 所注册到的消息被其他角色发送时，就会实例化一个该 Command 类型的实例。一旦该 Command 完成它的工作，框架将不会保持该 Command 实例的任何引用，它就会被释放。所以，Command 应该是无状态的。<br></li>
<li>有两种类型的 Command：SimpleCommand 和 MacroCommand。<br></li>
<li>在 SimpleCommand 中，你只需要重写 execute()方法并且将你的逻辑放在其中。在构造函数结束后，会立即调用 execute，并会将触发它的 Notification 传递进来。<br></li>
<li>在 MacroCommand 中，你需要重写 initializeMacroCommand()方法，并且调用 addSubCommand()一次或多次，并且传递 Command 类名。当一个 MacroCommand 的 execute 被调用时，它会以先进先出的顺序调用各个子 Command。每个子 Command 可以是一个 SimpleCommand 也可以是一个 MacroCommand，他们都会接收到原始的 Notification。<br></li>
<li>Command 类有一个 facade 属性，它是 ApplicationFacade 的引用。可以使用该属性注册、删除或获取 Mediators、Proxys，并且可以注册和删除 Commands。这个属性是通过继承 Notifier 来获得的，所以 Command 还可以调用 sendNotification。<br></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline100" class="outline-4">
<h4 id="orgheadline100"><span class="section-number-4">1.7.3</span> 创建 Commands</h4>
<div class="outline-text-4" id="text-1-7-3">
</div><ol class="org-ol"><li><a id="orgheadline98"></a>StartupCommand<br><ol class="org-ol"><li><a id="orgheadline94"></a>Class<br><div class="outline-text-6" id="text-1-7-3-1-1">
<p>
StartupCommand.as<br>
</p>
</div></li>
<li><a id="orgheadline95"></a>Responsibilities<br></li>
<li><a id="orgheadline96"></a>Collaborations<br></li>
<li><a id="orgheadline97"></a>Code<br><div class="outline-text-6" id="text-1-7-3-1-4">
<div class="org-src-container">

<pre class="src src-java"><span style="color: #00ffff;">package</span> com.futurescale.sa.controller.command.<span style="color: #7fffd4;">startup</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">model</span>.<span style="color: #7fffd4;">proxy</span>.<span style="color: #98fb98;">CastProxy</span>;
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#30465;&#30053;&#37096;&#20998;&#23548;&#20837;&#31867;&#20195;&#30721;</span>
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">popup</span>.<span style="color: #7fffd4;">mediator</span>.<span style="color: #98fb98;">StoryPopupMediator</span>;

    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">interfaces</span>.<span style="color: #98fb98;">INotification</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">patterns</span>.<span style="color: #7fffd4;">command</span>.<span style="color: #98fb98;">SimpleCommand</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">patterns</span>.<span style="color: #7fffd4;">proxy</span>.<span style="color: #98fb98;">Proxy</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">StartupCommand</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">SimpleCommand</span>
    {
        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">execute</span>( note:INotification ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">MODEL PREPARATION PHASE</span>
            <span style="color: #ff0000;">//</span>
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Create and register the Proxys for the domain model.</span>
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">castProxy</span>:CastProxy = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">CastProxy</span>();
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">milieuProxy</span>:MilieuProxy = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">MilieuProxy</span>();
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">storyProxy</span>:StoryProxy = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">StoryProxy</span>( milieuProxy, castProxy );
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">seriesProxy</span>:SeriesProxy = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">SeriesProxy</span>( storyProxy, milieuProxy,
            castProxy);
            facade.registerProxy( castProxy );
            facade.registerProxy( milieuProxy );
            facade.registerProxy( storyProxy );
            facade.registerProxy( seriesProxy );

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">VIEW PREPARATION PHASE</span>
            <span style="color: #ff0000;">//</span>
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Get the application from the note body</span>
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">app</span>:StoryArchitect = StoryArchitect( note.getBody() );

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Register a convenience Proxy to hold the SelectionContext.</span>
            <span style="color: #ff0000;">//</span>
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">The SelectionContext tracks the selected items in the View</span>
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">and is not part of the domain model, but we can utilize</span>
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">the framework Proxy class as a quick way to cache this data</span>
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">entity used solely by the View and Controller tiers.</span>
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">selectionContext</span>:SelectionContext = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">SelectionContext</span>();
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">scProxy</span>:Proxy = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Proxy</span>( <span style="color: #7fffd4;">SelectionContext</span>.NAME, selectionContext );
            facade.registerProxy( scProxy );

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Mediate the initial View Components</span>
            facade.registerMediator( <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ApplicationMediator</span>( app ) );
            facade.registerMediator( <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">EditorMediator</span>( app.editor ) );
            facade.registerMediator( <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ChooserMediator</span>( app.chooser ) );

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Register the popup mediators</span>
            facade.registerMediator( <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">AlertPopupMediator</span>() );
            facade.registerMediator( <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ConfirmationPopupMediator</span>() );
            facade.registerMediator( <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">StoryPopupMediator</span>() );
            facade.registerMediator( <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">SeriesPopupMediator</span>() );
        }
    }
}
</pre>
</div>
</div></li></ol></li>
<li><a id="orgheadline99"></a>其他 Command<br><div class="outline-text-5" id="text-1-7-3-2">
<ul class="org-ul">
<li>EditStoryCommand<br></li>
<li>ApplySelectionCommand<br></li>
<li>RemoveSelectionCommand<br></li>
<li>ApplyChangesCommand<br></li>
<li>DiscardChangesCommand<br></li>
<li>AddItemCommand<br></li>
</ul>
</div></li></ol>
</div>
<div id="outline-container-orgheadline101" class="outline-4">
<h4 id="orgheadline101"><span class="section-number-4">1.7.4</span> 注册 Commands</h4>
<div class="outline-text-4" id="text-1-7-4">
<p>
我们不将 Commands 的注册也放在 StartupCommand 中的原因是，我们通常会在 ApplicationFacade 中重写 initializeController()来使用一个 STARTUP 消息来引导应用程序的启动。所以将所有的 Command 注册放在一个地方是合情合理的。<br>
当然，除了注册到 STARTUP 的 Command 以外，也可以将其他 Command 的注册移到 StartupCommand 中。将 StartCommand 变为一个 MacroCommand，调用 addSubCommand()方法，并且依次以 PrepareControllerCommand，PrepareModelCommand,PrepareViewCommand 为参数。<br>
先注册 Commands 的好处是，可以处理 Proxy 和 Mediator 在 onRegister()中触发的消息。<br>
</p>
<ul class="org-ul">
<li>TIPS<br></li>
</ul>
<p>
如果 Commands 没有被注册，他们就不会被执行。<br>
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;"> * Register the Commands.</span>
<span style="color: #ffa07a;"> */</span>
 override <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">initializeController</span>():<span style="color: #98fb98;">void</span>
 {
    <span style="color: #00ffff;">super</span>.initializeController();

    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Initiated by the App</span>
    registerCommand( <span style="color: #7fffd4;">AppConstants</span>.STARTUP, StartupCommand );
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Initiated by the Chooser</span>
    registerCommand( <span style="color: #7fffd4;">AppConstants</span>.MANAGE_STORY, ManageStoryCommand );
    registerCommand( <span style="color: #7fffd4;">AppConstants</span>.MANAGE_SERIES, ManageSeriesCommand );
    registerCommand( <span style="color: #7fffd4;">AppConstants</span>.EDIT_STORY, EditStoryCommand );
    registerCommand( <span style="color: #7fffd4;">StoryProxy</span>.STORY_ADDED, EditStoryCommand );
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Initiated by the Editor</span>
    registerCommand( <span style="color: #7fffd4;">AppConstants</span>.ADD_ITEM, AddItemCommand );
    registerCommand( <span style="color: #7fffd4;">AppConstants</span>.DELETE_ITEM, DeleteItemCommand );
    registerCommand( <span style="color: #7fffd4;">AppConstants</span>.APPLY_SELECTION, ApplySelectionCommand );
    registerCommand( <span style="color: #7fffd4;">AppConstants</span>.REMOVE_SELECTION, RemoveSelectionCommand);
    registerCommand( <span style="color: #7fffd4;">AppConstants</span>.DISCARD_CHANGES, DiscardChangesCommand );
    registerCommand( <span style="color: #7fffd4;">AppConstants</span>.APPLY_CHANGES, ApplyChangesCommand);
 }
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline107" class="outline-3">
<h3 id="orgheadline107"><span class="section-number-3">1.8</span> 关于 Model 的高级主题</h3>
<div class="outline-text-3" id="text-1-8">
</div><div id="outline-container-orgheadline105" class="outline-4">
<h4 id="orgheadline105"><span class="section-number-4">1.8.1</span> 处理异步行为</h4>
<div class="outline-text-4" id="text-1-8-1">
<p>
<a id="orgtarget2"></a><br>
在 Proxy 为同步的实例中，Command 中获取数据和对取得的数据的操作是在同一段代码中依次执行的。而在 Proxy 为异步的实例中，Command 中获取数据和对取得数据的操作是分开的。这意味着创建 App 的方式和 Proxy 采用了同步、异步还是混合的行为方式有关。这也是为什么需要在创建 Mediators 和 Commands 之前创建 Proxys 的原因之一。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline103"></a>分开调用者和响应者<br><div class="outline-text-5" id="text-1-8-1-1">
<p>
一个角色在 Proxy 上调用请求，另一个或多个角色(Mediators 和/或 Command)处理请求结果<br>
</p>
</div></li>
<li><a id="orgheadline104"></a>不分开调用者和响应者<br><div class="outline-text-5" id="text-1-8-1-2">
<p>
有时候我们希望可以有一个 SimpleCommand 实例，使用用它既可以调用 Proxy 上获取远端数据的方法，又可以接收异步的返回，从而使用获得的数据继续处理它的业务逻辑。这种方式的最大好处是从领域逻辑中解耦了 Command。<br>
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">ServiceRequest.as</span>
<span style="color: #00ffff;">package</span> com.futurescale.sa.model.<span style="color: #7fffd4;">request</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">patterns</span>.<span style="color: #7fffd4;">observer</span>.<span style="color: #98fb98;">Observer</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ServiceRequest</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">Observer</span>
    {
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">RESULT_OK</span>:String = <span style="color: #ffa07a;">"result/ok"</span>;
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">RESULT_FAIL</span>:String = <span style="color: #ffa07a;">"result/fail"</span>;

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">hasCallback</span>:Boolean = <span style="color: #7fffd4;">false</span>;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">requestData</span>:Object;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">resultData</span>:Object;

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">ServiceRequest</span>( requestData:Object = <span style="color: #7fffd4;">null</span>,
        callback:Function = <span style="color: #7fffd4;">null</span>,
        caller:Object = <span style="color: #7fffd4;">null</span> ) {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Store the Observer info</span>
            <span style="color: #00ffff;">super</span>( callback, caller );

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Store the request data</span>
            <span style="color: #00ffff;">this</span>.requestData = requestData;

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Remember whether complete Observer info was specified</span>
            hasCallback = ( callback != <span style="color: #7fffd4;">null</span> &amp;&amp; caller != <span style="color: #7fffd4;">null</span> );
        }
    }
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">SearchStoryCommand.as</span>
<span style="color: #00ffff;">package</span> com.futurescale.sa.controller.command.<span style="color: #7fffd4;">story</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">controller</span>.<span style="color: #7fffd4;">constant</span>.<span style="color: #98fb98;">AppConstants</span>;
    <span style="color: #ff0000;">//</span><span style="color: #ff0000;">&#30465;&#30053;......</span>

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">SearchStoryCommand</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">SimpleCommand</span>
    {
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">term</span>:String; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">the search term</span>

        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">execute</span>( note:INotification ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Get the search term from the note type</span>
            term = note.getType();

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Get the story stub from the note body</span>
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">storyVO</span>:StoryVO = StoryVO( note.getBody );

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Get the StoryReadingProxy</span>
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">proxy</span>:IProxy = facade.retrieveProxy( <span style="color: #7fffd4;">StoryReadingProxy</span>.NAME );
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">readerProxy</span>:StoryReadingProxy = StoryReadingProxy( proxy );

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Create the ServiceRequest</span>
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">request</span>:ServiceRequest =
            <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ServiceRequest</span>( storyVO, searchStory, <span style="color: #00ffff;">this</span> );

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Load the story</span>
            readerProxy.loadStory( request );
        }

        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">searchStory</span>( note:INotification ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Get the completed request from the note body</span>
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">request</span>:ServiceRequest = ServiceRequest( note.getBody() );

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Handle the result</span>
            <span style="color: #00ffff;">switch</span> ( note.getName() ) {

                <span style="color: #ff0000;">// </span><span style="color: #ff0000;">RESULT_OK: Search for first occurance, send note with result</span>
                <span style="color: #00ffff;">case</span> <span style="color: #7fffd4;">ServiceRequest</span>.RESULT_OK:
                    <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">story</span>:StoryVO = StoryVO( request.resultData );
                    <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">firstOccurance</span>:<span style="color: #98fb98;">int</span> = story.getText().indexOf( term );
                    sendNotification( <span style="color: #7fffd4;">AppConstants</span>.SEARCH_RESULT, firstOccurance );
                    <span style="color: #00ffff;">break</span>;

                <span style="color: #ff0000;">// </span><span style="color: #ff0000;">RESULT_FAIL: Send failure message in a note to be displayed</span>
                <span style="color: #00ffff;">case</span> <span style="color: #7fffd4;">ServiceRequest</span>.RESULT_FAIL:
                    <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">message</span>:String = String( request.resultData );
                    sendNotification( <span style="color: #7fffd4;">AppConstants</span>.REPORT_FAILURE, message );
                    <span style="color: #00ffff;">break</span>;
            }
        }
    }
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">StoryReadingProxy.as</span>
<span style="color: #00ffff;">package</span> com.futurescale.sa.model.<span style="color: #7fffd4;">proxy</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">model</span>.<span style="color: #7fffd4;">request</span>.<span style="color: #98fb98;">ServiceRequest</span>;
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#30465;&#30053;&#12290;&#12290;&#12290;&#12290;&#12290;&#12290;</span>

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">StoryReadingProxy</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">Proxy</span> <span style="color: #00ffff;">implements</span> <span style="color: #98fb98;">IResponder</span>
    {
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">NAME</span>:String = <span style="color: #ffa07a;">"StoryReadingProxy"</span>;
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">service</span>:RemoteObject;

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">StoryReadingProxy</span>()
        {
            <span style="color: #00ffff;">super</span>( NAME );
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Create the service at registration time</span>
        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">onRegister</span>():<span style="color: #98fb98;">void</span>
        {
            service = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">RemoteObject</span>(<span style="color: #ffa07a;">"StoryReadingService"</span>);
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Load Story from remote service</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">loadStory</span>( request:ServiceRequest ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">story</span>:StoryVO = request.requestData as StoryVO;
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">token</span>:AsyncToken = service.loadStory( story );
            token.request = request; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">hang onto the request</span>
            token.addResponder( <span style="color: #00ffff;">this</span> ); <span style="color: #ff0000;">// </span><span style="color: #ff0000;">this proxy will respond</span>
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Handle loaded story</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">result</span>( data:Object ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">event</span>:ResultEvent = ResultEvent(data);
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">token</span>:AsyncToken = event.token;
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">request</span>:ServiceRequest = token.request;
            request.resultData = event.result; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">the loaded story</span>
            <span style="color: #00ffff;">if</span> ( request.hasCallback ) {
                <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">note</span>:Notification;
                note = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Notification</span>( <span style="color: #7fffd4;">ServiceRequest</span>.RESULT_OK, request );
                request.notifyObserver( note );
            }
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Handle a failed story load</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">fault</span>( info:Object ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">event</span>:FaultEvent = FaultEvent(data);
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">token</span>:AsyncToken = event.token;
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">request</span>:ServiceRequest = token.request;
            request.resultData = event.message.toString();
            <span style="color: #00ffff;">if</span> ( request.hasCallback ) {
                <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">note</span>:Notification;
                note = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Notification</span>( <span style="color: #7fffd4;">ServiceRequest</span>.RESULT_FAIL, request );
                request.notifyObserver( note );
                Handling <span style="color: #98fb98;">Asynchronous</span> <span style="color: #eedd82;">Behavior</span> | 187
            }
        }
    }
}
</pre>
</div>
</div></li></ol>
</div>
<div id="outline-container-orgheadline106" class="outline-4">
<h4 id="orgheadline106"><span class="section-number-4">1.8.2</span> 复用 Model 层</h4>
<div class="outline-text-4" id="text-1-8-2">
<ol class="org-ol">
<li>如果你想在多个应用程序之间共享 Model 层；或者你想在单独的项目中对 Model 层进行测试；或者只是为了确保 Model 层完全独立于应用程序的其他部分可以被复用。你可以将 Model 层移到一个新的库工程中，将其独立出来。<br></li>
<li>独立出来后，可以为 Model 层的注册创建一个 PrepareModelCommand。相应的创建 PrepareViewCommand,PrepareControllerCommand，使的三者的注册相互独立。<br></li>
</ol>
</div>
</div>
</div>
<div id="outline-container-orgheadline111" class="outline-3">
<h3 id="orgheadline111"><span class="section-number-3">1.9</span> 关于 View 的高级主题</h3>
<div class="outline-text-3" id="text-1-9">
</div><div id="outline-container-orgheadline108" class="outline-4">
<h4 id="orgheadline108"><span class="section-number-4">1.9.1</span> Managing Pop Ups</h4>
<div class="outline-text-4" id="text-1-9-1">
<p>
PureMVC 处理弹出框的方式：<br>
<a id="orgtarget4"></a><br>
</p>
<ul class="org-ul">
<li>在任何 Command 中，当需要弹框时，创建一个弹框，设置事件监听，使用 PopUpManager 打开它将其放置在中心，从弹框内部或通过 Command 的事件处理来关闭它。<br>
<a id="orgtarget5"></a><br>
单例确实是魔鬼，因为我们可以在任何地方访问它，这使得我们的代码莫名其妙的相互依赖。<br></li>
<li>使用 PopMediator 来处理所有的弹框，创建弹框通过消息来传递给其他的 Command 或 Mediator。<br>
这种方式将所有和 PopUpManager 交互的逻辑放在了一个角色中，这非常好，但是这种方法将我们的逻辑分为两半，即分为了调用者和响应者，增加了逻辑的复杂度。<br></li>
<li>使用 PopMediator 来处理和 PopUpManager 的交互，但是使用 Command 来创建弹框，为弹框发送的事件设置监听，将创建的弹框通过消息发送给 PopMediator。<br>
这种方式可以让我们将大部分或所有使用逻辑放在一个 Command 中，但是这种方式将 Command 和 ViewComponent 耦合在了一起。Command 可以直接更新 ViewComponent，但是，在 Command 中创建和操作 ViewComponent 是无理由的。<br></li>
<li>我们在这里遇到的问题，其实和 Proxy 异步获取数据问题一样，这些都是异步边界交互。我们可以形式化请求并封装会掉机制到一个单独的 Request 类中，以这种方式来解决上面问题。<br></li>
</ul>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">PopupRequest.as</span>
<span style="color: #00ffff;">package</span> com.futurescale.sa.view.popup.<span style="color: #7fffd4;">request</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">flash</span>.<span style="color: #7fffd4;">display</span>.<span style="color: #98fb98;">DisplayObject</span>;
    <span style="color: #ff0000;">//</span><span style="color: #ff0000;">&#30465;&#30053;&#12290;&#12290;&#12290;&#12290;&#12290;&#12290;</span>

    <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">    * PopupRequest carries all the information necessary</span>
<span style="color: #ffa07a;">    * to request a popup be created by its mediator.</span>
<span style="color: #ffa07a;">    */</span>
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">PopupRequest</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">Observer</span>
    {
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Prefix for all request notification names</span>
        <span style="color: #00ffff;">private</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">NAME</span>:String = <span style="color: #ffa07a;">"PopupRequest/"</span>;
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Add new request notification names here...</span>
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">ALERT_POPUP</span>:String = NAME + <span style="color: #ffa07a;">"AlertPopup"</span>;
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">CONFIRMATION_POPUP</span>:String = NAME + <span style="color: #ffa07a;">"ConfirmationPopup"</span>;
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">SERIES_POPUP</span>:String = NAME + <span style="color: #ffa07a;">"SeriesPopup"</span>;
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">STORY_POPUP</span>:String = NAME + <span style="color: #ffa07a;">"StoryPopup"</span>;
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">CHARACTER_POPUP</span>:String = NAME + <span style="color: #ffa07a;">"CharacterPopup"</span>;
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">SETTING_POPUP</span>:String = NAME + <span style="color: #ffa07a;">"SettingPopup"</span>;

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Constructor.</span>
<span style="color: #ffa07a;">        * Example: new PopupRequest( handlePopupNotification, this );</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">PopupRequest</span>( callback:Function=<span style="color: #7fffd4;">null</span>,
        caller:Object=<span style="color: #7fffd4;">null</span> )
        {
            <span style="color: #00ffff;">super</span>( callback, caller );
            hasCallback = ( callback != <span style="color: #7fffd4;">null</span> &amp;&amp; caller != <span style="color: #7fffd4;">null</span> );
        }
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Request has a callback. (Set by constructor)</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">hasCallback</span>:Boolean = <span style="color: #7fffd4;">false</span>;

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Parent in the display list to open the popup over.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">parent</span>:DisplayObject =
        FlexGlobals.topLevelApplication as DisplayObject;

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Child list to place the popup in</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">childList</span>:String = <span style="color: #7fffd4;">PopUpManagerChildList</span>.PARENT;

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Should the popup be centered?</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">center</span>:Boolean = <span style="color: #7fffd4;">true</span>;

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Should the popup be modal?</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">modal</span>:Boolean = <span style="color: #7fffd4;">true</span>;

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Optional data for the popup to use,</span>
        <span style="color: #ff0000;">//</span><span style="color: #ff0000;">such as a title or width and height</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">data</span>:Object = {};

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Convenience method for creating a new Alert Request</span>
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">getAlertRequest</span>( message:String,
        windowTitle:String=<span style="color: #ffa07a;">"Alert"</span>,
        callback:Function=<span style="color: #7fffd4;">null</span>,
        caller:Object = <span style="color: #7fffd4;">null</span>):PopupRequest {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">request</span>:PopupRequest = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">PopupRequest</span>( callback, caller );
            request.childList = <span style="color: #7fffd4;">PopUpManagerChildList</span>.POPUP;
            request.data.windowTitle = windowTitle;
            request.data.message = message;
            <span style="color: #00ffff;">return</span> request;
        }
    }
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">PopupActionEvent.as</span>
<span style="color: #00ffff;">package</span> com.futurescale.sa.view.popup.<span style="color: #7fffd4;">event</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">flash</span>.<span style="color: #7fffd4;">events</span>.<span style="color: #98fb98;">Event</span>;
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">PopupActionEvent</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">Event</span>
    {
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Prefix for all popup action event types</span>
        <span style="color: #00ffff;">private</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">NAME</span>:String = <span style="color: #ffa07a;">"PopupEvent/"</span>;
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Add new event names here...</span>
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">CANCEL</span>:String = NAME + <span style="color: #ffa07a;">"cancel"</span>;
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">OK</span>:String = NAME + <span style="color: #ffa07a;">"ok"</span>;
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">ADD</span>:String = NAME + <span style="color: #ffa07a;">"add"</span>;
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">SAVE</span>:String = NAME + <span style="color: #ffa07a;">"save"</span>;
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">DELETE</span>:String = NAME + <span style="color: #ffa07a;">"delete"</span>;

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Constructor.</span>
<span style="color: #ffa07a;">        *</span>
<span style="color: #ffa07a;">        * Dispatched from a popup, captured by PopupMediatorBase and sent</span>
<span style="color: #ffa07a;">        * back to the original caller for interpretation.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">PopupActionEvent</span>( type:String,
        data:Object = <span style="color: #7fffd4;">null</span>,
        closePopup:Boolean=<span style="color: #7fffd4;">true</span> ) {
            <span style="color: #00ffff;">super</span>( type );
            <span style="color: #00ffff;">this</span>.data = data;
            <span style="color: #00ffff;">this</span>.closePopup = closePopup;
        }

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">data</span>:Object; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">optional data</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">closePopup</span>:Boolean; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">close the popup?</span>

    }
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">IPopup.as</span>
<span style="color: #00ffff;">package</span> com.futurescale.sa.view.popup.<span style="color: #7fffd4;">component</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">mx</span>.<span style="color: #7fffd4;">core</span>.<span style="color: #98fb98;">IFlexDisplayObject</span>;
    <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">    * Interface for popups</span>
<span style="color: #ffa07a;">    */</span>
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">interface</span> <span style="color: #98fb98;">IPopup</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">IFlexDisplayObject</span>
    {
        <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">setData</span>( data:Object ):<span style="color: #98fb98;">void</span>;
        <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">getEvents</span>():Array;
    }
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">ConfirmationPopup.mxml</span>
&lt;?xml version=<span style="color: #ffa07a;">"1.0"</span> encoding=<span style="color: #ffa07a;">"utf-8"</span>?&gt;
&lt;!-- CONFIRMATION POPUP --&gt;
&lt;s:TitleWindow xmlns:fx=<span style="color: #ffa07a;">"http://ns.adobe.com/mxml/2009"</span>
                xmlns:s=<span style="color: #ffa07a;">"library://ns.adobe.com/flex/spark"</span>
                title=<span style="color: #ffa07a;">"{windowTitle}"</span> width=<span style="color: #ffa07a;">"200"</span> height=<span style="color: #ffa07a;">"150"</span> close=<span style="color: #ffa07a;">"onCancel()"</span>
                <span style="color: #00ffff;">implements</span>=<span style="color: #ffa07a;">"com.futurescale.sa.view.popup.component.IPopup"</span>&gt;
    &lt;fx:Script&gt;
        &lt;![CDATA[
        <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">popup</span>.<span style="color: #7fffd4;">event</span>.<span style="color: #98fb98;">PopupActionEvent</span>;

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Required by IPopup interface</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">setData</span>( data:Object ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #00ffff;">if</span> ( data.windowTitle ) windowTitle = data.windowTitle;
            <span style="color: #00ffff;">if</span> ( data.promptText ) promptText = data.promptText;
            <span style="color: #00ffff;">if</span> ( data.width ) width = data.width;
            <span style="color: #00ffff;">if</span> ( data.height ) height = data.height;
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Required by IPopup interface</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">getEvents</span>( ):Array
        {
            <span style="color: #00ffff;">return</span> [ <span style="color: #7fffd4;">PopupActionEvent</span>.OK, <span style="color: #7fffd4;">PopupActionEvent</span>.CANCEL ]
        }

        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">onOk</span>():<span style="color: #98fb98;">void</span>
        {
            dispatchEvent( <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">PopupActionEvent</span>( <span style="color: #7fffd4;">PopupActionEvent</span>.OK ) )
        }

        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">onCancel</span>():<span style="color: #98fb98;">void</span>
        {
            dispatchEvent( <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">PopupActionEvent</span>( <span style="color: #7fffd4;">PopupActionEvent</span>.CANCEL ) )
        }

        [Bindable] <span style="color: #00ffff;">private</span> var windowTitle:String = <span style="color: #ffa07a;">"Confirmation"</span>;
        [Bindable] <span style="color: #00ffff;">private</span> var promptText:String = <span style="color: #ffa07a;">"Are you sure?"</span>;


    &lt;/fx:Script&gt;

    &lt;!-- LAYOUT --&gt;
    &lt;s:VGroup width=<span style="color: #ffa07a;">"100%"</span> height=<span style="color: #ffa07a;">"100%"</span> gap=<span style="color: #ffa07a;">"20"</span> horizontalAlign=<span style="color: #ffa07a;">"center"</span> verticalAlign=<span style="color: #ffa07a;">"middle"</span>&gt;

        &lt;!-- MESSAGE --&gt;
        &lt;s:Label text=<span style="color: #ffa07a;">"{promptText}"</span>/&gt;

        &lt;!-- BUTTONS --&gt;
        &lt;s:HGroup gap=<span style="color: #ffa07a;">"20"</span>&gt;
            &lt;s:Button label=<span style="color: #ffa07a;">"Cancel"</span> click=<span style="color: #ffa07a;">"onCancel()"</span>/&gt;
            &lt;s:Button label=<span style="color: #ffa07a;">"OK"</span> click=<span style="color: #ffa07a;">"onOk()"</span>/&gt;
        &lt;/s:HGroup&gt;
    &lt;/s:VGroup&gt;

&lt;/s:TitleWindow&gt;

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">AbstractPopupMediator.as</span>
<span style="color: #00ffff;">package</span> com.futurescale.sa.view.popup.<span style="color: #7fffd4;">mediator</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">popup</span>.<span style="color: #7fffd4;">component</span>.<span style="color: #98fb98;">IPopup</span>;
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#30465;&#30053;......</span>

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">AbstractPopupMediator</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">Mediator</span>
    {
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">AbstractPopupMediator</span>( name:String )
        {
            <span style="color: #00ffff;">super</span>( name );
        }
        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Override in subclass.</span>
<span style="color: #ffa07a;">        * Just create and the concrete popup.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">popupFactory</span>():IPopup
        {
            <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">null</span>;
        }
        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Called from the handleNotification method when a request notification</span>
<span style="color: #ffa07a;">        * is received. Creates the popup with popupFactory(), gives it the data</span>
<span style="color: #ffa07a;">        * from the request, calls setEventInterests to add the listeners, then</span>
<span style="color: #ffa07a;">        * pops up the popup and optionally centers it.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">openPopup</span>( ) : <span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">popup</span>:IPopup = popupFactory();
            <span style="color: #00ffff;">if</span> (popup) {
                popup.setData( request.data );
                setEventInterests( popup );
                PopUpManager.addPopUp( popup,
                request.parent,
                request.modal,
                request.childList );
                <span style="color: #00ffff;">if</span> ( request.center ) PopUpManager.centerPopUp( popup );
            }
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Called from openPopup when the request is set, before</span>
<span style="color: #ffa07a;">        * popping up the popup. Interrogates the popup for the</span>
<span style="color: #ffa07a;">        * events it will dispatch and sets listeners for each.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">setEventInterests</span>( popup:IPopup ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #00ffff;">for</span> each ( <span style="color: #98fb98;">var</span> <span style="color: #87cefa;">interest</span>:String in popup.getEvents() )
            {
                popup.addEventListener( interest,
                handlePopupAction,
                <span style="color: #7fffd4;">false</span>, 0, <span style="color: #7fffd4;">true</span> );
            }
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Subclasses will register a single notification interest,</span>
<span style="color: #ffa07a;">        * which will be handled here in the same way for all subclasses.</span>
<span style="color: #ffa07a;">        */</span>
        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">handleNotification</span>( note:INotification ):<span style="color: #98fb98;">void</span>
        {
            request = note.getBody() as PopupRequest;
            openPopup( );
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Subclasses will set a single notification interest,</span>
<span style="color: #ffa07a;">        * which will be handled here in the same way for all subclasses.</span>
<span style="color: #ffa07a;">        * The popup will be closed if specified by the event, and then the</span>
<span style="color: #ffa07a;">        * caller will be notified with the PopupEvent and the</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">handlePopupAction</span>( event:PopupActionEvent ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">popup</span>:IPopup = event.target as IPopup;
            <span style="color: #00ffff;">if</span> ( event.closePopup ) removePopup( popup );
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">note</span>:Notification = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Notification</span>( event.type, event );
            <span style="color: #00ffff;">if</span> (request.hasCallback) request.notifyObserver( note );
            request = <span style="color: #7fffd4;">null</span>;
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Called if the PopupActionEvent's closePopup property is true</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">removePopup</span>( popup:IPopup ):<span style="color: #98fb98;">void</span>
        {
            PopUpManager.removePopUp( popup );
        }
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">The request is stored temporarily while the popup is alive</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">so that the mediator can notify the caller.</span>
        <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">request</span>:PopupRequest;
    }
}
<span style="color: #ff0000;">//  </span><span style="color: #ff0000;">ConfirmationPopupMediator.as</span>
<span style="color: #00ffff;">package</span> com.futurescale.sa.view.popup.<span style="color: #7fffd4;">mediator</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">popup</span>.<span style="color: #7fffd4;">component</span>.<span style="color: #98fb98;">ConfirmationPopup</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">popup</span>.<span style="color: #7fffd4;">component</span>.<span style="color: #98fb98;">IPopup</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">popup</span>.<span style="color: #7fffd4;">request</span>.<span style="color: #98fb98;">PopupRequest</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ConfirmationPopupMediator</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">AbstractPopupMediator</span>
    {
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">NAME</span>:String = <span style="color: #ffa07a;">"ConfirmationPopupMediator"</span>;

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">ConfirmationPopupMediator</span>()
        {
            <span style="color: #00ffff;">super</span>( NAME );
        }

        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">listNotificationInterests</span>():Array
        {
            <span style="color: #00ffff;">return</span> [ <span style="color: #7fffd4;">PopupRequest</span>.CONFIRMATION_POPUP ];
        }
        override <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">popupFactory</span>():IPopup
        {
            <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ConfirmationPopup</span>();
        }
    }
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">ManageStoryCommand.as</span>
<span style="color: #00ffff;">package</span> com.futurescale.sa.controller.command.<span style="color: #7fffd4;">story</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">futurescale</span>.<span style="color: #7fffd4;">sa</span>.<span style="color: #7fffd4;">model</span>.<span style="color: #7fffd4;">proxy</span>.<span style="color: #98fb98;">StoryProxy</span>;
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#30465;&#30053;......</span>

    <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">    * Add, change or delete a Story.</span>
<span style="color: #ffa07a;">    *</span>
<span style="color: #ffa07a;">    * Popup the StoryPopup, and if the Story is</span>
<span style="color: #ffa07a;">    * added or saved, persist it. If deleted, confirm,</span>
<span style="color: #ffa07a;">    * then delete it.</span>
<span style="color: #ffa07a;">    */</span>
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ManageStoryCommand</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">SimpleCommand</span>
    {
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">story</span>:StoryVO;
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">storyProxy</span>:StoryProxy;

        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">execute</span>( note:INotification ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">storyStub</span>:StoryVO = StoryVO( note.getBody() ); <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Null if adding</span>
            storyProxy = StoryProxy( facade.retrieveProxy( <span style="color: #7fffd4;">StoryProxy</span>.NAME ) );
            <span style="color: #00ffff;">if</span> ( storyStub ) story = storyProxy.loadStory( storyStub );

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Request the popup</span>
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">request</span>:PopupRequest =
            <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">PopupRequest</span>( handleEditPopupNote, <span style="color: #00ffff;">this</span> );
            request.data.story = story;
            sendNotification( <span style="color: #7fffd4;">PopupRequest</span>.STORY_POPUP, request );
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Handle the popup actions.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">handleEditPopupNote</span>( actionNote:INotification ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">event</span>:PopupActionEvent = PopupActionEvent( actionNote.getBody() );
            story = StoryVO( event.data );
            <span style="color: #00ffff;">switch</span> ( actionNote.getName() )
            {
                <span style="color: #00ffff;">case</span> <span style="color: #7fffd4;">PopupActionEvent</span>.ADD:
                    storyProxy.addStory( story );
                    <span style="color: #00ffff;">break</span>;

                <span style="color: #00ffff;">case</span> <span style="color: #7fffd4;">PopupActionEvent</span>.SAVE:
                    storyProxy.saveStory( story );
                    <span style="color: #00ffff;">break</span>;

                <span style="color: #00ffff;">case</span> <span style="color: #7fffd4;">PopupActionEvent</span>.DELETE:
                    <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">confirm</span>:PopupRequest =
                    <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">PopupRequest</span>( handleConfirmPopupNote, <span style="color: #00ffff;">this</span> );
                    confirm.data.promptText = <span style="color: #ffa07a;">"Delete Story?"</span>;
                    sendNotification( <span style="color: #7fffd4;">PopupRequest</span>.CONFIRMATION_POPUP, confirm );
                    <span style="color: #00ffff;">break</span>;

                <span style="color: #00ffff;">case</span> <span style="color: #7fffd4;">PopupActionEvent</span>.CANCEL:
                    <span style="color: #00ffff;">break</span>;
            }
        }

        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Handle the ConfirmationPopup actions.</span>
<span style="color: #ffa07a;">        */</span>
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">handleConfirmPopupNote</span>( actionNote:INotification ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">event</span>:PopupActionEvent = PopupActionEvent( actionNote.getBody() );
            <span style="color: #00ffff;">switch</span> ( actionNote.getName() )
            {
                <span style="color: #00ffff;">case</span> <span style="color: #7fffd4;">PopupActionEvent</span>.OK:
                    storyProxy.deleteStory(story);
                    <span style="color: #00ffff;">break</span>;

                <span style="color: #00ffff;">case</span> <span style="color: #7fffd4;">PopupActionEvent</span>.CANCEL:
                    <span style="color: #00ffff;">break</span>;
            }
        }
    }
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline109" class="outline-4">
<h4 id="orgheadline109"><span class="section-number-4">1.9.2</span> 动态添加视图 Dynamically Adding View Components</h4>
<div class="outline-text-4" id="text-1-9-2">
<p>
下面的代码中实现了动态添加 Player 视图和 Fixture 视图<br>
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">GameBoard.mxml</span>
&lt;?xml version=<span style="color: #ffa07a;">"1.0"</span> encoding=<span style="color: #ffa07a;">"utf-8"</span>?&gt;
    &lt;s:Group xmlns:fx=<span style="color: #ffa07a;">"http://ns.adobe.com/mxml/2009"</span>
            xmlns:s=<span style="color: #ffa07a;">"library://ns.adobe.com/flex/spark"</span>
            xmlns:mx=<span style="color: #ffa07a;">"library://ns.adobe.com/flex/mx"</span>&gt;
        &lt;fx:Script&gt;
            &lt;![CDATA[
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Add a Player component to the center of the gameboard</span>
            <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> addPlayerToBoard( player:Player ):<span style="color: #98fb98;">void</span>
            {
                player.x = <span style="color: #00ffff;">this</span>.width/2;
                player.y = <span style="color: #00ffff;">this</span>.height/2;
                addElement( player );
            }

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Add a Fixture component to a random location on the gameboard</span>
            <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">addFixtureToBoard</span>( fixture:Fixture ):<span style="color: #98fb98;">void</span>
            {
                fixture.x = Math.random() * <span style="color: #00ffff;">this</span>.width;
                fixture.y = Math.random() * <span style="color: #00ffff;">this</span>.height;
                addElement( fixture );
            }
        &lt;/fx:Script&gt;
    &lt;/s:Group&gt;

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">GameBoardMediator.as</span>
<span style="color: #00ffff;">package</span> com.me.myapp.view.<span style="color: #7fffd4;">mediator</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">component</span>.<span style="color: #98fb98;">GameBoard</span>;
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#30465;&#30053;......</span>

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">GameBoardMediator</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">Mediator</span>
    {
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">NAME</span>:String = <span style="color: #ffa07a;">'GameBoardMediator'</span>;

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">GameBoardMediator</span>( viewComponent:GameBoard )
        {
            <span style="color: #00ffff;">super</span>( NAME, viewComponent );
        }

        <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">function</span> <span style="color: #98fb98;">get</span> <span style="color: #87cefa;">gameBoard</span>():GameBoard
        {
            <span style="color: #00ffff;">return</span> viewComponent as GameBoard;
        }

        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">listNotificationInterests</span>():Array
        {
            <span style="color: #00ffff;">return</span> [ <span style="color: #7fffd4;">AppConstants</span>.ADD_PLAYER,
            <span style="color: #7fffd4;">AppConstants</span>.ADD_FIXTURE ];
        }

        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">handleNotification</span>( note:INotification ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">handle inbound requests to add different components</span>
            <span style="color: #00ffff;">switch</span> (note.getName())
            {
                <span style="color: #00ffff;">case</span> <span style="color: #7fffd4;">AppConstants</span>.ADD_PLAYER:
                    <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">pConfig</span>:PlayerConfigVO = PlayerConfigVO( note.getBody() );
                    addPlayer( pConfig );
                    <span style="color: #00ffff;">break</span>;

                <span style="color: #00ffff;">case</span> <span style="color: #7fffd4;">AppConstants</span>.ADD_FIXTURE:
                    <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">fConfig</span>:FixtureConfigVO = FixtureConfigVO( note.getBody() );
                    addFixture( fConfig );
                    <span style="color: #00ffff;">break</span>;
            }
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Add a mediated Player component to the Gameboard</span>
        <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">addPlayer</span>( playerConfig:PlayerConfigVO ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Only add Player if it does not already exist</span>
            <span style="color: #00ffff;">if</span> ( ! facade.hasMediator( <span style="color: #7fffd4;">PlayerMediator</span>.NAME ) ) {
                <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">player</span>:Player = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Player</span>( playerConfig );
                <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">pm</span>:PlayerMediator = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">PlayerMediator</span>( player );
                facade.registerMediator( pm );
                gameBoard.addPlayerToBoard( player );
            }
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Add an unmediated Fixture component to the Gameboard</span>
        <span style="color: #00ffff;">protected</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">addFixture</span>( fixtureConfig:FixtureConfigVO ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">fixture</span>:Fixture = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Fixture</span>( fixtureConfig );
            gameBoard.addFixtureToBoard( fixture );
        }
    }
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline110" class="outline-4">
<h4 id="orgheadline110"><span class="section-number-4">1.9.3</span> 非长期存在的 ViewComponent 和 Mediator</h4>
<div class="outline-text-4" id="text-1-9-3">
<p>
在 Flex Mobile 中，你需要动态地调节你的视图，这些视图一直都在被创建和销毁。你的 Mediators 应该随着这些 View 的生命周期创建销毁。所以，整个应用程序中，只有 ApplicationMediator 是一个长期存在的 Mediator，其他 Mediator 都是临时存在的。<br>
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">IMyMobileApp.as</span>
<span style="color: #00ffff;">package</span> com.mycompany.myapp.<span style="color: #7fffd4;">view</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">model</span>.<span style="color: #7fffd4;">vo</span>.<span style="color: #98fb98;">InfoVO</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">flash</span>.<span style="color: #7fffd4;">events</span>.<span style="color: #98fb98;">IEventDispatcher</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">spark</span>.<span style="color: #7fffd4;">components</span>.<span style="color: #98fb98;">View</span>;
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">interface</span> <span style="color: #98fb98;">IMyMobileApp</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">IEventDispatcher</span>
    {
        <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">getActiveView</span>():View;
        <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">showLoginView</span>():<span style="color: #98fb98;">void</span>;
        <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">showListView</span>():<span style="color: #98fb98;">void</span>;
        <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">showInfoView</span>( infoVO:InfoVO ):<span style="color: #98fb98;">void</span>;
        <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">showFormView</span>():<span style="color: #98fb98;">void</span>;
    }
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">MyMobileApp.xml</span>
&lt;?xml version=<span style="color: #ffa07a;">"1.0"</span> encoding=<span style="color: #ffa07a;">"utf-8"</span>?&gt;
&lt;!-- FLEX MOBILE APPLICATION--&gt;
&lt;s:ViewNavigatorApplication
      firstView=<span style="color: #ffa07a;">"com.mycompany.myapp.view.component.LoginView"</span>
      <span style="color: #00ffff;">implements</span>=<span style="color: #ffa07a;">"com.mycompany.myapp.view.IMyMobileApp"</span>
      applicationComplete=<span style="color: #ffa07a;">"facade.startup(this)"</span>
      xmlns:s=<span style="color: #ffa07a;">"library://ns.adobe.com/flex/spark"</span>
      xmlns:fx=<span style="color: #ffa07a;">"http://ns.adobe.com/mxml/2009"</span>&gt;
    &lt;fx:Script&gt;
        &lt;![CDATA[
        <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #98fb98;">ApplicationFacade</span>;
        <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">model</span>.<span style="color: #7fffd4;">vo</span>.<span style="color: #98fb98;">InfoVO</span>;
        <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">component</span>.<span style="color: #98fb98;">InfoView</span>;
        <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">component</span>.<span style="color: #98fb98;">ListView</span>;
        <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">component</span>.<span style="color: #98fb98;">LoginView</span>;
        <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">component</span>.<span style="color: #98fb98;">FormView</span>;

        <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">spark</span>.<span style="color: #7fffd4;">components</span>.<span style="color: #98fb98;">View</span>;
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">RETRIEVE FACADE</span>
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">facade</span>:ApplicationFacade = ApplicationFacade.getInstance();
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">READ ONLY CONTEXT</span>
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">function</span> <span style="color: #98fb98;">get</span> <span style="color: #87cefa;">context</span>():String
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">if there is no context, then we are on the LoginView,</span>
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">set by firstView (we can't set a context for firstView)</span>
            <span style="color: #00ffff;">return</span> ( navigator.context ) ? String( navigator.context ) : LOGIN;
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">CONTEXT VALUES</span>
        <span style="color: #00ffff;">private</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">LOGIN</span>:String = <span style="color: #ffa07a;">"LoginView"</span>;
        <span style="color: #00ffff;">private</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">LIST</span>:String = <span style="color: #ffa07a;">"ListView"</span>;
        <span style="color: #00ffff;">private</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">FORM</span>:String = <span style="color: #ffa07a;">"FormView"</span>;
        <span style="color: #00ffff;">private</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">INFO</span>:String = <span style="color: #ffa07a;">"InfoView"</span>;
        <span style="color: #ff0000;">//</span><span style="color: #ff0000;">-----------------------------------------------------------</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Below methods satisfy IMyMobileApp interface</span>
        <span style="color: #ff0000;">//</span><span style="color: #ff0000;">-----------------------------------------------------------</span>

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">GET THE ACTIVE VIEW</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">getActiveView</span>():View
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Since the LoginView is specified as the 'firstView'</span>
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">we need to mediate it in the traditional way, which means</span>
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">we need to expose the active view</span>
            <span style="color: #00ffff;">return</span> navigator.activeView;
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">SHOW THE LOGIN VIEW</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">showLoginView</span>( ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Only return to LoginView if we're not already on it</span>
            <span style="color: #00ffff;">if</span> ( context != LOGIN ) navigator.popToFirstView();
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">SHOW THE LIST VIEW</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">showListView</span>( ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Only act if we're not already on the ListView</span>
            <span style="color: #00ffff;">if</span> ( context != LIST )
            {
                <span style="color: #ff0000;">// </span><span style="color: #ff0000;">If returning (from Info or Form views), just pop</span>
                <span style="color: #ff0000;">// </span><span style="color: #ff0000;">otherwise push a new ListView</span>
                <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">returning</span>:Boolean = ( context == INFO || context == FORM );
                <span style="color: #00ffff;">if</span> ( returning ) {
                    navigator.popView();
                } <span style="color: #00ffff;">else</span> {
                    navigator.pushView( ListView, <span style="color: #7fffd4;">null</span>, LIST );
                }
            }
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">SHOW THE FORM VIEW</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">showFormView</span>( ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Only push a FormView if we're not already on it</span>
            <span style="color: #00ffff;">if</span> ( context != FORM )
            navigator.pushView( FormView, <span style="color: #7fffd4;">null</span>, FORM );
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">SHOW THE INFO VIEW (PASSING IN INFO VO)</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">showInfoView</span>( infoVO:InfoVO ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Only push an InfoView if we're not already on it</span>
            <span style="color: #00ffff;">if</span> ( context != INFO )
            navigator.pushView( InfoView, infoVO, INFO );
        }
    &lt;/fx:Script&gt;

&lt;/s:ViewNavigatorApplication&gt;

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">ApplicationFacade.as</span>
<span style="color: #00ffff;">package</span> com.mycompany.<span style="color: #7fffd4;">myapp</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">controller</span>.<span style="color: #7fffd4;">command</span>.<span style="color: #98fb98;">StartupCommand</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">controller</span>.<span style="color: #7fffd4;">constants</span>.<span style="color: #98fb98;">AppConstants</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #98fb98;">IMyMobileApp</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ApplicationFacade</span>
    {
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">getInstance</span>() : ApplicationFacade
        {
            <span style="color: #00ffff;">if</span> ( instance == <span style="color: #7fffd4;">null</span> ) {
                instance = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ApplicationFacade</span>();
            }
            <span style="color: #00ffff;">return</span> ApplicationFacade( instance );
        }

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">startup</span>( app:IMyMobileApp ):<span style="color: #98fb98;">void</span>
        {
            registerCommand( <span style="color: #7fffd4;">AppConstants</span>.STARTUP, StartupCommand );
            sendNotification( <span style="color: #7fffd4;">ViewerConstants</span>.STARTUP, app );
        }
    }
}

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">StartupCommand.as</span>
<span style="color: #00ffff;">package</span> com.mycompany.myapp.controller.<span style="color: #7fffd4;">command</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">model</span>.<span style="color: #7fffd4;">proxy</span>.<span style="color: #98fb98;">InfoProxy</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">model</span>.<span style="color: #7fffd4;">proxy</span>.<span style="color: #98fb98;">ThingProxy</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #98fb98;">IMyMobileApp</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">mediator</span>.<span style="color: #98fb98;">ApplicationMediator</span>;

    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">interfaces</span>.<span style="color: #98fb98;">INotification</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">patterns</span>.<span style="color: #7fffd4;">command</span>.<span style="color: #98fb98;">SimpleCommand</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">StartupCommand</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">SimpleCommand</span>
    {
        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">execute</span>( note : INotification ) : <span style="color: #98fb98;">void</span>
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Prepare the Controller</span>
            facade.registerCommand( <span style="color: #7fffd4;">AppConstants</span>.MEDIATE_VIEW, MediateViewCommand );

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Prepare the Model</span>
            facade.registerProxy( <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ThingProxy</span>( ) );
            facade.registerProxy( <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">InfoProxy</span>( ) );
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Prepare the View</span>
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">app</span>:IMyMobileApp = IMobileApp( note.getBody() );
            facade.registerMediator( <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ApplicationMediator</span>( app ) );
        }
    }
}

<span style="color: #ff0000;">//</span><span style="color: #ff0000;">ApplicationMediator.as</span>
<span style="color: #00ffff;">package</span> com.mycompany.myapp.view.<span style="color: #7fffd4;">mediator</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">controller</span>.<span style="color: #7fffd4;">constants</span>.<span style="color: #98fb98;">AppConstants</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #98fb98;">IMyMobileApp</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">model</span>.<span style="color: #7fffd4;">vo</span>.<span style="color: #98fb98;">InfoVO</span>;

    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">flash</span>.<span style="color: #7fffd4;">events</span>.<span style="color: #98fb98;">Event</span>;

    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">interfaces</span>.<span style="color: #98fb98;">INotification</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">patterns</span>.<span style="color: #7fffd4;">mediator</span>.<span style="color: #98fb98;">Mediator</span>;

    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">spark</span>.<span style="color: #7fffd4;">components</span>.<span style="color: #98fb98;">View</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ApplicationMediator</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">Mediator</span>
    {
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">NAME</span>:String = <span style="color: #ffa07a;">"ApplicationMediator"</span>;
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">CONSTRUCTOR - HANDLE COMPONENT BY ITS INTERFACE</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">ApplicationMediator</span>( app:IMyMobileApp )
        {
            <span style="color: #00ffff;">super</span>( NAME, app );
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">CALLED AT REGISTRATION - LIST NOTIFICATION INTERESTS</span>
        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">listNotificationInterests</span>():Array
        {
            <span style="color: #00ffff;">return</span> [ <span style="color: #7fffd4;">AppConstants</span>.SHOW_LOGIN,
            <span style="color: #7fffd4;">AppConstants</span>.SHOW_LIST,
            <span style="color: #7fffd4;">AppConstants</span>.SHOW_FORM,
            <span style="color: #7fffd4;">AppConstants</span>.SHOW_INFO,
            ];
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">CALLED AT REGISTRATION - LISTEN FOR EVENTS, MEDIATE FIRST VIEW</span>
        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">onRegister</span>():<span style="color: #98fb98;">void</span>
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Listen for Views to be created</span>
            app.addEventListener( <span style="color: #7fffd4;">Event</span>.ADDED, handleAdded );

            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Mediate the firstView</span>
            sendNotification( <span style="color: #7fffd4;">AppConstants</span>.MEDIATE_VIEW, app.getActiveView() );
        }
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">HANDLE NOTIFICATIONS TO CHANGE VIEWS</span>
        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">handleNotification</span>( note:INotification ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #00ffff;">switch</span> ( note.getName() )
            {
                <span style="color: #00ffff;">case</span> <span style="color: #7fffd4;">AppConstants</span>.SHOW_LOGIN:
                    app.showLoginView();
                    <span style="color: #00ffff;">break</span>;
                <span style="color: #00ffff;">case</span> <span style="color: #7fffd4;">AppConstants</span>.SHOW_LIST:
                    app.showListView();
                    <span style="color: #00ffff;">break</span>;
                <span style="color: #00ffff;">case</span> <span style="color: #7fffd4;">AppConstants</span>.SHOW_FORM:
                    app.showFormView();
                    <span style="color: #00ffff;">break</span>;
                <span style="color: #00ffff;">case</span> <span style="color: #7fffd4;">AppConstants</span>.SHOW_INFO:
                    app.showInfoView( InfoVO( note.getBody() ) );
                    <span style="color: #00ffff;">break</span>;
            }
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">HANDLE ADDED EVENTS</span>
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">handleAdded</span>( event:Event ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Only act on Views</span>
            <span style="color: #00ffff;">if</span> ( event.target <span style="color: #98fb98;">is</span> <span style="color: #eedd82;">View</span> ) {
                sendNotification( <span style="color: #7fffd4;">AppConstants</span>.MEDIATE_VIEW, event.target );
            }
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">CAST THE VIEW COMPONENT TO THE PROPER TYPE</span>
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">function</span> <span style="color: #98fb98;">get</span> <span style="color: #87cefa;">app</span>():IMyMobileApp
        {
            <span style="color: #00ffff;">return</span> viewComponent as IMyMobileApp;
        }
    }
}

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">MediateViewCommand.as</span>
<span style="color: #00ffff;">package</span> com.mycompany.myapp.controller.<span style="color: #7fffd4;">command</span>
{
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">component</span>.<span style="color: #98fb98;">InfoView</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">component</span>.<span style="color: #98fb98;">ListView</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">component</span>.<span style="color: #98fb98;">LoginView</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">component</span>.<span style="color: #98fb98;">FormView</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">mediator</span>.<span style="color: #98fb98;">InfoViewMediator</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">mediator</span>.<span style="color: #98fb98;">ListViewMediator</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">mediator</span>.<span style="color: #98fb98;">LoginViewMediator</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">com</span>.<span style="color: #7fffd4;">mycompany</span>.<span style="color: #7fffd4;">myapp</span>.<span style="color: #7fffd4;">view</span>.<span style="color: #7fffd4;">mediator</span>.<span style="color: #98fb98;">FormViewMediator</span>;

    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">interfaces</span>.<span style="color: #98fb98;">INotification</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">interfaces</span>.<span style="color: #98fb98;">IMediator</span>;
    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">org</span>.<span style="color: #7fffd4;">puremvc</span>.<span style="color: #7fffd4;">as3</span>.<span style="color: #7fffd4;">patterns</span>.<span style="color: #7fffd4;">command</span>.<span style="color: #98fb98;">SimpleCommand</span>;

    <span style="color: #00ffff;">import</span> <span style="color: #7fffd4;">spark</span>.<span style="color: #7fffd4;">components</span>.<span style="color: #98fb98;">View</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">MediateViewCommand</span> <span style="color: #00ffff;">extends</span> <span style="color: #98fb98;">SimpleCommand</span>
    {
        <span style="color: #ffa07a;">/**</span>
<span style="color: #ffa07a;">        * Each View is destroyed once it is moved away from,</span>
<span style="color: #ffa07a;">        * thus Mediators must also be transient. Any existing</span>
<span style="color: #ffa07a;">        * Mediator is removed, and a new one registered</span>
<span style="color: #ffa07a;">        * along with the new View. Any additional Mediators</span>
<span style="color: #ffa07a;">        * associated with the children of these Views should be</span>
<span style="color: #ffa07a;">        * registered and removed in the onRegister() and onRemove()</span>
<span style="color: #ffa07a;">        * methods of the View's Mediator.</span>
<span style="color: #ffa07a;">        */</span>
        override <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">function</span> <span style="color: #87cefa;">execute</span>( note:INotification ):<span style="color: #98fb98;">void</span>
        {
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">view</span>:View = View( note.getBody() );
            <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">mediator</span>:IMediator;
            <span style="color: #00ffff;">switch</span> ( view.className )
            {
                <span style="color: #00ffff;">case</span> <span style="color: #ffa07a;">"LoginView"</span>:
                    facade.removeMediator( <span style="color: #7fffd4;">LoginViewMediator</span>.NAME );
                    mediator = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">LoginViewMediator</span>( view <span style="color: #98fb98;">as</span> <span style="color: #eedd82;">LoginView</span> );
                    <span style="color: #00ffff;">break</span>;
                <span style="color: #00ffff;">case</span> <span style="color: #ffa07a;">"ListView"</span>:
                    facade.removeMediator( <span style="color: #7fffd4;">ListViewMediator</span>.NAME );
                    mediator = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ListViewMediator</span>( view <span style="color: #98fb98;">as</span> <span style="color: #eedd82;">ListView</span> );
                    <span style="color: #00ffff;">break</span>;
                <span style="color: #00ffff;">case</span> <span style="color: #ffa07a;">"InfoView"</span>:
                    facade.removeMediator( <span style="color: #7fffd4;">InfoViewMediator</span>.NAME );
                    mediator = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">InfoViewMediator</span>( view <span style="color: #98fb98;">as</span> <span style="color: #eedd82;">InfoView</span> );
                    <span style="color: #00ffff;">break</span>;
                <span style="color: #00ffff;">case</span> <span style="color: #ffa07a;">"FormView"</span>:
                    facade.removeMediator( <span style="color: #7fffd4;">FormViewMediator</span>.NAME );
                    mediator = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">FormViewMediator</span>( view <span style="color: #98fb98;">as</span> <span style="color: #eedd82;">FormView</span> );
                    <span style="color: #00ffff;">break</span>;
            }
            <span style="color: #00ffff;">if</span> (mediator) facade.registerMediator( mediator );
        }
    }
}

<span style="color: #ff0000;">//</span><span style="color: #ff0000;">ListView.xml</span>
&lt;?xml version=<span style="color: #ffa07a;">"1.0"</span> encoding=<span style="color: #ffa07a;">"utf-8"</span>?&gt;
    &lt;!-- LIST VIEW --&gt;
    &lt;s:View xmlns:s=<span style="color: #ffa07a;">"library://ns.adobe.com/flex/spark"</span>
            xmlns:fx=<span style="color: #ffa07a;">"http://ns.adobe.com/mxml/2009"</span>
            destructionPolicy=<span style="color: #ffa07a;">"never"</span>&gt;

    &lt;!-- LIST STUFF HAPPENS HERE --&gt;

    &lt;/s:View&gt;
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline117" class="outline-2">
<h2 id="orgheadline117"><span class="section-number-2">2</span> FAQ</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-orgheadline113" class="outline-4">
<h4 id="orgheadline113"><span class="section-number-4">2.0.1</span> PureMVC 中个元素的创建顺序是什么？为什么要遵守 PureMVC 特定的元素创建顺序？</h4>
<div class="outline-text-4" id="text-2-0-1">
<p>
<a href="#orgtarget1">按照从外到内的顺序进行创建</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline114" class="outline-4">
<h4 id="orgheadline114"><span class="section-number-4">2.0.2</span> 在该书中 SelectContext 属于 PureMVC 中的什么角色？</h4>
<div class="outline-text-4" id="text-2-0-2">
<p>
SelectContext 不属于 PureMVC 的任何角色，它属于一个 ValueObject 类，SelectContext 的对象会被存储在一个 Proxy 中。<br>
<a href="#orgtarget3">SelectionContext</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline115" class="outline-4">
<h4 id="orgheadline115"><span class="section-number-4">2.0.3</span> 为什么要尽量减少使用单例模式？</h4>
<div class="outline-text-4" id="text-2-0-3">
<p>
<a href="#orgtarget5">单例是魔鬼</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline116" class="outline-4">
<h4 id="orgheadline116"><span class="section-number-4">2.0.4</span> PureMVC 如何处理弹框相关的逻辑？</h4>
<div class="outline-text-4" id="text-2-0-4">
<p>
<a href="#orgtarget4">处理弹出框的各种方式</a><br>
</p>
</div>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> architecture </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mvc </tag>
            
            <tag> software architecture </tag>
            
            <tag> book </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Move Sync]]></title>
      <url>http://wolfand11.coding.me/2017/01/05/gameplay/MoveSync/</url>
      <content type="html"><![CDATA[

<p>
最近在看移动同步相关的东西，发现网上已经有人写了很好的文章。这里就只做一些简单思考和学习笔记吧。文章结尾处有原文章地址。<br>
</p>
<a id="more"></a>
<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><span class="section-number-2">1</span> 网络同步演示</h2>
<div class="outline-text-2" id="text-1">
<p>
原始文章中，网络延迟模拟的方法是，发送数据时，随机一个时间间隔，在该时间间隔以后处理发送的数据，这种方式无法保证模拟的网络数据按照发送的顺序被依次处理。<br>
我采用了拥堵概率（delayRate）来模拟网络延迟，发送数据时，将数据放入一个队列中，取数据时，随机一个 0 到 1 的数值 randValue：<br>
如果 randValue&lt;delayRate 则说明产生拥堵，本次循环中不处理数据；<br>
如果 randValue&gt;delayRate 则说明没产生拥堵，本次循环中处理数据；<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline11" class="outline-2">
<h2 id="orgheadline11"><span class="section-number-2">2</span> 状态更新及航位预测法</h2>
<div class="outline-text-2" id="text-2">
<p>
引入原因： 状态更新和航位预测用来降低网络同步频率，从而降低服务器响应压力。<br>
</p>
</div>
<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2"><span class="section-number-3">2.1</span> 状态更新</h3>
<div class="outline-text-3" id="text-2-1">
<p>
在同步数据之前，首先判断状态（速度，加速度，方向）是否改变，如果没有改变则不需要进行同步。<br>
如果存在加速度，需要做下面一些判断，任何判断为是，则需要进行同步：<br>
</p>
<ul class="org-ul">
<li>判断加速度是否改变<br></li>
<li>判断速度大小是否改变，用前一次同步的状态来计算出当前的速度，判断计算出来的当前速度和真实的当前速度是否相等<br></li>
<li>判断方向是否改变<br></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3"><span class="section-number-3">2.2</span> 航位预测</h3>
<div class="outline-text-3" id="text-2-2">
<p>
在同步数据之前，按照前一次同步过的状态，预计算出现在的位置。如果预计算得到的位置和真实的位置的差值超过某个阙值，则进行状态同步。<br>
在实现航位预测时，增加了 lastSyncedMoveInfo 变量，来存储前一次同步过的移动信息。不能直接使用 lastMoveInfo 的原因是，如果两帧之间的变化小于阙值时，不会改变 lastSyncedMoveInfo，但是，lastMoveInfo 是需要改变的。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4"><span class="section-number-3">2.3</span> 航位预测是状态更新的补充，航位预测可以避免累积错误。</h3>
<div class="outline-text-3" id="text-2-3">
<p>
在包含状态更新的情况下，是否需要航位预测？<br>
状态更新是否存在累积错误？<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline10" class="outline-3">
<h3 id="orgheadline10"><span class="section-number-3">2.4</span> 平滑算法</h3>
<div class="outline-text-3" id="text-2-4">
</div><div id="outline-container-orgheadline5" class="outline-4">
<h4 id="orgheadline5"><span class="section-number-4">2.4.1</span> 引入原因：</h4>
<div class="outline-text-4" id="text-2-4-1">
<p>
当当前位置和目标位置的差值大于一帧移动的距离时（航位预测法中预测位置和目标位置），为了避免闪现（跳跃）可以采用平滑算法，将角色从当前位置平滑移动到目标位置。<br>
</p>
<ul class="org-ul">
<li>为什么会产生当前位置和目标位置差值大于一帧移动的距离的情况？<br></li>
</ul>
<p>
这是因为网络延迟时间的变化造成的，例如，一般情况下网络延迟为 60ms，当网络情况很好时网络延迟为 30ms，当网络情况不好时网络延迟为 120ms 或更多。举例如下：<br>
obj1  在 t=0ms   时，开始移动，速度为 2m/s，方向为（1,0）<br>
sobj1 在 t0=30ms  时，开始移动，速度为 2m/s，方向为（1,0） &#x2013; 网络情况良好<br>
sobj1 在 t0=60ms  时，开始移动，速度为 2m/s，方向为（1,0） &#x2013; 网络情况一般<br>
sobj1 在 t0=120ms 时，开始移动，速度为 2m/s，方向为（1,0） &#x2013; 网络情况不好<br>
</p>

<p>
obj1  在 t=10ms  时，速度变为 4m/s，方向为（0,1）<br>
sobj1 在 t1=t0+10ms+30ms  时，速度变为 4m/s，方向为（0,1）<br>
      &#x2013; 网络情况良好 t1 可能为（30+10+30） （60+10+30） （120+10+30）<br>
sobj1 在 t1=t0+10ms+60ms  时，速度变为 4m/s，方向为（0,1）<br>
      &#x2013; 网络情况一般 t1 可能为（30+10+60） （60+10+60） （120+10+60）<br>
sobj1 在 t1=t0+10ms+120ms 时，速度变为 4m/s，方向为（0,1）<br>
      &#x2013; 网络情况不好 t1 可能为（30+10+120） （60+10+120） （120+10+120）<br>
从上面分析可以看出，obj1 在速度为 2m/s，方向为（1,0）状态下只运动了 10ms，当网络状态从良好变为一般时，sobj1 在相同状态下运动了 10ms+(60-30)ms；当网络状态良好变为不好时，sobj1 在相同状态下运动了 10ms+(120-30)ms；<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline6" class="outline-4">
<h4 id="orgheadline6"><span class="section-number-4">2.4.2</span> 平滑处理中有以下几点需要注意：</h4>
<div class="outline-text-4" id="text-2-4-2">
<ul class="org-ul">
<li>目标位置 不是当前从服务器发来的位置，而是发来的位置加上延迟时间内又移动的距离，所以目标位置稍远一些。<br></li>
<li>平滑时间<br></li>
</ul>
<p>
平滑时间为当前时间和同步数据包被发送时的时间差，这个值和网络延迟相关。所以延迟越打平滑时间越长。<br>
平滑时间的选取可以采用最近 N 次统计的网络延迟时间的加权平均值<br>
</p>
<ul class="org-ul">
<li>平滑过程中收到新的同步数据包，则停止当前平滑操作，按照新接收到的数据进行新的平滑操作。<br></li>
<li>插值会出现平滑方向和物体朝向（速度方向）不一致的情况。<br></li>
</ul>
<p>
速度方向和变化的位移方向是一致的，只需要在平滑的过程中依据变化的位移方向修改物体朝向即可。<br>
</p>
<ul class="org-ul">
<li>插值中遇到障碍点的处理。<br></li>
</ul>
<p>
插值之前对 当前位置 到 目标位置进行寻路，产生多个路径点，再在这些路径点直接进行插值。<br>
</p>
<ul class="org-ul">
<li>停止不自然问题<br></li>
</ul>
<p>
因为网络延迟不稳定的缘故，所以，物体会或多或少行走 deltaDelayTime*velocity 距离。平滑这部分距离的时候，应该让平滑时间短一点，避免慢悠悠的停下来。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline7" class="outline-4">
<h4 id="orgheadline7"><span class="section-number-4">2.4.3</span> 线性插值</h4>
<div class="outline-text-4" id="text-2-4-3">
<p>
线性插值代码：<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">var</span> <span style="color: #eedd82;">smoothTime</span> = smoothTimer = curTime - svrData.sendTime;
<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">targetPos</span> = svrData.position + svrData.velocity * smoothTime;
<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">smoothLength</span> = targetPos - startPos;

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#22312;&#27599;&#19968;&#24103;</span>
<span style="color: #00ffff;">if</span> (smoothTimer&gt;0)
 {
     smoothTimer -= deltaTime;
     curPos = curPos + deltaTime / smoothTime * smoothLength;
 }
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline8" class="outline-4">
<h4 id="orgheadline8"><span class="section-number-4">2.4.4</span> 立方样条插值</h4>
<div class="outline-text-4" id="text-2-4-4">
<p>
实现立方样条插值需要 4 个坐标点：<br>
坐标点 0：开始位置（即本地当前位置）<br>
坐标点 1：坐标 0 经过一定时间后的位置（速度为当前速度）<br>
坐标点 3：最终位置（即网络协议发送的最新位置加上一定的延迟时间后的位置）<br>
坐标点 2：坐标 4 反方向移动一定时间后的位置（速度为网络最新速度）<br>
插值坐标公式为：<br>
x = At<sup>3</sup> + Bt<sup>2</sup> + Ct + D<br>
y = Et<sup>3</sup> + Ft<sup>2</sup> + Gt + H<br>
其中<br>
A = x<sub>3</sub> - 3x<sub>2</sub> + 3x<sub>1</sub> - x<sub>0</sub><br>
B = 3x<sub>2</sub> - 6x<sub>1</sub> + 3x<sub>0</sub><br>
C = 3x<sub>1</sub> - 3x<sub>0</sub><br>
D = x<sub>0</sub><br>
E = y<sub>3</sub> - 3y<sub>2</sub> + 3y<sub>1</sub> - x<sub>0</sub><br>
F = 3y<sub>2</sub> - 6y<sub>1</sub> + 3y<sub>0</sub><br>
G = 3y<sub>1</sub> - 3y<sub>0</sub><br>
H = y<sub>0</sub><br>
</p>
</div>
</div>

<div id="outline-container-orgheadline9" class="outline-4">
<h4 id="orgheadline9"><span class="section-number-4">2.4.5</span> 加权平均插值</h4>
<div class="outline-text-4" id="text-2-4-5">
<p>
curPos = curPos + (targetPos - curPos)/slowdownFactor<br>
slowdownFactor 为缓动因子，slowdownFactor 越大，平滑速度越慢。<br>
</p>

<p>
加权平均插值的好处是不需要记录 dt。<br>
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline12" class="outline-2">
<h2 id="orgheadline12"><span class="section-number-2">3</span> 帧锁定算法</h2>
<div class="outline-text-2" id="text-3">
<p>
帧锁定同步算法描述：<br>
帧锁定同步分为两个部分，第一部分是发送客户端的移动信息，第二部分是接收服务器返回的移动信息，并利用该信息执行移动逻辑。具体实现参考下面代码即可。<br>
</p>

<p>
帧锁定同步算法代码：<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">svrKeyframe</span> = 0;
<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">syncInterval</span> = 5;
<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">sendCurFrame</span> = 0;
<span style="color: #98fb98;">List</span>&lt;MoveInfo&gt; <span style="color: #eedd82;">infoList</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">List</span>&lt;MoveInfo&gt;();
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">ProcessClientMoveControl</span>()
{
    <span style="color: #00ffff;">if</span> (sendCurFrame &lt;= svrKeyframe + syncInterval)
    {
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">curMoveInfo &#20026;&#24403;&#21069;&#24103; &#25910;&#38598;&#21040;&#30340;&#31227;&#21160;&#20449;&#24687;</span>
        infoList.Add(curMoveInfo);

        <span style="color: #00ffff;">if</span> (sendCurFrame == svrKeyframe + syncInterval)
        {
            <span style="color: #98fb98;">SyncData</span> <span style="color: #eedd82;">syncData</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">SyncData</span>();
            syncData.infoList = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">List</span>&lt;MoveInfo&gt;(infoList.ToArray());
            syncData.keyframe = sendCurFrame;
            Send(syncData);

            infoList.Clear();
        }
        sendCurFrame++;
    }
    <span style="color: #00ffff;">else</span>
    {
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">block game. wait for other player</span>
    }
}

<span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">SyncData</span>&gt; <span style="color: #eedd82;">syncDataList</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">SyncData</span>&gt;();
<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">receiveCurFrame</span> = 0;
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">UpdateClientMove</span>()
{
    <span style="color: #98fb98;">SyncData</span> <span style="color: #eedd82;">syncData</span> = Receive();
    <span style="color: #00ffff;">if</span> (syncData!=<span style="color: #7fffd4;">null</span>)
    {
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#26356;&#26032; &#20851;&#38190;&#24103;&#32534;&#21495;</span>
        svrKeyframe = syncData.keyframe;
        syncDataList.Add(syncData);
    }

    <span style="color: #00ffff;">if</span> (syncDataList.Count&gt;0)
    {
        <span style="color: #98fb98;">SyncData</span> <span style="color: #eedd82;">tmp</span> = syncDataList[0];
        <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">idx</span> = receiveCurFrame - (tmp.keyframe - syncInterval);
        <span style="color: #00ffff;">if</span> (idx&lt;0)
        {
            Debug.Log(<span style="color: #ffa07a;">"Error : client frame smaller than keyframe begin!"</span>);
            quitGame();
        }
        <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span> (idx&lt;tmp.infoList.Count)
        {
            <span style="color: #98fb98;">MoveInfo</span> <span style="color: #eedd82;">info</span> = tmp.infoList[deltaFrame];
            <span style="color: #00ffff;">if</span> (info!=<span style="color: #7fffd4;">null</span>)
            {
                preMoveInfo = info;
            }
            <span style="color: #00ffff;">else</span>
            {
                info = preMoveInfo;
            }

            <span style="color: #00ffff;">if</span>(info!=<span style="color: #7fffd4;">null</span>)
            {
                UpdateGameObjectMove(info);
            }
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#22788;&#29702;&#23436;&#19968;&#20010;&#20851;&#38190;&#24103;&#20869;&#30340;&#25968;&#25454;&#21518;&#65292;&#23558;&#36825;&#20010;&#20851;&#38190;&#24103;&#25968;&#25454;&#21024;&#38500;</span>
            <span style="color: #00ffff;">if</span> (idx == tmp.infoList.Count-1)
            {
                syncDataList.Remove(tmp);
            }

            receiveCurFrame++;
        }
        <span style="color: #00ffff;">else</span>
        {
            Debug.Log(<span style="color: #ffa07a;">"Error : client frame bigger than keyframe end!"</span>);
            quitGame();
        }
    }
    <span style="color: #00ffff;">else</span>
    {
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">block game. wait for other player.</span>
    }
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline13" class="outline-2">
<h2 id="orgheadline13"><span class="section-number-2">4</span> 参考链接</h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="http://www.zhust.com/index.php/2014/02/%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E7%9A%84%E7%A7%BB%E5%8A%A8%E5%90%8C%E6%AD%A5%EF%BC%88%E4%B8%80%EF%BC%89%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5%E6%BC%94%E7%A4%BA/" target="_blank" rel="external">网络游戏的移动同步（一）网络同步演示</a><br>
<a href="http://www.zhust.com/index.php/2014/02/%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E7%9A%84%E7%A7%BB%E5%8A%A8%E5%90%8C%E6%AD%A5%EF%BC%88%E4%BA%8C%EF%BC%89%E7%8A%B6%E6%80%81%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%88%AA%E4%BD%8D%E9%A2%84%E6%B5%8B%E6%B3%95/" target="_blank" rel="external">网络游戏的移动同步（二）状态更新及航位预测法</a><br>
<a href="http://www.zhust.com/index.php/2014/02/%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E7%9A%84%E7%A7%BB%E5%8A%A8%E5%90%8C%E6%AD%A5%EF%BC%88%E4%B8%89%EF%BC%89%E5%B9%B3%E6%BB%91%E7%AE%97%E6%B3%95/" target="_blank" rel="external">网络游戏的移动同步（三）平滑算法</a><br>
<a href="http://www.zhust.com/index.php/2014/02/%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E7%9A%84%E7%A7%BB%E5%8A%A8%E5%90%8C%E6%AD%A5%EF%BC%88%E5%9B%9B%EF%BC%89%E5%B8%A7%E9%94%81%E5%AE%9A%E7%AE%97%E6%B3%95/" target="_blank" rel="external">网络游戏的移动同步（四）帧锁定算法</a><br>
</p>

<p>
<a href="http://blog.csdn.net/skywind/article/details/6179506" target="_blank" rel="external">帧锁定同步算法</a><br>
</p>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> gameplay </category>
            
        </categories>
        
        
        <tags>
            
            <tag> unity </tag>
            
            <tag> gameplay </tag>
            
            <tag> network </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unity GUI]]></title>
      <url>http://wolfand11.coding.me/2016/12/31/unity/UnityGUI/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline29" class="outline-2">
<h2 id="orgheadline29"><span class="section-number-2">1</span> Unity GUI</h2>
<div class="outline-text-2" id="text-1">
<a id="more"></a>
<ul class="org-ul">
<li>顶点属性如何管理？ 位置-颜色-贴图坐标 旋转-缩放<br></li>
<li>渲染顺序如何管理？<br></li>
<li>UI 事件如何处理？<br></li>
<li>多分辨率如何实现？<br></li>
</ul>
</div>
<div id="outline-container-orgheadline27" class="outline-3">
<h3 id="orgheadline27"><span class="section-number-3">1.1</span> NGUI</h3>
<div class="outline-text-3" id="text-1-1">
</div><div id="outline-container-orgheadline2" class="outline-4">
<h4 id="orgheadline2"><span class="section-number-4">1.1.1</span> UIRoot UIRect UIRect.AnchorPoint</h4>
<div class="outline-text-4" id="text-1-1-1">
<p>
UIRoot 组件的作用是缩放 UI 为 2/(Screen.height)<br>
UIRect.OnAnchor 中会根据该 ui 元素的 4 个 AnchorPoint 计算出来自己的 position，如果有变化，就会更新。<br>
UIRect.GetSides 是用来获得该 ui 元素的四个角(lb lt rt rb)的坐标的<br>
AnchorPoint.GetSides 调用了 AnchorPoint 的 target.GetSides()<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Vector3</span>[] AnchorPoint.<span style="color: #87cefa;">GetSides</span> (<span style="color: #98fb98;">Transform</span> <span style="color: #eedd82;">relativeTo</span>)
{
    <span style="color: #00ffff;">if</span> (target != <span style="color: #7fffd4;">null</span>)
    {
        <span style="color: #00ffff;">if</span> (rect != <span style="color: #7fffd4;">null</span>) <span style="color: #00ffff;">return</span> rect.GetSides(relativeTo);
        <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">cam</span> = target.GetComponent&lt;Camera&gt;();
        <span style="color: #00ffff;">if</span> (cam != <span style="color: #7fffd4;">null</span>) <span style="color: #00ffff;">return</span> cam.GetSides(relativeTo);
    }
    <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">null</span>;
}
</pre>
</div>
</div>
<ol class="org-ol"><li><a id="orgheadline1"></a><span class="todo TODO">TODO</span> 多分辨率如何实现？<br></li></ol>
</div>

<div id="outline-container-orgheadline8" class="outline-4">
<h4 id="orgheadline8"><span class="section-number-4">1.1.2</span> UIPanel-UIWidget-UIGeometry-UIDrawCall</h4>
<div class="outline-text-4" id="text-1-1-2">
</div><ol class="org-ol"><li><a id="orgheadline5"></a>顶点属性如何管理？ 位置-颜色-贴图坐标 旋转-缩放<br><ol class="org-ol"><li><a id="orgheadline3"></a>数据记录<br><div class="outline-text-6" id="text-1-1-2-1-1">
<ol class="org-ol">
<li>每个 UIWidget 包含一个 UIGeomery 来存储该 UI 的几何信息 - 顶点位置 verts 顶点贴图坐标 uvs 顶点颜色 cols，这 3 个都是 List；<br></li>
<li>UIText UISprite 等给 UIGeometry 填充的几何数据都是本地坐标，UIGeometry 通过 ApplyTransform 生成 mRtpVerts mRtpNormal mRtpTan；<br></li>
<li>每个 UIPanel 下包含一个 List&lt;UIDrawCall&gt; drawCalls 用来存储该 UIPanel 下所有的 DrawCall 信息；<br></li>
<li>每个 UIDrawCall 包含了绘制需要的一切信息，如下为 UIDrawCall 的部分代码：<br></li>
</ol>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">widgetCount</span> = 0;
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">depthStart</span> = <span style="color: #98fb98;">int</span>.MaxValue;
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">depthEnd</span> = <span style="color: #98fb98;">int</span>.MinValue;
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">UIPanel</span> <span style="color: #eedd82;">manager</span>;
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">UIPanel</span> <span style="color: #eedd82;">panel</span>;
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Texture2D</span> <span style="color: #eedd82;">clipTexture</span>;
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">bool</span> <span style="color: #eedd82;">alwaysOnScreen</span> = <span style="color: #7fffd4;">false</span>;
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">Vector3</span>&gt; verts = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">List</span>&lt;Vector3&gt;();
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">Vector3</span>&gt; norms = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">List</span>&lt;Vector3&gt;();
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">Vector4</span>&gt; tans = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">List</span>&lt;Vector4&gt;();
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">Vector2</span>&gt; uvs = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">List</span>&lt;Vector2&gt;();
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">Vector4</span>&gt; uv2 = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">List</span>&lt;Vector4&gt;();
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">List</span>&lt;Color&gt; <span style="color: #eedd82;">cols</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">List</span>&lt;Color&gt;();

<span style="color: #98fb98;">Material</span>                <span style="color: #eedd82;">mMaterial</span>;              <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Material used by this draw call</span>
<span style="color: #98fb98;">Texture</span>         <span style="color: #eedd82;">mTexture</span>;               <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Main texture used by the material</span>
<span style="color: #98fb98;">Shader</span>          <span style="color: #eedd82;">mShader</span>;                <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Shader used by the dynamically created material</span>
<span style="color: #98fb98;">int</span>                     <span style="color: #eedd82;">mClipCount</span> = 0; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Number of times the draw call's content is getting clipped</span>
<span style="color: #98fb98;">Transform</span>           <span style="color: #eedd82;">mTrans</span>;                     <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Cached transform</span>
<span style="color: #98fb98;">Mesh</span>                    <span style="color: #eedd82;">mMesh</span>;                  <span style="color: #ff0000;">// </span><span style="color: #ff0000;">First generated mesh</span>
<span style="color: #98fb98;">MeshFilter</span>      <span style="color: #eedd82;">mFilter</span>;                <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Mesh filter for this draw call</span>
<span style="color: #98fb98;">MeshRenderer</span>    <span style="color: #eedd82;">mRenderer</span>;              <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Mesh renderer for this screen</span>
<span style="color: #98fb98;">Material</span>                <span style="color: #eedd82;">mDynamicMat</span>;    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Instantiated material</span>
<span style="color: #98fb98;">int</span>[]               <span style="color: #eedd82;">mIndices</span>;           <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Cached indices</span>
</pre>
</div>
</div></li>
<li><a id="orgheadline4"></a>数据更新<br><div class="outline-text-6" id="text-1-1-2-1-2">
<ul class="org-ul">
<li>渲染所需数据的更新都是从 UIPanel-&gt;LateUpdate 驱动的。<br></li>
<li>UIWidget 的 geomery 对象数据的更新<br>
UIWidget 在 UpdateGeometry 中触发 OnFill 方法。<br>
      UIWidget 的子类中在 OnFill 方法内会填充 geomery 数据。例如：UILabel 是在 OnFill 中调用 NGUIText.Print()来填充 geometry 数据的。<br></li>
<li>UIPanel 下 drawCalls 的数据更新<br>
情况 1：<br>
UIWidget 在 UpdateGeometry 中标记 drawCall 为 dirty<br>
UIPanel 在 UpdateSelf 中触发 FillDrawCall 来填充需要修改的 drawCall 的数据<br>
情况 2：<br>
UIPanel 在 FillAllDrawCall 中填充所有 drawCall 的数据<br></li>
</ul>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">-------------------------------------------------</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">-- UIPanel</span>
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">UIPanel</span>::LateUpdate()
{
    <span style="color: #00ffff;">if</span> (mUpdateFrame != Time.frameCount)
    {
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">1 &#39318;&#20808;&#26356;&#26032;&#25152;&#26377; UIPanel. list &#20026; UIPanel &#30340;&#38745;&#24577;&#21464;&#37327;&#65292;&#20854;&#20013;&#23384;&#20648;&#20102;&#25152;&#26377;&#30340; UIPanel</span>
        <span style="color: #00ffff;">for</span> (i=0; i&lt;list.Count; i++)
        {
            list[i].UpdateSelf();
        }
    }
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">2 &#20854;&#27425;&#26356;&#26032;&#25152;&#26377;&#30340; draw calls&#65292;&#35753;&#23427;&#20204;&#20197;&#27491;&#30830;&#30340;&#28210;&#26579;&#39034;&#24207;&#28210;&#26579;</span>
}


<span style="color: #ff0000;">/// </span><span style="color: #ff0000;">&#26356;&#26032;&#24403;&#21069; panel &#20197;&#21450;&#23427;&#30340;&#25152;&#26377; widgets &#21644; draw calls</span>
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">UIPanel</span>::UpdateSelf()
{
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#20462;&#25913;&#33258;&#24049;&#30340; transform matrix</span>
    UpdateTransformMatrix();

    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#26356;&#26032;&#33258;&#24049;&#20197;&#21450;&#27599;&#20010; widget &#30340; layer</span>
    UpdateLayers();

    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#35843;&#29992;&#27599;&#20010; widget &#30340; UpdateTransform UpdateVisibility UpdateGeometry</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#35843;&#29992; UpdateGeometry &#36820;&#22238; true&#65292;&#23601;&#23558;&#24403;&#21069; widget &#30340; drawCall &#26631;&#35760;&#20026; dirty</span>
    UpdateWidgets();

    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#26356;&#26032; DrawCall</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">1 &#22914;&#26524;&#38656;&#35201;&#37325;&#24314; DrawCall&#65288;&#20363;&#22914;&#65292;&#22312;&#19968;&#24320;&#22987;&#26174;&#31034; Panel &#30340;&#26102;&#20505;&#65289;&#65292;&#21017;&#28165;&#31354;&#25152;&#26377; DrawCall&#65292;&#35843;&#29992; FillAllDrawCall &#37325;&#26032;&#21019;&#24314;&#25152;&#26377; DrawCall</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">2 &#36941;&#21382; drawCalls &#35843;&#29992; FillDrawCall &#26356;&#26032;&#27599;&#19968;&#20010;&#34987;&#26631;&#35760;&#20026; dirty &#30340; DrawCall</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#22312;&#36825;&#20010;&#36807;&#31243;&#20013;&#20250;&#35843;&#29992; widget &#30340; WriteToBuffers(drawCall.verts,drawCalls.uvs,drawCalls.cols,drawCalls.normals)</span>
    <span style="color: #00ffff;">if</span> (mRebuild)
    {
        mRebuild = <span style="color: #7fffd4;">false</span>;
        FillAllDrawCall();
    }
    <span style="color: #00ffff;">else</span>
    {
        <span style="color: #00ffff;">foreach</span>(dc <span style="color: #00ffff;">in</span> drawCalls)
        {
            <span style="color: #00ffff;">if</span> (dc.isDirty &amp;&amp; !FillDrawCall(dc))
                <span style="color: #ff0000;">// </span><span style="color: #ff0000;">-- remove dc</span>
                }
    }
}

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#26356;&#26032; DrawCall</span>
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">UIPanel</span>::FillAllDrawCall()
{
    <span style="color: #00ffff;">foreach</span>(w <span style="color: #00ffff;">in</span> widgets)
    {
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#22914;&#26524;&#19981;&#33021;&#20849;&#29992;&#21069;&#38754; widget &#30340; drawCall&#65292;&#21017;&#26032;&#24314;&#19968;&#20010; drawCall</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">mat texture shader &#26377;&#19968;&#20010;&#19981;&#21516;&#21017;&#19981;&#33021;&#20849;&#29992; drawCall</span>
        dc = UIDrawCall.Create(<span style="color: #00ffff;">this</span>, mat, tex, sdr);
    }
}
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">UIPanel</span>::FillDrawCall(<span style="color: #98fb98;">UIDrawCall</span> <span style="color: #eedd82;">dc</span>)
{
    <span style="color: #00ffff;">foreach</span>(w <span style="color: #00ffff;">in</span> widgets)
    {
        <span style="color: #00ffff;">if</span>(w.drawCall == dc)
        {
            <span style="color: #ff0000;">//</span>
            <span style="color: #00ffff;">if</span> (generateNormals) w.WriteToBuffers(dc.verts, dc.uvs, dc.cols, dc.norms, dc.tans, generateUV2 ? dc.uv2 : <span style="color: #7fffd4;">null</span>);
            <span style="color: #00ffff;">else</span> w.WriteToBuffers(dc.verts, dc.uvs, dc.cols, <span style="color: #7fffd4;">null</span>, <span style="color: #7fffd4;">null</span>, generateUV2 ? dc.uv2 : <span style="color: #7fffd4;">null</span>);
        }
    }
}

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">-------------------------------------------------</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">-- UIWidget</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#21028;&#26029; widget &#30456;&#23545;&#20110; UIPanel &#26159;&#21542;&#26377;&#20301;&#32622;&#21464;&#21270; &#26356;&#26032; mMoved &#29366;&#24577;</span>
<span style="color: #98fb98;">bool</span> <span style="color: #87cefa;">UIWidget</span>::UpdateTransform();
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#26356;&#26032; widget &#30340;&#21487;&#35265;&#24615;&#29366;&#24577; mIsVisibleByAlpha(widget &#30340; alpha &#26159;&#21542;&#20026; 0) mIsVisibleByPanel(widget &#26159;&#21542;&#22312;&#21487;&#35270;&#21306;&#22495;&#20869;)</span>
<span style="color: #98fb98;">bool</span> <span style="color: #87cefa;">UIWidget</span>::UpdateVisibility();
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#21028;&#26029; widget &#30340;&#20960;&#20309;&#20449;&#24687;&#26159;&#21542;&#25913;&#21464; &#26356;&#26032; widget &#30340;&#20960;&#20309;&#20449;&#24687;</span>
<span style="color: #98fb98;">bool</span> <span style="color: #87cefa;">UIWidget</span>::UpdateGeometry();
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#35843;&#29992;&#23558;&#33258;&#24049;&#30340; geometry-&gt;WriteToBuffers &#26041;&#27861;&#65292;&#23558; geometry &#30340;&#20960;&#20309;&#25968;&#25454;&#21152;&#21040; drawCall &#23545;&#24212;&#30340; List &#20013;</span>
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">UIWidget</span>::WriteToBuffers(<span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">Vector3</span>&gt; v, <span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">Vector2</span>&gt; u, <span style="color: #98fb98;">List</span>&lt;Color&gt; <span style="color: #eedd82;">c</span>, <span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">Vector3</span>&gt; n, <span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">Vector4</span>&gt; t, <span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">Vector4</span>&gt; u2);
</pre>
</div>
<ul class="org-ul">
<li><p>
Mesh 数据更新<br>
</p>
<ol class="org-ol">
<li>UIPanel 在 FillDrawCall 或 FillAllDrawCall 中调用 UIDrawCall 的 UpdateGeometry；<br></li>
</ol>
<ol class="org-ol">
<li>UIDrawCall 在 UpdateGeometry 中会创建 Mesh（如果已经存在，则用已存在的），并为 Mesh 设置数据。如下：<br></li>
<li>在创建 UIDrawCall 的时候会创建一个 GameObject，并将 UIDrawCall 组件加到该 GameObject 上，MeshFilter、MeshRenderer 都会加到该 GameObject 上。<br></li>
<li>UIDrawCall 所属的 GameObject 在编辑器的场景树中是不可见的，可以在 UIDrawCall 脚本中，开启宏定义 #define SHOW_HIDDEN_OBJECTS，来显示隐藏的 GameObject。<br></li>
</ol>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">UIDrawCall</span>::UpdateGeometry()
{
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">1. &#21019;&#24314; MeshFilter</span>
    <span style="color: #00ffff;">if</span> (mFilter == <span style="color: #7fffd4;">null</span>) mFilter = gameObject.AddComponent&lt;MeshFilter&gt;();

    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">2. &#21019;&#24314; Mesh &#22635;&#20805;&#25968;&#25454;</span>
    <span style="color: #00ffff;">if</span> (mMesh == <span style="color: #7fffd4;">null</span>) mMesh = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Mesh</span>();

    mMesh.SetVertices(verts);
    mMesh.SetUVs(0, uvs);
    mMesh.SetColors(cols);
    mMesh.SetUVs(1, (uv2.Count == vertexCount) ? uv2 : <span style="color: #7fffd4;">null</span>);
    mMesh.SetNormals((norms.Count == vertexCount) ? norms : <span style="color: #7fffd4;">null</span>);
    mMesh.SetTangents((tans.Count == vertexCount) ? tans : <span style="color: #7fffd4;">null</span>);

    mFilter.mesh = mMesh;

    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">3. &#21019;&#24314; MeshRenderer</span>
    <span style="color: #00ffff;">if</span> (mRenderer == <span style="color: #7fffd4;">null</span>) mRenderer = gameObject.AddComponent&lt;MeshRenderer&gt;();
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">-- &#21019;&#24314;&#26448;&#36136;&#20026; mRenderer &#35774;&#32622;&#26448;&#36136;</span>
    UpdateMaterials();
}

<span style="color: #ff0000;">//</span>
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">UIDrawCall</span>::UpdateMaterials()
{
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Destroy the old material</span>
    NGUITools.DestroyImmediate(mDynamicMat);

    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Create a new material</span>
    CreateMaterial();
    mDynamicMat.renderQueue = mRenderQueue;

    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Update the renderer</span>
    <span style="color: #00ffff;">if</span> (mRenderer != <span style="color: #7fffd4;">null</span>)
    {
        mRenderer.sharedMaterials = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Material</span>[] { mDynamicMat };
        mRenderer.sortingLayerName = mSortingLayerName;
        mRenderer.sortingOrder = mSortingOrder;
    }
}
</pre>
</div></li>
</ul>
</div></li></ol></li>
<li><a id="orgheadline7"></a>渲染顺序如何管理？<br><div class="outline-text-5" id="text-1-1-2-2">
<ul class="org-ul">
<li><p>
Unity 中渲染顺序<br>
Unity 中渲染顺序按照一下优先级来进行<br>
</p>
<ol class="org-ol">
<li>Camera 的 depth 越小越先渲染<br></li>
<li>Renderer 的 sortingLayer 越小越先渲染 (默认的 sortingLayer 为 Default 其值为 0)<br></li>
<li>Renderer 的 sortingOrder 越小越先渲染（默认值为 0）<br></li>
<li>Renderer.material.renderQueue 越小越先渲染<br></li>
</ol>
<p>
需要注意的是先渲染不一定就在后面，因为如果开启了深度测试，可能后渲染的物体部分像素的深度值比当前帧缓存区中已经存在的像素深度值大，该物体的这部分像素就不会被渲染到帧缓存区中。<br>
</p></li>
<li><p>
NGUI 中渲染顺序<br>
</p>
<ol class="org-ol">
<li>UIDrawCall 中有 mSortingOrder、mRenderQueue<br></li>
<li>UIDrawCall 的 mSortingOrder 会赋值给 mRenderer.sortingOrder<br></li>
<li>UIDrawCall 的 mRenderQueue 会赋值给 mDynamicMat.renderQueue<br></li>
<li>所有 UIPanel 都会按照 depth 来排序（在 UIPanel 的 OnInit 中会将自己添加到 list 中，并对 list 进行排序），UIPanel 下的所有 UIDrawCall 有相同的 sortingOrder，这个值为 UIPanel 在 list 中索引值。<br></li>
<li>在 UIPanel 的 LateUpdate 中，设置初始的 preRenderQueue=2999，遍历每个 UIPanel 下的每个 UIDrawCall 依次为每个 UIDrawCall 指定 renderQueue=preRenderQueue+1<br></li>
<li>每个 UIWidget 都会按照 depth 来排序(在 UIPanel 的 AddWidget 函数中)，在为 UIDrawCall 填充数据时（FillDrawCall/FillAllDrawCall），depth 小的 UIWidget，其数据会先被使用。<br></li>
</ol>
<p>
所以，NGUI 中渲染顺序是通过 depth 来决定的。<br>
对于 UIPanel 来说 depth 小的先渲染，depth 相同时，先加入 list 的先渲染。<br>
对于 UIWidget 来说，UIWidget 所属 UIPanel 不同时，哪个 UIPanel 先渲染其 widget 也先渲染；UIWidget 所属 UIPanel 相同时，depth 小的先渲染，depth 相同时，先加入 UIPanel widgets 中的先渲染。<br>
</p></li>
<li>关于 Material.renderQueue<br>
该属性指定了材质的渲染队列。默认情况下材质会使用它的 shader 中指定的渲染队列。一旦通过材质设置了 renderQueue 属性就会覆盖 shader 中设置的值。<br>
渲染队列的值为正数才能正常工作；当设置材质的 renderQueue 为-1 时，表示材质渲染使用 shader 中设置的 renderQueue.<br></li>
<li>关于 Renderer.sortingOrder<br>
该属性表示 Render 在一个层中的排序，它的值在-32768 到-32767 区间内。<br></li>
</ul>
</div>
<ol class="org-ol"><li><a id="orgheadline6"></a>参考链接<br><div class="outline-text-6" id="text-1-1-2-2-1">
<p>
<a href="https://docs.unity3d.com/ScriptReference/Material-renderQueue.html" target="_blank" rel="external">https://docs.unity3d.com/ScriptReference/Material-renderQueue.html</a><br>
<a href="http://www.cnblogs.com/Persona/p/4149086.html" target="_blank" rel="external">http://www.cnblogs.com/Persona/p/4149086.html</a><br>
</p>
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline9" class="outline-4">
<h4 id="orgheadline9"><span class="section-number-4">1.1.3</span> <span class="todo TODO">TODO</span> UICamera</h4>
<div class="outline-text-4" id="text-1-1-3">
<p>
UICamera 中可以配置事件处理在 Update 还是 LateUpdate 中进行，通常情况下，应该在 Update 中执行事件处理，因为 UI 渲染数据的更新是在 LateUpdate 中进行的。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline26" class="outline-4">
<h4 id="orgheadline26"><span class="section-number-4">1.1.4</span> Q&amp;A</h4>
<div class="outline-text-4" id="text-1-1-4">
</div><ol class="org-ol"><li><a id="orgheadline12"></a>material 是如何来的？shader 是如何来的？<br><ol class="org-ol"><li><a id="orgheadline10"></a>UILabel<br><div class="outline-text-6" id="text-1-1-4-1-1">
<p>
UILabel 中 material 来自字体。<br>
UILabel 的 shader 有通过 material 来获得<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">UILabel</span>
<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">override</span> <span style="color: #98fb98;">Material</span> <span style="color: #eedd82;">material</span>
{
    <span style="color: #00ffff;">get</span>
    {
        <span style="color: #00ffff;">if</span> (mMat != <span style="color: #7fffd4;">null</span>) <span style="color: #00ffff;">return</span> mMat;
        <span style="color: #00ffff;">if</span> (mFont != <span style="color: #7fffd4;">null</span>) <span style="color: #00ffff;">return</span> mFont.material;
        <span style="color: #00ffff;">if</span> (mTrueTypeFont != <span style="color: #7fffd4;">null</span>) <span style="color: #00ffff;">return</span> mTrueTypeFont.material;
        <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">null</span>;
    }
    <span style="color: #00ffff;">set</span>
    {
        <span style="color: #00ffff;">base</span>.material = value;
    }
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">UIWidget</span>
<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">Shader</span> <span style="color: #eedd82;">shader</span>
{
    <span style="color: #00ffff;">get</span>
    {
        <span style="color: #98fb98;">Material</span> <span style="color: #eedd82;">mat</span> = material;
        <span style="color: #00ffff;">return</span> (mat != <span style="color: #7fffd4;">null</span>) ? mat.shader : <span style="color: #7fffd4;">null</span>;
    }
    <span style="color: #00ffff;">set</span>
    {
        <span style="color: #00ffff;">throw</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">System.NotImplementedException</span>(GetType() + <span style="color: #ffa07a;">" has no shader setter"</span>);
    }
}
</pre>
</div>
</div></li>
<li><a id="orgheadline11"></a>UISprite<br><div class="outline-text-6" id="text-1-1-4-1-2">
<p>
UISprite 的 material 来自 UIAtlas<br>
UISprite 的 shader 通过 material 来获得<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">override</span> <span style="color: #98fb98;">Material</span> <span style="color: #eedd82;">material</span>
{
    <span style="color: #00ffff;">get</span>
    {
        <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">mat</span> = <span style="color: #00ffff;">base</span>.material;
        <span style="color: #00ffff;">if</span> (mat != <span style="color: #7fffd4;">null</span>) <span style="color: #00ffff;">return</span> mat;
        <span style="color: #00ffff;">return</span> (mAtlas != <span style="color: #7fffd4;">null</span> ? mAtlas.spriteMaterial : <span style="color: #7fffd4;">null</span>);
    }
    <span style="color: #00ffff;">set</span>
    {
        <span style="color: #00ffff;">base</span>.material = value;
    }
}
</pre>
</div>
</div></li></ol></li>
<li><a id="orgheadline17"></a>什么时候会重新构建 UIDrawCall，如何避免？<br><ol class="org-ol"><li><a id="orgheadline13"></a>重新构建 UIPanel 下的某个 drawCall<br><div class="outline-text-6" id="text-1-1-4-2-1">
<ol class="org-ol">
<li>在该 Panel 下添加新的节点，当找到该节点适用的 UIDrawCall 时，会标记 drawCall dirty，在随后的更新中会重新给该 drawCall 填充数据。<br></li>
<li>删除或者 disable Panel 下某个 UIWidget 时，会标记该 UIWidget 的 drawCall dirty（也可能标记 UIPanel 的所有 drawCalls 都需要重新创建）<br></li>
<li>enable Panel 下某个 UIWidget 时，会调用该 UIWidget 的 OnInit 方法，该方法会引起一下处理：<br>
<a id="orgtarget1"></a><br>
<ul class="org-ul">
<li>调用 FindDrawCall，为 widget 指定 drawCall，如果没有合适的 drawCall 会 UIPanel 标记 mRebuild=true<br></li>
<li>标记 UIWidget 的 mChanged=true，在随后的更新中会重新给该 UIWdiget 填充几何数据，标识它的 drawCall 为 dirty<br></li>
</ul></li>
</ol>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">RemoveWidget</span> (<span style="color: #98fb98;">UIWidget</span> <span style="color: #eedd82;">w</span>)
{
    <span style="color: #00ffff;">if</span> (widgets.Remove(w) &amp;&amp; w.drawCall != <span style="color: #7fffd4;">null</span>)
    {
        <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">depth</span> = w.depth;
        <span style="color: #00ffff;">if</span> (depth == w.drawCall.depthStart || depth == w.drawCall.depthEnd)
            mRebuild = <span style="color: #7fffd4;">true</span>;

        w.drawCall.isDirty = <span style="color: #7fffd4;">true</span>;
        w.drawCall = <span style="color: #7fffd4;">null</span>;
    }
}
</pre>
</div>
</div></li>
<li><a id="orgheadline14"></a>重新构建 UIPanel 下的所有 drawCalls？<br><div class="outline-text-6" id="text-1-1-4-2-2">
<ol class="org-ol">
<li>在 UIPanel 的 OnInit 中会标记 mRebuild=true，即重新生成 drawCalls<br></li>
<li>在该 Panel 下添加新的节点，当找不到该节点适用的 UIDrawCall 时（即 FindDrawCall 失败），会标记 mRebuild=true<br></li>
<li><p>
修改 UIPanel 下某个 UIWidget 的 depth 时 会先调用 会标记 mRebuild=true。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">if</span> (mDepth != value)
{
    <span style="color: #00ffff;">if</span> (panel != <span style="color: #7fffd4;">null</span>) panel.RemoveWidget(<span style="color: #00ffff;">this</span>);
    mDepth = value;

    <span style="color: #00ffff;">if</span> (panel != <span style="color: #7fffd4;">null</span>)
    {
        panel.AddWidget(<span style="color: #00ffff;">this</span>);

        <span style="color: #00ffff;">if</span> (!Application.isPlaying)
        {
            panel.SortWidgets();
            panel.RebuildAllDrawCalls();
        }
    }
}
</pre>
</div></li>
<li><a href="#orgtarget1">3</a><br></li>
</ol>
</div></li>
<li><a id="orgheadline15"></a>避免 DrawCall 重新构建的方案<br><div class="outline-text-6" id="text-1-1-4-2-3">
<ol class="org-ol">
<li>在 UI 制作时就将所有用到的 UI 元素拼到 prefab 中，避免动态添加 UIWidget 节点到已经显示的 UIPanel.<br></li>
<li>如果无法避免动态添加 UI 元素，那么在所属 UIPanel 显示之前将 UIWidget 添加到 UIPanel 上.<br>
<ul class="org-ul">
<li>考虑到 UI 元素的复用，如：HeroIcon EquipIcon PropIcon<br></li>
</ul></li>
<li>如果当前 UIPanel 下的 UI 元素已经很多，第一次构建该 UIPanel 的 DrawCall 已经很卡了，那么可以考虑为暂时不显示的 UI 元素新建另外一个 UIPanel.<br>
例如：在商店 UIPanel 下有 装备 物品 碎片三个页签，每个页签下分别有 16 个物品，此时如果共享一个 UIPanel 卡的话，可以为这三个页签分别创建一个 UIPanel.<br></li>
<li>对于需要暂时隐藏的 UIPanel，不要使用 gameObject.SetActive(false) 或者 panel.enabled=false<br></li>
<li>对于需要暂时隐藏的 UIWidget，不要使用 SetActive(false)或 enabled=false 的方法，该方法会将 widget 从 UIPanel 中移除。<br>
如果该 widget 所用的 DrawCall 只用来渲染该 widget，那么它的 DrawCall 也会从 UIPanel 中移除，下次再显示时，需要重新创建 UIPanel 的所有 drawCall。<br>
如果该 widget 所用的 DrawCall 还用来渲染其他 widget，那么它的 DrawCall 不会从 UIPanel 中移除，下次再显示时，需要重新填充该 DrawCall 的数据。<br>
可以将需要暂时隐藏的 UIWidget 移动到屏幕外面，下次再显示时，移动回来就可以了。也可以将需要暂时隐藏的 UIWidget 的 z 值设置为某个很大或很小的值，将 UIWidget 移到摄像机视景体外面，下次再显示时将 z 值设置为 0 就可以了。<br>
按照上面的方式，当修改 UIWidget 的 Transform 时，会标记当前 UIWidget 的 DrawCall 为 dirty，需要重新填充该 DrawCall 的数据。<br></li>
<li>尽量不要修改 UIWidget depth。对于需要修改 UIWidget depth 的情况，可以考虑通过修改 UIPanel 的 depth 来实现，修改 UIPanel 的 depth 不会造成重新构建 DrawCall。<br></li>
</ol>
</div></li>
<li><a id="orgheadline16"></a>DrawCall 的优化方法<br><div class="outline-text-6" id="text-1-1-4-2-4">
<p>
PanelTool 可以统计每个 UIPanel 的 DrawCall 次数<br>
UIDrawCallTool 可以查看每个 Panel 的 UIDrawCall 是如何产生的<br>
根据上面两个工具定位 DrawCall 需要优化的 UI 元素，从而对其进行优化。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline18"></a>如何降低 UI 的 DrawCall？<br><div class="outline-text-5" id="text-1-1-4-3">
<p>
在 UIPanel 的 UpdateSelf 中，所有 widget 填充完自己的几何数据以后，开始遍历每个 widget 生成 UIDrawCall，当 widget 使用的 material texture shader 中任何一个和前一个不同，就会创建新的 UIDrawCall。所以，可以采用下面几种方法：<br>
</p>
<ol class="org-ol">
<li>尽量将 UI 图片打包，可以让 Sprite 共用相同的材质，贴图和 shader，从而减少 DrawCall<br></li>
<li>尽量少使用 UIPanel，这样可以让更多的 UI 元素共用 UIDrawCall。<br>
需要注意的是 UIPanel 中所含 UIWidget 越多，重建 UIPanel 的 drawCalls 越花时间。<br></li>
<li>尽量将同时可见的 UILabel 的 depth 调整为一样的值，这样可以让 UILabel 共用一个 UIDrawCall。尽量将共用同一个 atlas 的 UISprite 的 depth 调整为一样或者属于一个范围的，这样它们可以共用一个 atlas。为 UILabel 和 UISprite 采用不同范围的深度值。<br></li>
<li>不同的字体会造成 UILabel 的 material、texture 不同，所以不能共用相同的 UIDrawCall。但是，字体相同大小大小不同不会影响。因此，尽量采用相同的字体，并为不同字体的 UILabel 采用不同范围的深度值。<br></li>
</ol>
</div></li>
<li><a id="orgheadline19"></a>如何降低 UI 的 OverDraw？<br><div class="outline-text-5" id="text-1-1-4-4">
<p>
在编辑器的 Scene 视图中，点击左上角下拉按钮，选择 Miscellaneous-OverDraw 可以查看场景中 OverDraw 的状态，分析产生 OverDraw 的 UI 界面：<br>
</p>
<ol class="org-ol">
<li>如果这些界面是暂时完全不可见的，可以修改这些界面的 z 值，将界面移除到视景体外。<br></li>
<li>如果这些界面是不常显示的，可以将 UI 界面直接 Destroy 或者 SetActive(false)<br></li>
<li>如果这些界面是部分显示，部分不显示的，考虑这两部分是不是可以拆分开，可以拆分的话，不显示的部分处理可以参考 1、2 这两条方案。<br></li>
<li>UILabel 的 Outline 和 Shadow 特效创建了多个 UILabelMesh，会造成 OverDraw，尽量减少 Outline 和 Shadow 特效。<br></li>
</ol>
</div></li>
<li><a id="orgheadline20"></a>在渲染前，NGUI 对顶点坐标数据进行 模型变换 视图变换 在哪儿进行的？<br><div class="outline-text-5" id="text-1-1-4-5">
<p>
在 shader 中进行，例如 UILabel 的 shader 为 Unlit - Text.shader，其内容如下<br>
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #98fb98;">v2f</span> <span style="color: #87cefa;">vert</span> (<span style="color: #98fb98;">appdata_t</span> <span style="color: #eedd82;">v</span>)
{
    <span style="color: #98fb98;">v2f</span> <span style="color: #eedd82;">o</span>;
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#22312;&#36825;&#37324;&#36827;&#34892;&#20102; &#27169;&#22411; &#35270;&#22270; &#25237;&#24433;&#21464;&#25442;</span>
    o.vertex = mul(UNITY_MATRIX_MVP, v.vertex);
    o.texcoord = v.texcoord;
    o.color = v.color;
    <span style="color: #00ffff;">return</span> o;
}

<span style="color: #98fb98;">half4</span> <span style="color: #87cefa;">frag</span> (<span style="color: #98fb98;">v2f</span> <span style="color: #eedd82;">i</span>) : SV_Target
{
    <span style="color: #98fb98;">half4</span> <span style="color: #eedd82;">col</span> = i.color;
    col.a *= tex2D(_MainTex, i.texcoord).a;
    <span style="color: #00ffff;">return</span> col;
}
</pre>
</div>
</div></li>
<li><a id="orgheadline21"></a>Mesh 是挂在 UIDrawCall 所在的 GameObject 上的，如何保证 Mesh 渲染出来的位置和 UIWidget 的位置一致？<br><div class="outline-text-5" id="text-1-1-4-6">
<ol class="org-ol">
<li>UIWidget 中的 UIGeometry 记录了原始的顶点数据<br></li>
<li>UIGeometry 通过 void ApplyTransform (Matrix4x4 widgetToPanel, bool generateNormals = true)来将原始的顶点数据变换为 UIPanel 坐标系下的顶点数据<br></li>
<li>在 UIPanel 的 UpdateDrawCall 里面会将 panel 的 position 赋值给 drawCall 的 position，代码如下：<br></li>
</ol>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">UIPanel</span>::UpdateDrawCalls (<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">sortOrder</span>)
{
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">...... </span>
    <span style="color: #98fb98;">Vector3</span> <span style="color: #eedd82;">pos</span>;

    <span style="color: #00ffff;">if</span> (isUI)
    {
        <span style="color: #98fb98;">Transform</span> <span style="color: #eedd82;">parent</span> = cachedTransform.parent;
        pos = cachedTransform.localPosition;

        <span style="color: #00ffff;">if</span> (clipping != UIDrawCall.Clipping.None)
        {
            pos.x = Mathf.RoundToInt(pos.x);
            pos.y = Mathf.RoundToInt(pos.y);
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#23558;&#26412;&#22320;&#22352;&#26631;&#36716;&#21270;&#20026;&#19990;&#30028;&#22352;&#26631;</span>
        <span style="color: #00ffff;">if</span> (parent != <span style="color: #7fffd4;">null</span>) pos = parent.TransformPoint(pos);
        pos += drawCallOffset;
    }
    <span style="color: #00ffff;">else</span> pos = trans.position;

    <span style="color: #98fb98;">Quaternion</span> <span style="color: #eedd82;">rot</span> = trans.rotation;
    <span style="color: #98fb98;">Vector3</span> <span style="color: #eedd82;">scale</span> = trans.lossyScale;

    <span style="color: #00ffff;">for</span> (<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; drawCalls.Count; ++i)
    {
        <span style="color: #98fb98;">UIDrawCall</span> <span style="color: #eedd82;">dc</span> = drawCalls[i];

        <span style="color: #98fb98;">Transform</span> <span style="color: #eedd82;">t</span> = dc.cachedTransform;
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#35774;&#32622; drawCall &#23545;&#35937;&#30340;&#19990;&#30028;&#22352;&#26631;</span>
        t.position = pos;
        t.rotation = rot;
        t.localScale = scale;

        dc.renderQueue = (renderQueue == RenderQueue.Explicit) ? startingRenderQueue : startingRenderQueue + i;
        dc.alwaysOnScreen = alwaysOnScreen &amp;&amp;
            (mClipping == UIDrawCall.Clipping.None || mClipping == UIDrawCall.Clipping.ConstrainButDontClip);
        dc.sortingOrder = (mSortingOrder == 0) ? sortOrder : mSortingOrder;
        dc.sortingLayerName = mSortingLayerName;
        dc.clipTexture = mClipTexture;
    }
}
</pre>
</div>
</div></li>
<li><a id="orgheadline22"></a>UIPanel 的裁剪是如何实现的？<br><div class="outline-text-5" id="text-1-1-4-7">
<p>
通过 Shader 来实现，原理就是，将指定区域外的像素 alpha 值设置为 0<br>
需要注意的是对于 UIPanel 的嵌套裁剪，NGUI 是通过不同的 Shader 来实现的。例如：<br>
Unlit - Text.shader 用于不裁剪的<br>
Unlit - Text (TextureClip).shader 用于通过贴图来裁剪<br>
Unlit - Text 1.shader 一个 UIPanel 裁剪<br>
Unlit - Text 2.shader 两个 UIPanel 嵌套裁剪<br>
Unlit - Text 3.shader 三个 UIPanel 嵌套裁剪<br>
</p>
<div class="org-src-container">

<pre class="src src-shader"><span style="color: #00ffff;">Shader</span> <span style="color: #ffa07a;">"Hidden/Unlit/Transparent Colored 1"</span>
{
    <span style="color: #00ffff;">Properties</span>
    {
        <span style="color: #eedd82;">_MainTex</span> (<span style="color: #ffa07a;">"Base (RGB), Alpha (A)"</span>, 2D) = <span style="color: #ffa07a;">"black"</span> {}
    }

    <span style="color: #00ffff;">SubShader</span>
    {
        <span style="color: #00ffff;">LOD</span> 200

        <span style="color: #00ffff;">Tags</span>
        {
            <span style="color: #ffa07a;">"Queue"</span> = <span style="color: #ffa07a;">"Transparent"</span>
            <span style="color: #ffa07a;">"IgnoreProjector"</span> = <span style="color: #ffa07a;">"True"</span>
            <span style="color: #ffa07a;">"RenderType"</span> = <span style="color: #ffa07a;">"Transparent"</span>
            <span style="color: #ffa07a;">"DisableBatching"</span> = <span style="color: #ffa07a;">"True"</span>
        }

        <span style="color: #00ffff;">Pass</span>
        {
            <span style="color: #00ffff;">Cull</span> Off
            <span style="color: #00ffff;">Lighting</span> Off
            <span style="color: #00ffff;">ZWrite</span> Off
            <span style="color: #00ffff;">Offset</span> -1, -1
            <span style="color: #00ffff;">Fog</span> { <span style="color: #00ffff;">Mode</span> Off }
            <span style="color: #ff0000;">//ColorMask RGB</span>
            <span style="color: #00ffff;">Blend</span> SrcAlpha OneMinusSrcAlpha

            <span style="color: #00ffff;">CGPROGRAM</span>
<span style="color: #b0c4de;">            #pragma</span> vertex vert
<span style="color: #b0c4de;">            #pragma</span> fragment frag

<span style="color: #b0c4de;">            #include</span> <span style="color: #ffa07a;">"UnityCG.cginc"</span>

            <span style="color: #98fb98;">sampler2D</span> <span style="color: #eedd82;">_MainTex</span>;
            <span style="color: #98fb98;">float4</span> <span style="color: #eedd82;">_ClipRange0</span> = <span style="color: #98fb98;">float4</span>(0.0, 0.0, 1.0, 1.0);
            <span style="color: #98fb98;">float2</span> <span style="color: #eedd82;">_ClipArgs0</span> = <span style="color: #98fb98;">float2</span>(1000.0, 1000.0);

            <span style="color: #00ffff;">struct</span> appdata_t
            {
                <span style="color: #98fb98;">float4</span> vertex : <span style="color: #7fffd4;">POSITION</span>;
                <span style="color: #98fb98;">half4</span> color : <span style="color: #7fffd4;">COLOR</span>;
                <span style="color: #98fb98;">float2</span> texcoord : <span style="color: #7fffd4;">TEXCOORD0</span>;
            };

            <span style="color: #00ffff;">struct</span> v2f
            {
                <span style="color: #98fb98;">float4</span> vertex : <span style="color: #7fffd4;">SV_POSITION</span>;
                <span style="color: #98fb98;">half4</span> color : <span style="color: #7fffd4;">COLOR</span>;
                <span style="color: #98fb98;">float2</span> texcoord : <span style="color: #7fffd4;">TEXCOORD0</span>;
                <span style="color: #98fb98;">float2</span> worldPos : <span style="color: #7fffd4;">TEXCOORD1</span>;
            };

            v2f o;

            v2f <span style="color: #87cefa;">vert</span> (appdata_t v)
            {
                o.vertex = <span style="color: #b0c4de;">mul</span>(UNITY_MATRIX_MVP, v.vertex);
                o.color = v.color;
                o.texcoord = v.texcoord;
                o.worldPos = v.vertex.xy * <span style="color: #eedd82;">_ClipRange0</span>.zw + <span style="color: #eedd82;">_ClipRange0</span>.xy;
                <span style="color: #00ffff;">return</span> o;
            }

            <span style="color: #98fb98;">half4</span> <span style="color: #87cefa;">frag</span> (v2f IN) : <span style="color: #7fffd4;">SV_Target</span>
            {
                <span style="color: #ff0000;">// Softness factor</span>
                <span style="color: #ff0000;">// &#36229;&#20986;&#35009;&#21098;&#21306;&#22495;&#30340; factor &#20250;&#21464;&#20026;&#36127;&#20540;&#65292;&#22312;&#38543;&#21518;&#30340; clamp &#20989;&#25968;&#20013;&#20250;&#21464;&#20026; 0</span>
                <span style="color: #98fb98;">float2</span> factor = (<span style="color: #98fb98;">float2</span>(1.0, 1.0) - <span style="color: #b0c4de;">abs</span>(IN.worldPos)) * <span style="color: #eedd82;">_ClipArgs0</span>;

                <span style="color: #ff0000;">// Sample the texture</span>
                <span style="color: #98fb98;">half4</span> col = <span style="color: #b0c4de;">tex2D</span>(<span style="color: #eedd82;">_MainTex</span>, IN.texcoord) * IN.color;
                col.a *= <span style="color: #b0c4de;">clamp</span>( <span style="color: #b0c4de;">min</span>(factor.x, factor.y), 0.0, 1.0);
                <span style="color: #00ffff;">return</span> col;
            }
            <span style="color: #00ffff;">ENDCG</span>
        }
    }
    ......
}
</pre>
</div>
</div></li>
<li><a id="orgheadline23"></a>UIScrollView 中的 Item 有按钮时，NGUI 如何做到拖动按钮可以拖动 Item？<br><div class="outline-text-5" id="text-1-1-4-8">
<p>
需要在按钮上添加 UIDragScrollView 脚本，当 UICamera 检测出 Drag 操作时，会调用被拖动对象上的 OnDrag 方法，此时就会执行 UIDragScrollView 的 OnDrag 函数，从而调到 UIScrollView 的 OnDrag 方法。UIDragScrollView 脚本做了一次转发操作。<br>
</p>
</div></li>
<li><a id="orgheadline24"></a><span class="todo TODO">TODO</span> Outline 效果是如何实现的？<br></li>
<li><a id="orgheadline25"></a><span class="todo TODO">TODO</span> 点击 Button 切换贴图是否会导致 UIDrawCall 重新生成？<br></li></ol>
</div>
</div>
<div id="outline-container-orgheadline28" class="outline-3">
<h3 id="orgheadline28"><span class="section-number-3">1.2</span> UGUI</h3>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> unity </category>
            
        </categories>
        
        
        <tags>
            
            <tag> unity </tag>
            
            <tag> gui </tag>
            
            <tag> ngui </tag>
            
            <tag> ugui </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Animation From External Sources]]></title>
      <url>http://wolfand11.coding.me/2016/12/22/unity/UnityDoc-AnimationFromExternalSources/</url>
      <content type="html"><![CDATA[

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3"><span class="section-number-2">1</span> Animation From External Sources[cn]</h2>
<div class="outline-text-2" id="text-1">
<p>
这是一篇译文，原文地址：<br>
<a href="#orgtarget1">2</a><br>
(1) <a href="https://docs.unity3d.com/Manual/AnimationsImport.html" target="_blank" rel="external">https://docs.unity3d.com/Manual/AnimationsImport.html</a><br>
</p>
<a id="more"></a>

<p>
从外部资源导入动画的方式和其他常规 3D 文件一样。无论是通用的 FBX 文件还是一些 3D 软件（例如：Maya，Cinema4D，3DStudioMax）自有格式的文件，都可以包含动画数据在其中，这些数据是对运动物体的线性记录。<br>
</p>

<p>
<a href="https://docs.unity3d.com/uploads/Main/AnimationSelectingImportedClip.png" target="_blank" rel="external">An imported FBX 3D Asset containing an animation titled Run</a><br>
在有些情况下，做动画的物体和动画可以在同一个文件中。在另外一些情况下，动画可以和做动画的模型在分开的文件中。<br>
</p>

<p>
可能一些动画对某个特定的模型来说是特有的，它们不能被其他模型复用。例如，你游戏中的一个巨大的章鱼最终 Boss，可能有独有的肢体和骨骼排列，并且有它独有的动画集。<br>
</p>

<p>
In other situations, it may be that you have a library of animations which are to be used on various different models in your scene. For example, a number of different humanoid characters might all use the same walk and run animations. In these situations, it’s common to have a simple placeholder model in your animation files for the purposes of previewing them. Alternatively, it is possible to use animation files even if they have no geometry at all, just the animation data.<br>
</p>

<p>
When importing multiple animations, the animations can each exist as separate files within your project folder, or you can extract multiple animation clips from a single FBX file if exported as takes from Motion builder or with a plugin / script for Maya, Max or other 3D packages. You might want to do this if your file contains multiple separate animations arranged on a single timeline. For example, a long motion captured timeline might contain the animation for a few different jump motions, and you may want to cut out certain sections of this to use as individual clips and discard the rest. Unity provides animation cutting tools to achieve this when you import all animations in one timeline by allowing you to select the frame range for each clip.<br>
</p>
</div>

<div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> Importing animation files</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Before any animation can be used in Unity, it must first be imported into your project. Unity can import native Maya (.mb or .ma), 3D Studio Max (.max) and Cinema 4D (.c4d) files, and also generic FBX files which can be exported from most animation packages (see this page for further details on exporting). To import an animation, simply drag the file to the Assets folder of your project. When you select the file in the Project View you can edit the Import Settings in the inspector:<br>
</p>

<p>
<a href="https://docs.unity3d.com/uploads/Main/MecanimImporterModelTab.png" target="_blank" rel="external">The Import Settings Dialog for a mesh</a><br>
See the FBX importer page for a full description of the available import options.<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2"><span class="section-number-3">1.2</span> Viewing and copying data from imported animation files</h3>
<div class="outline-text-3" id="text-1-2">
<p>
You can view the keyframes and curves of imported animation clips in the Animation window. Sometimes, if these imported clips have lots of bones with lots of keyframes, the amount of information can look overwhelmingly complex. For example, the image below is what a humanoid running animation looks like in the Animation window:<br>
<a href="https://docs.unity3d.com/uploads/Main/AnimationViewingImportedCurves.png" target="_blank" rel="external">Animation Window</a><br>
</p>

<p>
To simplify the view, select the specific bones you are interested in examining. The Animation window then displays only the keyframes or curves for those bones.<br>
</p>

<p>
<a href="https://docs.unity3d.com/uploads/Main/AnimationViewingImportedCurvesSelected.png" target="_blank" rel="external">Limiting the view to just the selected bones</a><br>
Limiting the view to just the selected bones<br>
When viewing imported Animation keyframes, the Animation window provides a read-only view of the Animation data. To edit this data, create a new empty Animation Clip in Unity (see Creating a new Animation Clip), then select, copy and paste the Animation data from the imported Animation Clip into your new, writable Animation Clip.<br>
</p>

<p>
[[<a href="https://docs.unity3d.com/uploads/Main/AnimationSelectingKeysOnImportedClip.png%5D%5BSelecting" target="_blank" rel="external">https://docs.unity3d.com/uploads/Main/AnimationSelectingKeysOnImportedClip.png%5D%5BSelecting</a> keyframes from an imported clip.<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline6" class="outline-2">
<h2 id="orgheadline6"><span class="section-number-2">2</span> Animation From External Sources[en]</h2>
<div class="outline-text-2" id="text-2">
<p>
<a id="orgtarget1"></a><br>
Animation from external sources is imported into Unity in the same way as regular 3D files. These files, whether they’re generic FBX files or native formats from 3D software such as Maya, Cinema 4D, 3D Studio Max, can contain animation data in the form of a linear recording of the movements of objects within the file.<br>
</p>

<p>
<a href="https://docs.unity3d.com/uploads/Main/MecanimImporterModelTab.png" target="_blank" rel="external">An imported FBX 3D Asset containing an animation titled Run</a><br>
In some situations the object to be animated (eg, a character) and the animations to go with it can be present in the same file. In other cases, the animations may exist in a separate file to the model to be animated.<br>
</p>

<p>
It may be that animations are specific to a particular model, and cannot be re-used on other models. For example, a giant octopus end-boss in your game might have a unique arrangement of limbs and bones, and its own set of animations.<br>
</p>

<p>
In other situations, it may be that you have a library of animations which are to be used on various different models in your scene. For example, a number of different humanoid characters might all use the same walk and run animations. In these situations, it’s common to have a simple placeholder model in your animation files for the purposes of previewing them. Alternatively, it is possible to use animation files even if they have no geometry at all, just the animation data.<br>
</p>

<p>
When importing multiple animations, the animations can each exist as separate files within your project folder, or you can extract multiple animation clips from a single FBX file if exported as takes from Motion builder or with a plugin / script for Maya, Max or other 3D packages. You might want to do this if your file contains multiple separate animations arranged on a single timeline. For example, a long motion captured timeline might contain the animation for a few different jump motions, and you may want to cut out certain sections of this to use as individual clips and discard the rest. Unity provides animation cutting tools to achieve this when you import all animations in one timeline by allowing you to select the frame range for each clip.<br>
</p>
</div>

<div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4"><span class="section-number-3">2.1</span> Importing animation files</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Before any animation can be used in Unity, it must first be imported into your project. Unity can import native Maya (.mb or .ma), 3D Studio Max (.max) and Cinema 4D (.c4d) files, and also generic FBX files which can be exported from most animation packages (see this page for further details on exporting). To import an animation, simply drag the file to the Assets folder of your project. When you select the file in the Project View you can edit the Import Settings in the inspector:<br>
</p>

<p>
<a href="https://docs.unity3d.com/uploads/Main/MecanimImporterModelTab.png" target="_blank" rel="external">The Import Settings Dialog for a mesh</a><br>
See the FBX importer page for a full description of the available import options.<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5"><span class="section-number-3">2.2</span> Viewing and copying data from imported animation files</h3>
<div class="outline-text-3" id="text-2-2">
<p>
You can view the keyframes and curves of imported animation clips in the Animation window. Sometimes, if these imported clips have lots of bones with lots of keyframes, the amount of information can look overwhelmingly complex. For example, the image below is what a humanoid running animation looks like in the Animation window:<br>
<a href="https://docs.unity3d.com/uploads/Main/AnimationViewingImportedCurves.png" target="_blank" rel="external">Animation Window</a><br>
</p>

<p>
To simplify the view, select the specific bones you are interested in examining. The Animation window then displays only the keyframes or curves for those bones.<br>
</p>

<p>
<a href="https://docs.unity3d.com/uploads/Main/AnimationViewingImportedCurvesSelected.png" target="_blank" rel="external">Limiting the view to just the selected bones</a><br>
Limiting the view to just the selected bones<br>
When viewing imported Animation keyframes, the Animation window provides a read-only view of the Animation data. To edit this data, create a new empty Animation Clip in Unity (see Creating a new Animation Clip), then select, copy and paste the Animation data from the imported Animation Clip into your new, writable Animation Clip.<br>
</p>

<p>
<a href="https://docs.unity3d.com/uploads/Main/AnimationSelectingKeysOnImportedClip.png" target="_blank" rel="external">Selecting keyframes from an imported clip.</a><br>
</p>
</div>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> unity </category>
            
        </categories>
        
        
        <tags>
            
            <tag> unity </tag>
            
            <tag> unity-doc </tag>
            
            <tag> animation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Animation Clips]]></title>
      <url>http://wolfand11.coding.me/2016/12/21/unity/UnityDoc-AnimationClips/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3"><span class="section-number-2">1</span> Animation Clips[cn]</h2>
<div class="outline-text-2" id="text-1">
<p>
这是一篇译文，原文地址：<br>
<a href="#orgtarget1">2</a><br>
(1) <a href="https://docs.unity3d.com/Manual/AnimationClips.html" target="_blank" rel="external">https://docs.unity3d.com/Manual/AnimationClips.html</a><br>
</p>
<a id="more"></a>
<p>
动画切片是Unity动画系统中核心元素之一。Unity支持从外部导入动画，也可以使用编辑器的Animation 窗口来创建动画切片。<br>
</p>
</div>
<div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> Animation from External Sources</h3>
<div class="outline-text-3" id="text-1-1">
<p>
从外部导入的动画切片包括下面几种：<br>
</p>

<ul class="org-ul">
<li>在动作捕捉工作室捕捉到的人形动画<br></li>
<li>艺术家使用外部的3D程序（例如:3DS Max或Maya）创建的动画<br></li>
<li>第三方库中的动画资源（例如：Unity资源商店中的动画）<br></li>
<li>从一个时间线上分割出来的多个动画切片<br></li>
</ul>

<p>
<a href="https://docs.unity3d.com/uploads/Main/AnimationClipInspector.png" target="_blank" rel="external">在Unity的inspector窗口查看一个动画切片实例</a><br>
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2"><span class="section-number-3">1.2</span> Animation Created and Edited Within Unity</h3>
<div class="outline-text-3" id="text-1-2">
<p>
你可以使用Unity的动画窗口来创建和编辑动画切片。这些切片可以对以下内容做动画：<br>
</p>

<ul class="org-ul">
<li>GameObjects的位置、旋转角度、缩放比例<br></li>
<li>组件的属性，例如材质的颜色，光照的亮度，音频的音量<br></li>
<li>你自己脚本中的float、int、Vector、boolean类型的属性变量<br></li>
<li>调用你自己脚本方法的时机<br></li>
</ul>

<p>
<a href="https://docs.unity3d.com/uploads/Main/AnimationViewSimpleParameters.png" target="_blank" rel="external">使用Unity动画窗口对一个组件参数做动画的实例，这里的参数是点光源的亮度和范围</a><br>
</p>
</div>
</div>
</div>

<div id="outline-container-orgheadline6" class="outline-2">
<h2 id="orgheadline6"><span class="section-number-2">2</span> Animation Clips[en]</h2>
<div class="outline-text-2" id="text-2">
<p>
<a id="orgtarget1"></a><br>
Animation Clips are one of the core elements to Unity’s animation system. Unity supports importing animation from external sources, and offers the ability to create animation clips from scratch within the editor using the Animation window.<br>
</p>
</div>

<div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4"><span class="section-number-3">2.1</span> Animation from External Sources</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Animation clips imported from external sources could include:<br>
</p>

<ul class="org-ul">
<li>Humanoid animations captured at a motion capture studio<br></li>
<li>Animations created from scratch by an artist in an external 3D application (such as 3DS Max or Maya)<br></li>
<li>Animation sets from 3rd-party libraries (eg, from Unity’s asset store)<br></li>
<li>Multiple clips cut and sliced from a single imported timeline.<br></li>
</ul>

<p>
<a href="https://docs.unity3d.com/uploads/Main/AnimationClipInspector.png" target="_blank" rel="external">An example of an imported animation clip, viewed in Unitys inspector window</a><br>
</p>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5"><span class="section-number-3">2.2</span> Animation Created and Edited Within Unity</h3>
<div class="outline-text-3" id="text-2-2">
<p>
Unity’s Animation Window also allows you to create and edit animation clips. These clips can animate:<br>
</p>

<ul class="org-ul">
<li>The position, rotation and scale of GameObjects<br></li>
<li>Component properties such as material colour, the intensity of a light, the volume of a sound<br></li>
<li>Properties within your own scripts including float, int, Vector and boolean variables<br></li>
<li>The timing of calling functions within your own scripts<br></li>
</ul>

<p>
<a href="https://docs.unity3d.com/uploads/Main/AnimationViewSimpleParameters.png" target="_blank" rel="external">An example of Unitys Animation window being used to animate parameters of a component - in this case, the intensity and range of a point light</a><br>
</p>
</div>
</div>
</div>

<div id="outline-container-orgheadline9" class="outline-2">
<h2 id="orgheadline9"><span class="section-number-2">3</span> <span class="todo TODO">TODO</span> Animation From External Sources[cn]</h2>
<div class="outline-text-2" id="text-3">
<p>
Animation from external sources is imported into Unity in the same way as regular 3D files. These files, whether they’re generic FBX files or native formats from 3D software such as Maya, Cinema 4D, 3D Studio Max, can contain animation data in the form of a linear recording of the movements of objects within the file.<br>
</p>

<p>
<a href="https://docs.unity3d.com/uploads/Main/MecanimImporterModelTab.png" target="_blank" rel="external">An imported FBX 3D Asset containing an animation titled Run</a><br>
In some situations the object to be animated (eg, a character) and the animations to go with it can be present in the same file. In other cases, the animations may exist in a separate file to the model to be animated.<br>
</p>

<p>
It may be that animations are specific to a particular model, and cannot be re-used on other models. For example, a giant octopus end-boss in your game might have a unique arrangement of limbs and bones, and its own set of animations.<br>
</p>

<p>
In other situations, it may be that you have a library of animations which are to be used on various different models in your scene. For example, a number of different humanoid characters might all use the same walk and run animations. In these situations, it’s common to have a simple placeholder model in your animation files for the purposes of previewing them. Alternatively, it is possible to use animation files even if they have no geometry at all, just the animation data.<br>
</p>

<p>
When importing multiple animations, the animations can each exist as separate files within your project folder, or you can extract multiple animation clips from a single FBX file if exported as takes from Motion builder or with a plugin / script for Maya, Max or other 3D packages. You might want to do this if your file contains multiple separate animations arranged on a single timeline. For example, a long motion captured timeline might contain the animation for a few different jump motions, and you may want to cut out certain sections of this to use as individual clips and discard the rest. Unity provides animation cutting tools to achieve this when you import all animations in one timeline by allowing you to select the frame range for each clip.<br>
</p>
</div>

<div id="outline-container-orgheadline7" class="outline-3">
<h3 id="orgheadline7"><span class="section-number-3">3.1</span> Importing animation files</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Before any animation can be used in Unity, it must first be imported into your project. Unity can import native Maya (.mb or .ma), 3D Studio Max (.max) and Cinema 4D (.c4d) files, and also generic FBX files which can be exported from most animation packages (see this page for further details on exporting). To import an animation, simply drag the file to the Assets folder of your project. When you select the file in the Project View you can edit the Import Settings in the inspector:<br>
</p>

<p>
<a href="https://docs.unity3d.com/uploads/Main/MecanimImporterModelTab.png" target="_blank" rel="external">The Import Settings Dialog for a mesh</a><br>
See the FBX importer page for a full description of the available import options.<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline8" class="outline-3">
<h3 id="orgheadline8"><span class="section-number-3">3.2</span> Viewing and copying data from imported animation files</h3>
<div class="outline-text-3" id="text-3-2">
<p>
You can view the keyframes and curves of imported animation clips in the Animation window. Sometimes, if these imported clips have lots of bones with lots of keyframes, the amount of information can look overwhelmingly complex. For example, the image below is what a humanoid running animation looks like in the Animation window:<br>
<a href="https://docs.unity3d.com/uploads/Main/AnimationViewingImportedCurves.png" target="_blank" rel="external">Animation Window</a><br>
</p>

<p>
To simplify the view, select the specific bones you are interested in examining. The Animation window then displays only the keyframes or curves for those bones.<br>
</p>

<p>
<a href="https://docs.unity3d.com/uploads/Main/AnimationViewingImportedCurvesSelected.png" target="_blank" rel="external">Limiting the view to just the selected bones</a><br>
Limiting the view to just the selected bones<br>
When viewing imported Animation keyframes, the Animation window provides a read-only view of the Animation data. To edit this data, create a new empty Animation Clip in Unity (see Creating a new Animation Clip), then select, copy and paste the Animation data from the imported Animation Clip into your new, writable Animation Clip.<br>
</p>

<p>
[[<a href="https://docs.unity3d.com/uploads/Main/AnimationSelectingKeysOnImportedClip.png%5D%5BSelecting" target="_blank" rel="external">https://docs.unity3d.com/uploads/Main/AnimationSelectingKeysOnImportedClip.png%5D%5BSelecting</a> keyframes from an imported clip.<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline12" class="outline-2">
<h2 id="orgheadline12"><span class="section-number-2">4</span> Animation From External Sources[en]</h2>
<div class="outline-text-2" id="text-4">
<p>
Animation from external sources is imported into Unity in the same way as regular 3D files. These files, whether they’re generic FBX files or native formats from 3D software such as Maya, Cinema 4D, 3D Studio Max, can contain animation data in the form of a linear recording of the movements of objects within the file.<br>
</p>

<p>
<a href="https://docs.unity3d.com/uploads/Main/MecanimImporterModelTab.png" target="_blank" rel="external">An imported FBX 3D Asset containing an animation titled Run</a><br>
In some situations the object to be animated (eg, a character) and the animations to go with it can be present in the same file. In other cases, the animations may exist in a separate file to the model to be animated.<br>
</p>

<p>
It may be that animations are specific to a particular model, and cannot be re-used on other models. For example, a giant octopus end-boss in your game might have a unique arrangement of limbs and bones, and its own set of animations.<br>
</p>

<p>
In other situations, it may be that you have a library of animations which are to be used on various different models in your scene. For example, a number of different humanoid characters might all use the same walk and run animations. In these situations, it’s common to have a simple placeholder model in your animation files for the purposes of previewing them. Alternatively, it is possible to use animation files even if they have no geometry at all, just the animation data.<br>
</p>

<p>
When importing multiple animations, the animations can each exist as separate files within your project folder, or you can extract multiple animation clips from a single FBX file if exported as takes from Motion builder or with a plugin / script for Maya, Max or other 3D packages. You might want to do this if your file contains multiple separate animations arranged on a single timeline. For example, a long motion captured timeline might contain the animation for a few different jump motions, and you may want to cut out certain sections of this to use as individual clips and discard the rest. Unity provides animation cutting tools to achieve this when you import all animations in one timeline by allowing you to select the frame range for each clip.<br>
</p>
</div>

<div id="outline-container-orgheadline10" class="outline-3">
<h3 id="orgheadline10"><span class="section-number-3">4.1</span> Importing animation files</h3>
<div class="outline-text-3" id="text-4-1">
<p>
Before any animation can be used in Unity, it must first be imported into your project. Unity can import native Maya (.mb or .ma), 3D Studio Max (.max) and Cinema 4D (.c4d) files, and also generic FBX files which can be exported from most animation packages (see this page for further details on exporting). To import an animation, simply drag the file to the Assets folder of your project. When you select the file in the Project View you can edit the Import Settings in the inspector:<br>
</p>

<p>
<a href="https://docs.unity3d.com/uploads/Main/MecanimImporterModelTab.png" target="_blank" rel="external">The Import Settings Dialog for a mesh</a><br>
See the FBX importer page for a full description of the available import options.<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline11" class="outline-3">
<h3 id="orgheadline11"><span class="section-number-3">4.2</span> Viewing and copying data from imported animation files</h3>
<div class="outline-text-3" id="text-4-2">
<p>
You can view the keyframes and curves of imported animation clips in the Animation window. Sometimes, if these imported clips have lots of bones with lots of keyframes, the amount of information can look overwhelmingly complex. For example, the image below is what a humanoid running animation looks like in the Animation window:<br>
<a href="https://docs.unity3d.com/uploads/Main/AnimationViewingImportedCurves.png" target="_blank" rel="external">Animation Window</a><br>
</p>

<p>
To simplify the view, select the specific bones you are interested in examining. The Animation window then displays only the keyframes or curves for those bones.<br>
</p>

<p>
<a href="https://docs.unity3d.com/uploads/Main/AnimationViewingImportedCurvesSelected.png" target="_blank" rel="external">Limiting the view to just the selected bones</a><br>
Limiting the view to just the selected bones<br>
When viewing imported Animation keyframes, the Animation window provides a read-only view of the Animation data. To edit this data, create a new empty Animation Clip in Unity (see Creating a new Animation Clip), then select, copy and paste the Animation data from the imported Animation Clip into your new, writable Animation Clip.<br>
</p>

<p>
<a href="https://docs.unity3d.com/uploads/Main/AnimationSelectingKeysOnImportedClip.png" target="_blank" rel="external">Selecting keyframes from an imported clip.</a><br>
</p>
</div>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> unity </category>
            
        </categories>
        
        
        <tags>
            
            <tag> unity </tag>
            
            <tag> unity-doc </tag>
            
            <tag> animation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Animation System Overview]]></title>
      <url>http://wolfand11.coding.me/2016/12/11/unity/UnityDoc-AnimationSystemOverview/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3"><span class="section-number-2">1</span> Animation System Overview[cn]</h2>
<div class="outline-text-2" id="text-1">
<p>
这是一篇译文，原文地址：<br>
<a href="#orgtarget1">2</a><br>
(1) <a href="https://docs.unity3d.com/Manual/AnimationOverview.html" target="_blank" rel="external">https://docs.unity3d.com/Manual/AnimationOverview.html</a><br>
</p>
<a id="more"></a>

<p>
Unity 有一个丰富的、成熟的动画系统（有时候被称作 Mecanim）。它提供了下面这些特性：<br>
</p>
<ul class="org-ul">
<li>工作流简单，并且支持为所有元素设置动画，其中包括 Unity 包含的对象，角色，以及各种属性。<br></li>
<li>支持导入动画切片以及在 Unity 中创建动画<br></li>
<li>类人动画重定向 - 支持将一个角色模型的动画应用到其他角色模型<br></li>
<li>调整动画切片的工作流非常简单<br></li>
<li>方便地预览动画切片，以及它们之间的转换和交互。这使得动画师可以独立于程序员，在游戏代码调用前，创建和预览他们的动画。<br></li>
<li>使用可视化的编程工具来管理动画之间复杂的交互。<br></li>
<li>让不同的部位有不同的动画逻辑<br></li>
<li>支持分层和遮蔽特性<br></li>
</ul>
<p>
<a href="https://docs.unity3d.com/uploads/Main/MecanimShowcase.png" target="_blank" rel="external">Typical view of an Animation State Machine in the Animator window</a><br>
</p>
</div>

<div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> Animation workflow</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Unity 的动画系统是基于动画切片概念的，动画切片中包含了特定物体如何随着时间变化改变其位置、旋转或其他属性。每个切片可以被当作一个单独的线性记录。从外面导入的动画切片，是艺术家或动画师使用第三方工具 Max 或 Maya 或者动作捕捉设备来创建。<br>
</p>

<p>
动画切片被组织到一个结构化的流程图类的系统中，这个系统被称为动画控制器。动画控制器扮演着状态机的角色，它记录当前应该播放的动画切片，以及什么时候应该改变或混合到一起。<br>
</p>

<p>
一个简单的动画控制器可能只包含一两个切片，例如控制旋转和弹跳，或者在适当的时候控制门的开启和关闭动画。更高级的动画控制器对于所有的主角行为都可能包含数十个类人动画，而且可能当玩家在场景中移动时，在同一时间会取多个切片来进行混合，从而提供流畅的行为。<br>
</p>

<p>
Unity 的动画系统还有一系列特性用来处理人形角色，使得你可以从任意来源重定向人形动画到你自己的角色模型，也可以调节肌肉定义。这些特性是通过 Unity 的 Avatar 系统来实现的，在 Avatar 系统中，人形角色被映射为一种公共的内置格式。<br>
</p>

<p>
通过 Animator 组件，Animation Clips、Animator Controller 以及 Avatar 被组合到一个 GameObject 上。这个组件拥有一个 Animator Controller 引用，以及模型的外观。Animator Controller 又包含了多个它所使用的 Animation Clip 的引用。<br>
</p>

<p>
<a href="https://docs.unity3d.com/uploads/Main/MecanimHowItFitsTogether.png" target="_blank" rel="external">Diagram showing how the various parts of the animation system connect together</a><br>
上面的图显示了下面的内容：<br>
</p>
<ol class="org-ol">
<li>动画切片可以从外部资源导入，或者是在 Unity 中创建。在当前的例子中，他们是导入的动作捕捉的人形动画。<br></li>
<li>动画切片被放置和排列在动画控制器中。这显示的是一个动画控制器在 Animator 窗口的视图。状态（它可能代表动画或者嵌套的子状态机）以节点的形式出现，他们通过线段连接。动画控制器在 Project 窗口中以资源的形式存在。<br></li>
<li>这个被操纵的角色模型(这里的太空员“Astrella”)有一个特定的骨骼配置，它被映射为 Unity 通用的 Avatar 格式。这个映射被作为导入角色模型的一部分存储为一个 Avatar 资源，就像图中显示的那样也会出现在 Project 窗口。<br></li>
<li>当一个角色模型做动画时，有一个 Animator 组件被附加到角色上。在上面的 Inspector 视图中，你可以看到 Animator 组件附加了一个 AnimatorController 和一个 Avatar。Animator 通过使用这些来让模型做动画。当为一个人形角色做动画时，Avatar 引用才是必须的。对于其他类型的动画，只需要 Animator Controller。<br></li>
</ol>
<p>
Unity 的动画系统 Mecanim 包含了很多概念和术语。在任何地方，如果你需要确定某个术语概念的意义，你可以去 <a href="https://docs.unity3d.com/Manual/AnimationGlossary.html" target="_blank" rel="external">动画术语表</a> 查看。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2"><span class="section-number-3">1.2</span> Legacy animation system</h3>
<div class="outline-text-3" id="text-1-2">
<p>
尽管 Mecanim 是推荐使用的动画系统，Unity 依然保留着老的动画系统，它从 Unity4 开始就存在了。在处理老的、Unity4 之前创建的内容时，你可能会需要使用该动画系统。更多关于老动画系统的信息，可以查看下面链接：<br>
<a href="https://docs.unity3d.com/Manual/Animations.html" target="_blank" rel="external">https://docs.unity3d.com/Manual/Animations.html</a><br>
</p>

<p>
Unity 试图逐步淘汰老的动画系统，将工作流都迁移到 Mecanim 系统上。<br>
</p>
</div>
</div>
</div>

<div id="outline-container-orgheadline6" class="outline-2">
<h2 id="orgheadline6"><span class="section-number-2">2</span> Animation System Overview[en]</h2>
<div class="outline-text-2" id="text-2">
<p>
<a id="orgtarget1"></a><br>
Unity has a rich and sophisticated animation system (sometimes referred to as ‘Mecanim’). It provides:<br>
</p>

<ul class="org-ul">
<li>Easy workflow and setup of animations for all elements of Unity including objects, characters, and properties.<br></li>
<li>Support for imported animation clips and animation created within Unity<br></li>
<li>Humanoid animation retargeting - the ability to apply animations from one character model onto another.<br></li>
<li>Simplified workflow for aligning animation clips.<br></li>
<li>Convenient preview of animation clips, transitions and interactions between them. This allows animators to work more independently of programmers, prototype and preview their animations before gameplay code is hooked in.<br></li>
<li>Management of complex interactions between animations with a visual programming tool.<br></li>
<li>Animating different body parts with different logic.<br></li>
<li>Layering and masking features<br></li>
</ul>
<p>
<a href="https://docs.unity3d.com/uploads/Main/MecanimShowcase.png" target="_blank" rel="external">Typical view of an Animation State Machine in the Animator window</a><br>
</p>
</div>

<div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4"><span class="section-number-3">2.1</span> Animation workflow</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Unity’s animation system is based on the concept of Animation Clips, which contain information about how certain objects should change their position, rotation, or other properties over time. Each clip can be thought of as a single linear recording. Animation clips from external sources are created by artists or animators with 3rd party tools such as Max or Maya, or come from motion capture studios or other sources.<br>
</p>

<p>
Animation Clips are then organised into a structured flowchart-like system called an Animator Controller. The Animator Controller acts as a “State Machine” which keeps track of which clip should currently be playing, and when the animations should change or blend together.<br>
</p>

<p>
A very simple Animator Controller might only contain one or two clips, for example to control a powerup spinning and bouncing, or to animate a door opening and closing at the correct time. A more advanced Animator Controller might contain dozens of humanoid animations for all the main character’s actions, and might blend between multiple clips at the same time to provide a fluid motion as the player moves around the scene.<br>
</p>

<p>
Unity’s Animation system also has numerous special features for handling humanoid characters which give you the ability to retarget humanoid animation from any source (Eg. motion capture, the asset store, or some other third-party animation library) to your own character model, as well as adjusting muscle definitions. These special features are enabled by Unity’s Avatar system, where humanoid characters are mapped to a common internal format.<br>
</p>

<p>
Each of these pieces - the Animation Clips, the Animator Controller, and the Avatar, are brought together on a GameObject via the Animator Component. This component has a reference to an Animator Controller, and (if required) the Avatar for this model. The Animator Controller, in turn, contains the references to the Animation Clips it uses.<br>
</p>

<p>
<a href="https://docs.unity3d.com/uploads/Main/MecanimHowItFitsTogether.png" target="_blank" rel="external">Diagram showing how the various parts of the animation system connect together</a><br>
The above diagram shows the following:<br>
</p>

<ol class="org-ol">
<li>Animation clips are imported from an external source or created within Unity. In this example, they are imported motion captured humanoid animations.<br></li>
<li>The animation clips are placed and arranged in an Animator Controller. This shows a view of an Animator Controller in the Animator window. The States (which may represent animations or nested sub-state machines) appear as nodes connected by lines. This Animator Controller exists as an asset in the Project window.<br></li>
<li>The rigged character model (in this case, the astronaut “Astrella”) has a specific configuration of bones which are mapped to Unity’s common Avatar format. This mapping is stored as an Avatar asset as part of the imported character model, and also appears in the Project window as shown.<br></li>
<li>When animating the character model, it has an Animator component attached. In the Inspector view shown above, you can see the Animator Component which has both the Animator Controller and the Avatar assigned. The animator uses these together to animate the model. The Avatar reference is only necessary when animating a humanoid character. For other types of animation, only an Animator Controller is required.<br></li>
</ol>
<p>
Unity’s animation system (Known as “Mecanim”) comes with a lot of concepts and terminology. If at any point, you need to find out what something means, go to our Animation Glossary.<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5"><span class="section-number-3">2.2</span> Legacy animation system</h3>
<div class="outline-text-3" id="text-2-2">
<p>
While Mecanim is recommended for use in most situations, Unity has retained its legacy animation system which existed before Unity 4. You may need to use when working with older content created before Unity 4. For information on the Legacy animation system, see this section<br>
</p>

<p>
Unity intends to phase out the Legacy animation system over time for all cases by merging the workflows into Mecanim.<br>
</p>
</div>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> unity </category>
            
        </categories>
        
        
        <tags>
            
            <tag> unity </tag>
            
            <tag> unity-doc </tag>
            
            <tag> animation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Programming in Lua]]></title>
      <url>http://wolfand11.coding.me/2016/11/08/language/Lua/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><span class="section-number-2">1</span> Programming in Lua</h2>
<div class="outline-text-2" id="text-1">
<a id="more"></a>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4"><span class="section-number-2">2</span> The Language</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3"><span class="section-number-3">2.1</span> Type and Values</h3>
<div class="outline-text-3" id="text-2-1">
</div><div id="outline-container-orgheadline2" class="outline-4">
<h4 id="orgheadline2"><span class="section-number-4">2.1.1</span> bool</h4>
<div class="outline-text-4" id="text-2-1-1">
<p>
lua 在进行条件测试中，nil 和 false 为 false，任何其他值都为 true。<br>
</p>
<div class="org-src-container">

<pre class="src src-lua"><span style="color: #00ffff;">function</span> <span style="color: #87cefa;">PrintBoolCheck</span>(var)
    <span style="color: #00ffff;">if</span> var <span style="color: #00ffff;">then</span>
        <span style="color: #b0c4de;">print</span>(<span style="color: #b0c4de;">tostring</span>(var) .. <span style="color: #ffa07a;">" is true"</span>)
    <span style="color: #00ffff;">else</span>
        <span style="color: #b0c4de;">print</span>(<span style="color: #b0c4de;">tostring</span>(var) .. <span style="color: #ffa07a;">" is false"</span>)
    <span style="color: #00ffff;">end</span>
<span style="color: #00ffff;">end</span>

PrintBoolCheck(<span style="color: #7fffd4;">nil</span>)
PrintBoolCheck(<span style="color: #7fffd4;">false</span>)
PrintBoolCheck({})
<span style="color: #ff0000;">--</span><span style="color: #ff0000;">output</span>
<span style="color: #ff0000;">-- </span><span style="color: #ff0000;">nil is false</span>
<span style="color: #ff0000;">-- </span><span style="color: #ff0000;">false is false</span>
<span style="color: #ff0000;">-- </span><span style="color: #ff0000;">table: 0xed7f00 is true</span>
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline11" class="outline-2">
<h2 id="orgheadline11"><span class="section-number-2">3</span> Tables and Objects</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-orgheadline10" class="outline-3">
<h3 id="orgheadline10"><span class="section-number-3">3.1</span> Metatable and Metamethod</h3>
<div class="outline-text-3" id="text-3-1">
</div><div id="outline-container-orgheadline8" class="outline-4">
<h4 id="orgheadline8"><span class="section-number-4">3.1.1</span> metatable-metamethod 实现支持继承的 class</h4>
<div class="outline-text-4" id="text-3-1-1">
</div><ol class="org-ol"><li><a id="orgheadline5"></a>实现 class 关键要实现以下几点：<br><div class="outline-text-5" id="text-3-1-1-1">
<ul class="org-ul">
<li>类支持构造对象，构造出的对象共用类的方法<br>
可以 new 对象，new 对象时调用类的构造函数<br></li>
<li>子类对象可以访问父类的方法<br></li>
<li>构造对象时，先调用父类构造函数，后调用子类构造函数<br>
通常父类的构造函数调用不封装在 class 的实现中，而是放在定义类的时候，这样可以让上层控制，父类构造函数的调用顺序，以及是否调用。<br></li>
<li>子类对象拥有父类对象的属性<br></li>
</ul>
</div></li>
<li><a id="orgheadline6"></a>Tips:<br><div class="outline-text-5" id="text-3-1-1-2">
<p>
在元方法__index 中取属性时，需要使用 rawget,否则会自己调用自己陷入死循环<br>
</p>
</div></li>
<li><a id="orgheadline7"></a>具体实现<br><div class="outline-text-5" id="text-3-1-1-3">
<p>
在该实现中，我将父类的构造函数调用也封装到 class 实现中了。<br>
</p>
<div class="org-src-container">

<pre class="src src-lua"><span style="color: #00ffff;">function</span> <span style="color: #87cefa;">class</span>(clsName, super)
    <span style="color: #00ffff;">if</span> clsName==<span style="color: #7fffd4;">nil</span> <span style="color: #00ffff;">then</span>
        <span style="color: #b0c4de;">print</span>(<span style="color: #ffa07a;">"Error: className is nil"</span>)
    <span style="color: #00ffff;">end</span>
    <span style="color: #00ffff;">if</span> <span style="color: #b0c4de;">_G</span>[clsName] <span style="color: #00ffff;">then</span>
        <span style="color: #b0c4de;">print</span>(<span style="color: #ffa07a;">"Error: class eixst. className = "</span> .. clsName)
    <span style="color: #00ffff;">end</span>

    <span style="color: #00ffff;">function</span> <span style="color: #87cefa;">invoke_ctor</span>(class, obj, ...)
        <span style="color: #00ffff;">if</span> class~=<span style="color: #7fffd4;">nil</span> <span style="color: #00ffff;">then</span>
            invoke_ctor(<span style="color: #b0c4de;">rawget</span>(class,<span style="color: #ffa07a;">"super"</span>), obj, ...)
            <span style="color: #00ffff;">if</span> <span style="color: #b0c4de;">type</span>(<span style="color: #b0c4de;">rawget</span>(class,<span style="color: #ffa07a;">"ctor"</span>))==<span style="color: #ffa07a;">"function"</span> <span style="color: #00ffff;">then</span>
                class.ctor(obj, ...)
            <span style="color: #00ffff;">end</span>
        <span style="color: #00ffff;">end</span>
    <span style="color: #00ffff;">end</span>
    <span style="color: #00ffff;">function</span> <span style="color: #87cefa;">get_func</span>(class, key)
        <span style="color: #00ffff;">if</span> class~=<span style="color: #7fffd4;">nil</span> <span style="color: #00ffff;">then</span>
            <span style="color: #00ffff;">if</span> <span style="color: #b0c4de;">type</span>(<span style="color: #b0c4de;">rawget</span>(class,key))==<span style="color: #ffa07a;">"function"</span> <span style="color: #00ffff;">then</span>
                <span style="color: #00ffff;">return</span> class[key]
            <span style="color: #00ffff;">else</span>
                <span style="color: #00ffff;">return</span> get_func(<span style="color: #b0c4de;">rawget</span>(class,<span style="color: #ffa07a;">"super"</span>), key)
            <span style="color: #00ffff;">end</span>
        <span style="color: #00ffff;">end</span>
        <span style="color: #b0c4de;">print</span>(<span style="color: #ffa07a;">"Error: not exist member func -&gt; "</span> .. key)
        <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">nil</span>
    <span style="color: #00ffff;">end</span>

    <span style="color: #00ffff;">local</span> <span style="color: #eedd82;">cls</span> = {}
    cls.super = super
    <span style="color: #87cefa;">cls.__index</span> = <span style="color: #00ffff;">function</span> (tbl, key)
        <span style="color: #00ffff;">return</span> get_func(cls, key)
    <span style="color: #00ffff;">end</span>
    <span style="color: #b0c4de;">setmetatable</span>(cls,cls)
    <span style="color: #87cefa;">cls.new</span> = <span style="color: #00ffff;">function</span> (...)
        <span style="color: #00ffff;">local</span> <span style="color: #eedd82;">obj</span> = {}
        <span style="color: #b0c4de;">setmetatable</span>(obj, cls)
        invoke_ctor(cls, obj, ...)
        <span style="color: #00ffff;">return</span> obj
    <span style="color: #00ffff;">end</span>
    <span style="color: #00ffff;">return</span> cls
<span style="color: #00ffff;">end</span>
</pre>
</div>
</div></li></ol>
</div>
<div id="outline-container-orgheadline9" class="outline-4">
<h4 id="orgheadline9"><span class="section-number-4">3.1.2</span> Tips:</h4>
<div class="outline-text-4" id="text-3-1-2">
<ul class="org-ul">
<li>pairs 不会列出元表中__index 的字段<br></li>
<li>判断 tabel 是否含有某个字段<br></li>
</ul>
<div class="org-src-container">

<pre class="src src-lua"><span style="color: #ff0000;">-- </span><span style="color: #ff0000;">&#38169;&#35823;&#30340;&#20889;&#27861;&#65306;</span>
<span style="color: #ff0000;">-- </span><span style="color: #ff0000;">&#24403; svrData.IsLeader == false &#32780; role.data.IsLeader == true &#26102;&#65292;&#19979;&#38754;&#30340;&#20195;&#30721;&#19981;&#20250;&#26356;&#26032; role.data.IsLeader &#30340;&#20540;&#20026; false</span>
<span style="color: #00ffff;">if</span> <span style="color: #b0c4de;">rawget</span>(svrData,<span style="color: #ffa07a;">"IsLeader"</span>) <span style="color: #00ffff;">then</span>
    role.data.IsLeader = svrData.IsLeader
<span style="color: #00ffff;">end</span>
<span style="color: #ff0000;">-- </span><span style="color: #ff0000;">&#27491;&#30830;&#30340;&#20889;&#27861;&#65306;</span>
<span style="color: #00ffff;">if</span> <span style="color: #b0c4de;">rawget</span>(svrData,<span style="color: #ffa07a;">"IsLeader"</span>)~=<span style="color: #7fffd4;">nil</span> <span style="color: #00ffff;">then</span>
    role.data.IsLeader = svrData.IsLeader
<span style="color: #00ffff;">end</span>
<span style="color: #ff0000;">-- </span><span style="color: #ff0000;">&#26368;&#22909;&#30340;&#20889;&#27861;&#65306;</span>
<span style="color: #ff0000;">-- </span><span style="color: #ff0000;">&#36825;&#26679;&#21363;&#20351; svrData[k] == nil &#20063;&#21487;&#20197;&#23545; role.data[k]&#36827;&#34892;&#36171;&#20540;</span>
<span style="color: #00ffff;">for</span> <span style="color: #eedd82;">k</span>,<span style="color: #eedd82;">v</span> <span style="color: #00ffff;">in</span> <span style="color: #b0c4de;">pairs</span>(svrData) <span style="color: #00ffff;">do</span>
    role.data[k] = v
<span style="color: #00ffff;">end</span>
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline14" class="outline-2">
<h2 id="orgheadline14"><span class="section-number-2">4</span> The Standard Library</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-orgheadline13" class="outline-3">
<h3 id="orgheadline13"><span class="section-number-3">4.1</span> OS</h3>
<div class="outline-text-3" id="text-4-1">
</div><div id="outline-container-orgheadline12" class="outline-4">
<h4 id="orgheadline12"><span class="section-number-4">4.1.1</span> 打印代码执行时间的方法</h4>
<div class="outline-text-4" id="text-4-1-1">
<p>
下面打印出的时间单位为秒<br>
</p>
<div class="org-src-container">

<pre class="src src-lua"><span style="color: #00ffff;">local</span> <span style="color: #eedd82;">codeTimer</span> = <span style="color: #b0c4de;">os</span>.<span style="color: #b0c4de;">clock</span>()
<span style="color: #ff0000;">-- </span><span style="color: #ff0000;">... &#27492;&#22788;&#30465;&#30053;&#33509;&#24178;&#19978;&#24093;&#20195;&#30721;</span>
<span style="color: #b0c4de;">print</span>(<span style="color: #ffa07a;">"delta time = "</span> .. <span style="color: #b0c4de;">tostring</span>(<span style="color: #b0c4de;">os</span>.<span style="color: #b0c4de;">clock</span>()-codeTimer))
<span style="color: #ff0000;">-- </span><span style="color: #ff0000;">delta time = 4.928</span>
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline15" class="outline-2">
<h2 id="orgheadline15"><span class="section-number-2">5</span> The C API</h2>
</div>
<div id="outline-container-orgheadline16" class="outline-2">
<h2 id="orgheadline16"><span class="section-number-2">6</span> 参考资料</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li>Programming in Lua ver3<br></li>
<li>lua online<br></li>
</ul>
<p>
<a href="https://www.lua.org/cgi-bin/demo" target="_blank" rel="external">https://www.lua.org/cgi-bin/demo</a><br>
</p>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> language </category>
            
        </categories>
        
        
        <tags>
            
            <tag> language </tag>
            
            <tag> lua </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unity Note]]></title>
      <url>http://wolfand11.coding.me/2016/10/27/unity/UnityNote/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><span class="section-number-2">1</span> 说明</h2>
<div class="outline-text-2" id="text-1">
<p>
该文章记录了翻译的 Unity 官方文档，以及学习过程中总结的文档<br>
相关代码放在: <a href="https://github.com/wolfand11/StudyProjects/tree/master/Unity" target="_blank" rel="external">https://github.com/wolfand11/StudyProjects/tree/master/Unity</a><br>
</p>
<a id="more"></a>
</div>
</div>

<div id="outline-container-orgheadline43" class="outline-2">
<h2 id="orgheadline43"><span class="section-number-2">2</span> UI</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5"><span class="section-number-3">2.1</span> Canvas</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Canvas 是一个区域，所有的 UI 元素必须在其中。Canvas 是包含一个 Canvas 组件的 GameObject。所有的 UI 元素必须是这个 Canvas 的子节点。<br>
</p>
</div>
<div id="outline-container-orgheadline2" class="outline-4">
<h4 id="orgheadline2"><span class="section-number-4">2.1.1</span> 元素的渲染次序</h4>
<div class="outline-text-4" id="text-2-1-1">
<p>
UI 元素在 Canvas 中的渲染次序，和他们在 Hierarchy 中的次序一致。第一个子节点先渲染，第二个子节点次之，等等。当两个 UI 元素重叠时，后面渲染的 UI 元素将出现在前面渲染的 UI 元素上面。通过改变 UI 元素在 Hierarchy 视图中的位置来改变他们的渲染顺序。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-4">
<h4 id="orgheadline3"><span class="section-number-4">2.1.2</span> 渲染模式</h4>
<div class="outline-text-4" id="text-2-1-2">
<p>
ScreenSpace-Overlay 渲染模式将被渲染的 UI 元素放在场景最上面的屏幕上。如果屏幕尺寸或分辨率改变，Canvas 将会自动改尺寸来适配屏幕。<br>
ScreenSpace-Camera 渲染模式和 ScreenSpace-Overlay 渲染模式类似，但是 Canvas 被放置在一个特定的摄像机前的指定距离处。UI 元素被该摄像机渲染，也就是说摄像机的设置会影响 UI 的显示效果。如果摄像机被设置为透视投影，透视的扭曲量可通过 Camera 的 Field Of View 来控制。<br>
WorldSpace 渲染模式下，Canvas 就像任何场景中的物体一样。Canvas 的大小可以被手动设置，UI 元素会被基于他们的 3D 位置而绘制。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-4">
<h4 id="orgheadline4"><span class="section-number-4">2.1.3</span> 实例说明</h4>
<div class="outline-text-4" id="text-2-1-3">
<p>
UI/Scenes/UICanvas 中，改变屏幕大小，ScreenSpace-Overlay 和 ScreenSpace-Camera 模式下的文字大小不会改变，Canvas 的尺寸会随着屏幕大小而调整。WorldSpace 模式下的文字大小会改变，Canvas 的尺寸不会随屏幕大小而改变。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline15" class="outline-3">
<h3 id="orgheadline15"><span class="section-number-3">2.2</span> Basic Layout</h3>
<div class="outline-text-3" id="text-2-2">
</div><div id="outline-container-orgheadline14" class="outline-4">
<h4 id="orgheadline14"><span class="section-number-4">2.2.1</span> Rect Transform</h4>
<div class="outline-text-4" id="text-2-2-1">
<p>
Rect Transform 是专门针对 UI 开发的用来代替 Transform 的。Rect Transform 比 Transform 要多 width 和 height 两个属性，来指定一个矩形区域。<br>
对于包含 RectTransform 属性的游戏对象，Rect Tool 在改变尺寸时，会改变 RectTransform 的 size 大小。对于不包含 RectTransform 属性的游戏对象（如 Sprite），Rect Tool 改变的是游戏对象的 Scale。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline6"></a>Pivot<br><div class="outline-text-5" id="text-2-2-1-1">
<p>
中心点会影响缩放、旋转、改变尺寸的结果。<br>
</p>
</div></li>
<li><a id="orgheadline7"></a>Anchors<br><div class="outline-text-5" id="text-2-2-1-2">
<p>
如果 Rect Transform 的父节点也是个 RectTransform，那么子节点可以通过多种方式 anchored 到父节点上。(其实，Anchors 定义了一个相对于父节点矩形的 Anchor 矩形区域-AnchorRect。)<br>
</p>
</div></li>
<li><a id="orgheadline8"></a>PosX PosY Width Height<br><div class="outline-text-5" id="text-2-2-1-3">
<p>
当 Anchors 重合时，PosX PosY 表示 Pivot 相对于 Anchors 的位置,Width Height 表示矩形区域的宽高。<br>
当 Anchors 在水平方向上重合，在竖直方向上分开时，PosX 表示 Pivot 相对于 Anchors 的水平位置，Width 表示矩形区域的宽。PosY 变为了 Top，表示中心点相对于 Anchors 最上面的距离，Height 变为了 Bottom 表示中心点相对于 Anchors 最下面的距离。<br>
当 Anchors 全部分开后，属性变为了 Left Right Top Bottom，分别表示节点的 Rect 相对于 AnchorRect 的位置。<br>
</p>
</div></li>
<li><a id="orgheadline9"></a>Blue 模式和 Raw 编辑模式<br><div class="outline-text-5" id="text-2-2-1-4">
<p>
Blue 模式下，会忽略 UI 元素的 Local Rotation 和 Local Scale，方便以原來的旋转和大小调整物体。<br>
Raw 模式下，调整 Pivot 和 Anchors 时会保持 UI 元素的位置和大小。<br>
</p>
</div></li>
<li><a id="orgheadline13"></a>Script 中常用属性和方法<br><ol class="org-ol"><li><a id="orgheadline10"></a>rectTransform.rect<br><div class="outline-text-6" id="text-2-2-1-5-1">
<p>
rectTransform.rect 该属性返回表示当前 UI 元素的矩形区域，position 表示矩形左下的坐标（基于当前 UI 元素的本地坐标），size 表示矩形区域的尺寸。<br>
</p>
</div></li>
<li><a id="orgheadline11"></a>rectTransform.TransformPoint<br><div class="outline-text-6" id="text-2-2-1-5-2">
<p>
rectTransform.TransformPoint(pos)可以将 UI 元素的本地坐标转换为世界坐标。<br>
</p>
</div></li>
<li><a id="orgheadline12"></a>rectTransform 属性设置<br><div class="outline-text-6" id="text-2-2-1-5-3">
<p>
在脚本中设置 rectTransform 属性时，先将 rectTransform 所属的 GameObject 加到场景中，然后再设置 rectTransform 相关的属性，否则 GameObject 在加入场景时会修改 RectTransform 的属性。<br>
</p>
<div class="org-src-container">

<pre class="src src-c#">// 下面代码可以将一个 RectTransform 设置为其父节点大小，中心和其父节点重合
public static void ResetRectToFullScreenAndInMiddle (RectTransform rectTransform)
{
  if (rectTransform != null) {
    rectTransform.pivot = new Vector2 (0.5f, 0.5f);
    rectTransform.localScale = Vector3.one;
    rectTransform.anchorMin = Vector2.zero;
    rectTransform.anchorMax = Vector2.one;
    rectTransform.sizeDelta = Vector2.zero;
    rectTransform.localPosition = Vector3.zero;
  }
}
</pre>
</div>
</div></li></ol></li></ol>
</div>
</div>

<div id="outline-container-orgheadline20" class="outline-3">
<h3 id="orgheadline20"><span class="section-number-3">2.3</span> Visual Components</h3>
<div class="outline-text-3" id="text-2-3">
</div><div id="outline-container-orgheadline16" class="outline-4">
<h4 id="orgheadline16"><span class="section-number-4">2.3.1</span> Text</h4>
<div class="outline-text-4" id="text-2-3-1">
<p>
Best Fit 选项会修改文字的尺寸来适应可显示的区域。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline17" class="outline-4">
<h4 id="orgheadline17"><span class="section-number-4">2.3.2</span> Image</h4>
<div class="outline-text-4" id="text-2-3-2">
<p>
ImageType 选项定义了被应用的 Sprite 如何显示:<br>
Simple 表示均等地缩放整个 sprite;<br>
Sliced 表示使用 3x3 分割的 Sprite，当修改尺寸时，四个角不会扭曲变形，只有中间的部分会缩放;<br>
Tiled 和 Sliced 类似，但是它不会缩放中心的内容，它是重复中心的内容;<br>
Filled 和 Simple 一样的方式显示 Sprite，只是它会从原点开始以指定的方向、方法以及总量来显示图片。<br>
选择 Simple 或 Filled 时，可以通过 Set Native Size 将 Image 的大小设置为原始图片的大小。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline18" class="outline-4">
<h4 id="orgheadline18"><span class="section-number-4">2.3.3</span> Mask</h4>
<div class="outline-text-4" id="text-2-3-3">
<p>
Mask 组件不是一个可视化的 UI 控件，但它是控制子 UI 元素显示的一种方式。Mask 会限制子 UI 元素的形状为他们父节点的形状。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline19" class="outline-4">
<h4 id="orgheadline19"><span class="section-number-4">2.3.4</span> Effect</h4>
<div class="outline-text-4" id="text-2-3-4">
<p>
Outline 组件可以为 UI 元素添加描边效果。通过修改 EffectColor 为描边设置颜色，EffectDistance 设置描边的相对位置。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline30" class="outline-3">
<h3 id="orgheadline30"><span class="section-number-3">2.4</span> Interaction Components</h3>
<div class="outline-text-3" id="text-2-4">
</div><div id="outline-container-orgheadline21" class="outline-4">
<h4 id="orgheadline21"><span class="section-number-4">2.4.1</span> Selectable Base Class</h4>
<div class="outline-text-4" id="text-2-4-1">
<p>
Selectable 是所有可交互组件的基类，它按照统一的方式来处理元素。<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Property</th>
<th scope="col" class="org-left">Function</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Interactible</td>
<td class="org-left">该属性决定了组件是否接受输入。当它被设置为 false 时，交互是不可用的，而且转换状态被设置为 Disable</td>
</tr>

<tr>
<td class="org-left">Transition</td>
<td class="org-left">对于一个可选中的组件，依据它当前所在状态有很多转换选项。不同的状态包括：normal，highlight,pressed,disabled</td>
</tr>

<tr>
<td class="org-left">Navigation</td>
<td class="org-left">有一系列的导航选项来控制如何实现键盘导航</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-orgheadline22" class="outline-4">
<h4 id="orgheadline22"><span class="section-number-4">2.4.2</span> Button</h4>
<div class="outline-text-4" id="text-2-4-2">
<p>
状态改变触发的 UnityEvent：OnClick<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline23" class="outline-4">
<h4 id="orgheadline23"><span class="section-number-4">2.4.3</span> Toggle</h4>
<div class="outline-text-4" id="text-2-4-3">
<p>
将多个 Toggle 的 Group 属性指定相同的包含 ToggleGroup 组件的 GameObject，可将这些 Toggle 指定为一组。<br>
状态改变触发的 UnityEvent：OnValueChanged<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline24" class="outline-4">
<h4 id="orgheadline24"><span class="section-number-4">2.4.4</span> Toggle Group</h4>
<div class="outline-text-4" id="text-2-4-4">
<p>
为 GameObject 添加 ToggleGroup 可以分组管理 Toggle。Allow Switch Off 属性表示，点击分组中 On 的 Toggle，该 Toggle 会变为 Off。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline25" class="outline-4">
<h4 id="orgheadline25"><span class="section-number-4">2.4.5</span> Slider</h4>
<div class="outline-text-4" id="text-2-4-5">
<p>
Slider 有一个整型值，拖拉可以在最小和最大范围内改变该值。WholeNumbers 属性可以指定整型值为整数。<br>
状态改变触发的 UnityEvent：OnValueChanged<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline26" class="outline-4">
<h4 id="orgheadline26"><span class="section-number-4">2.4.6</span> ScrollBar</h4>
<div class="outline-text-4" id="text-2-4-6">
<p>
ScrollBar 有一个 0 到 1 的整型值。Number Of Steps 属性表示拖动 ScrollBar 从 0 变为 1 一共需要多少个 Step，该值为 0 时，ScrollBar 的拖动是平滑的。<br>
状态改变触发的 UnityEvent：OnValueChanged<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline27" class="outline-4">
<h4 id="orgheadline27"><span class="section-number-4">2.4.7</span> Dropdown</h4>
<div class="outline-text-4" id="text-2-4-7">
<p>
状态改变触发的 UnityEvent：OnValueChanged<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline28" class="outline-4">
<h4 id="orgheadline28"><span class="section-number-4">2.4.8</span> InputField</h4>
<div class="outline-text-4" id="text-2-4-8">
<p>
ContentType 属性表示输入框内容的类型。Standard、Autocorrected、Integer Number、Decimal Number、Alphanumeric、Name、Email、Password*、Pin、Custom。<br>
OnValueChanged： 输入框中内容改变会触发该 UnityEvent<br>
EndEdit： 编辑完成时会触发该 UnityEvent<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline29" class="outline-4">
<h4 id="orgheadline29"><span class="section-number-4">2.4.9</span> ScrollRect(ScrollView)</h4>
<div class="outline-text-4" id="text-2-4-9">
<p>
Horizontal 选项控制是否可以在水平方向滑动。<br>
Vertical 选项控制是否可以在竖直方向滑动<br>
MovementType 选项控制移动的类型，Unrestricted 表示不限制滑动范围；Clamped 表示限制滑动范围；Elastic 表示限制滑动范围，并且滑出范围后会自动回弹回来。<br>
ScrollRect 下的子节点 Viewport 用来控制显示区域，Viewport 上有一个 Mask 组件。Viewport 下的子节点 Content 用来放置滑动区域内要显示的内容。<br>
Vertical/Horizontal ScrollBar 属性用来绑定 ScrollRect 和 ScrollBar。<br>
OnValueChanged：滑动位置改变后触发该 UnityEvent<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline31" class="outline-3">
<h3 id="orgheadline31"><span class="section-number-3">2.5</span> Animation Integration</h3>
<div class="outline-text-3" id="text-2-5">
<p>
点击控件属性面板中的 Auto Generate Animation 按钮，可以为该控件生成相关动画配置。<br>
选中 Animation 对象，在 Inspector 面板中有 LoopTime 选项可以控制是否循环播放动画。<br>
Tips:<br>
UI 的 Animation 变换模式和 Unity 遗弃的动画系统是不兼容的。只能使用 Animator 组件。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline42" class="outline-3">
<h3 id="orgheadline42"><span class="section-number-3">2.6</span> Auto Layout</h3>
<div class="outline-text-3" id="text-2-6">
<p>
自动布局系统提供了很多方式将元素放置在嵌套的布局分组中，例如 horizontal groups,vertical groups,grids。它允许元素依据其包含的内容自动地改变大小。自动布局系统是以 RectTransform 为基础构建的。<br>
</p>
</div>
<div id="outline-container-orgheadline32" class="outline-4">
<h4 id="orgheadline32"><span class="section-number-4">2.6.1</span> Layout Element</h4>
<div class="outline-text-4" id="text-2-6-1">
<p>
自动布局系统是基于布局元素和布局控制器的。一个布局元素是包含 RectTransform 组件的一个游戏对象，当然这个游戏对象可以包含其他任何组件。布局元素知道它自己的大小。布局元素不会直接设置自己的大小，但是其他的就像布局控制功能的组件可以利用布局元素提供的信息来计算出一个尺寸大小让其使用。<br>
一个布局元素定义了下面的属性：Minimum width、Minimum height、Preferred width、Preferred height、Flexible width、Flexible height。<br>
</p>

<p>
Layout Controller 使用 Layout elements 提供的信息的例子是 Content Size Fitter 和各种 Layout Group 组件。修改 layout group 中 layout elements 尺寸遵从下面原则：首先会分配最小的尺寸；如果还有足够的空间，就分配 PreferredSize;如果还有额外的空间可用，就分配 flexible size。<br>
</p>

<p>
任何包含 RectTransform 的游戏对象都可以被当做一个布局元素。它们的默认 mininum、prefered、和 flexible 尺寸为 0.特定的组件加到该游戏对象上时会改变这些布局属性的值。例如，Image 和 Text 组件会修改 preferred width 和 height 来匹配 sprite 和 text 的内容。<br>
</p>

<p>
如果你想覆盖一个游戏对象的布局属性（minimum, preferred, or flexible size),你可以为该游戏对象添加一个 Layout Element 组件。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline37" class="outline-4">
<h4 id="orgheadline37"><span class="section-number-4">2.6.2</span> Layout Controller</h4>
<div class="outline-text-4" id="text-2-6-2">
<p>
Layout Controller 组件可以用来控制一个过多个 Layout Element 的尺寸和位置。一个 Layout Controller 可以控制它自己所在的 GameObject 的 Layout Element 也可以控制子节点的 Layout Element。<br>
一个功能为 LayoutController 的组件其功能同时可以为 Layout Element.<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline33"></a>Content Size Fitter<br><div class="outline-text-5" id="text-2-6-2-1">
<p>
Content Size Fitter 的功能是控制它自己所在 GameObject 的 LayoutElement。如果将 Horizontal Fit 或 Vertical Fit 设置为 Preferred, Rect Transform 将会调整它自己的 width and/or height 来适应内容的大小.<br>
</p>
</div></li>
<li><a id="orgheadline34"></a>Aspect Ratio Fitter<br><div class="outline-text-5" id="text-2-6-2-2">
<p>
Aspect Ratio Fitter 的功能是控制它自己所在 GameObject 的 LayoutElement 的 Size。<br>
Aspect Mode 选项控制如何改变矩形尺寸来满足特定纵横比。<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">属性</th>
<th scope="col" class="org-left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">None</td>
<td class="org-left">矩形不必符合指定宽高比</td>
</tr>

<tr>
<td class="org-left">Width Controls Height</td>
<td class="org-left">高度基于宽度来自动调整</td>
</tr>

<tr>
<td class="org-left">Height Controls Width</td>
<td class="org-left">宽度基于高度自动调整</td>
</tr>

<tr>
<td class="org-left">Fit In Parent</td>
<td class="org-left">宽度、高度、位置、锚点自动基于父节点调整， 使矩形在父节点内并且保持指定宽高比，这会让有些在父节点内的空间没有被当前节点的矩形所覆盖。</td>
</tr>

<tr>
<td class="org-left">Envelope Parent</td>
<td class="org-left">宽度、高度、位置、锚点自动基于父节点调整，使矩形覆盖父节点的整个区域且保持特定宽高比，这会让当前节点的矩形超出父节点的范围。</td>
</tr>
</tbody>
</table>
<p>
Aspect Ratio 选项用来设置 width/height 的比值。<br>
</p>
</div></li>
<li><a id="orgheadline35"></a>Layout Groups<br><div class="outline-text-5" id="text-2-6-2-3">
<p>
作为 layout controller 的 layout group，它的作用是控制子 layout elements 的位置和尺寸。<br>
一个 layout group 不会控制自己的尺寸。它作为一个 layout element 可以被其他 layout controller 控制或者是手动设置。<br>
无论一个 layout group 分配了多大尺寸，它都会尽力为每一个子 layout element 分配合适的空间。layout group 可以以任意的方式嵌套。<br>
</p>
</div></li>
<li><a id="orgheadline36"></a>Driven Rect Transform properties<br><div class="outline-text-5" id="text-2-6-2-4">
<p>
因为自动布局系统中的 layout controller 会自动控制某些 UI 元素的尺寸和位置，所以不要手动编辑他们的尺寸和位置，否则，这些改变会被 layout controller 的自动布局重置。<br>
Rect Transform 有一个属性驱动的概念来达到上面的目的。例如，ContentSizeFitter 有 HorizontalFit 属性来设置使用 Minimum 还是 Preferred 来控制 GameObject 的 RectTransform 的宽度，选择其中一个就会让 Rect Transform 的 width 属性变为只读。<br>
属性驱动还可以防止手动的编辑。一个布局可以只随 GameView 的分辨率或尺寸而变化。这改变驱动属性的值，反过来又会修改 layout element 的位置和尺寸。但是，只改变 GameView 的大小不应该将 Scene 标记为未保存的。为了避免这样，驱动值不会作为 Scene 的部分被保存，驱动值的改动不会标记场景是否修改。<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline41" class="outline-4">
<h4 id="orgheadline41"><span class="section-number-4">2.6.3</span> Technical Details</h4>
<div class="outline-text-4" id="text-2-6-3">
<p>
自动布局系统来自内置的某些组件，但是也可以创建新的组件来实现自定义的布局控制。可以通过实现自动布局系统可识别的特定接口来创建这样的组件。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline38"></a>Layout Interfaces<br><div class="outline-text-5" id="text-2-6-3-1">
<p>
如果一个组件实现了 ILayoutElement 接口，它就会被自动布局系统当做一个 layout element。<br>
如果一个组件实现了 ILayoutGroup 接口，它被认为用来管理子节点的 RectTransforms。<br>
如果一个组件实现了 ILayoutSelfController 接口，它被认为用来管理自己的 RectTransform。<br>
</p>
</div></li>
<li><a id="orgheadline39"></a>Layout Calculations<br><div class="outline-text-5" id="text-2-6-3-2">
<p>
自动布局系统安装下面的顺序来计算和执行布局：<br>
1 通过调用 ILayoutElement 的 CalculateLayoutInputHorizontal 方法来计算 layout element 的 minimum,preferred,flexible widths。这是按照从下到上的顺序执行的，子节点会比他们的父节点先计算，这样父节点就可以在它的计算中获得它的子节点的信息。<br>
2 layout element 的有效宽度会被计算，并且通过 ILayoutController 的 SetLayoutHorizontal 方法进行设置。这是按照从上到下的顺序进行的，子节点会比他们的父节点晚计算，因为子节点宽度的分配会基于父节点的整个宽度大小。这个步骤之后，layout elements 就会有他们新的宽度。<br>
3 通过调用 ILayoutElement 的 CalculateLayoutInputVertical 方法来计算 layout element 的 minimum,preferred,flexible heights.这是按照从下到上的顺序执行的，子节点会比他们的父节点先计算，这样父节点就可以在它的计算中获得它的子节点的信息。<br>
4 layout element 的有效高度会被计算，并且通过 ILayoutController 的 SetLayoutVertical 方法进行设置。这是按照从上到下的顺序进行的，子节点会比他们的父节点晚计算，因为子节点宽度的分配会基于父节点的整个高度大小。这个步骤之后，layout elements 就会有他们新的高度。<br>
从上面可以看出，自动布局系统会先计算宽度，后计算高度，所以高度计算可以依赖宽度，但是宽度计算永远不能依赖高度。<br>
</p>
</div></li>
<li><a id="orgheadline40"></a>Triggering Layout Rebuild<br><div class="outline-text-5" id="text-2-6-3-3">
<p>
当组件的属性被修改引起当前的布局不可用时，需要对布局进行重新计算。可以通过下面的调用来触发布局的重新计算：<br>
</p>
<div class="org-src-container">

<pre class="src src-c#">LayoutRebuilder.MarkLayoutForRebuild (transform as RectTransform);
</pre>
</div>
<p>
这个重新构建不会立刻执行，而是在当前帧的最后，在渲染发生之前执行。不立即执行的原因是在一帧内可能会重建多次，如果每次都立即执行，会导致明显的性能下降。<br>
通常需要在下面这些地方触发布局的重新计算:<br>
在可以修改布局的属性设置函数中。<br>
在下面这些回调函数中：<br>
OnEnable<br>
OnDisable<br>
OnRectTransformDimensionsChange<br>
OnValidate (only needed in the editor, not at runtime)<br>
OnDidApplyAnimationProperties<br>
</p>
</div></li></ol>
</div>
</div>
</div>
<div id="outline-container-orgheadline47" class="outline-2">
<h2 id="orgheadline47"><span class="section-number-2">3</span> UI How Tos</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-orgheadline46" class="outline-3">
<h3 id="orgheadline46"><span class="section-number-3">3.1</span> Designing UI for Multiple Resolutions</h3>
<div class="outline-text-3" id="text-3-1">
<p>
通过 Anchors 和 Canvas Scaler 来实现多分辨率适配。Anhors 可以处理 UI 元素的相对位置，CanvasScaler 用来处理 UI 元素的大小。<br>
</p>
</div>
<div id="outline-container-orgheadline44" class="outline-4">
<h4 id="orgheadline44"><span class="section-number-4">3.1.1</span> Canvas Scaler</h4>
<div class="outline-text-4" id="text-3-1-1">
<p>
CanvasScaler 组件用来控制 Canvas 上 UI 元素的像素密度和总体的缩放。这个缩放会影响到 Canvas 下的所有 UI 元素，包括字体的大小，和 Sprite 的边框。<br>
UI Scale Mode 选项用来控制 UI 元素如何被缩放。<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">ModeType</th>
<th scope="col" class="org-left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Constant Pixel Size</td>
<td class="org-left">不考虑屏幕尺寸，UI 元素的尺寸保持和像素大小一样</td>
</tr>

<tr>
<td class="org-left">Scale With Screen Size</td>
<td class="org-left">使 UI 元素在大的屏幕上变大</td>
</tr>

<tr>
<td class="org-left">Constant Physical Size</td>
<td class="org-left">不考虑屏幕尺寸和分辨率大小，UI 元素保持物理尺寸</td>
</tr>
</tbody>
</table>

<p>
Constant Pixel Size 缩放模式的参数：<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">ArgName</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Scale Factor</td>
<td class="org-left">按照该缩放值缩放所有 Canvas 下的 UI 元素.</td>
</tr>

<tr>
<td class="org-left">Reference Pixels Per Unit</td>
<td class="org-left">如果 Sprite 有 ‘Pixels Per Unit’ 设置,Sprite 中的一个像素就会占 UI 中的一个单位</td>
</tr>
</tbody>
</table>

<p>
Scale With Screen Size 缩放模式的参数：<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">ArgName</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Reference Resolution</td>
<td class="org-left">UI 布局的设计分辨率.如果屏幕分辨率更大（更小），则 UI 将被放大（缩小）</td>
</tr>

<tr>
<td class="org-left">Screen Match Mode</td>
<td class="org-left">如果当前分辨率和 Reference 分辨率纵横比不一致，该参数用来指定缩放如何缩放 Canvas 的区域</td>
</tr>

<tr>
<td class="org-left">1 Match Width or Height</td>
<td class="org-left">以 width 或 height 或他们之间的值为依据缩放 canvas 区域</td>
</tr>

<tr>
<td class="org-left">2 Expand</td>
<td class="org-left">在水平或竖直方向上扩展 canvas 区域，从而让 canvas 区域比 reference 区域大</td>
</tr>

<tr>
<td class="org-left">3 Shrink</td>
<td class="org-left">在水平或竖直方向上裁剪 canvas 区域，从而让 canvas 区域比 reference 区域小</td>
</tr>

<tr>
<td class="org-left">Reference Pixels Per Unit</td>
<td class="org-left">如果一个 Sprite 有 ‘Pixels Per Unit’设置,Sprite 中的一个像素就会占用 UI 中的一个单位</td>
</tr>
</tbody>
</table>
<p>
当 ScreenMatchMode 选用 Match Width or Height 时，会有 Match 选项可供调节，它用来确定依据 width 还是 height 或者是他们之间的一个值来缩放 canvas 的区域。<br>
</p>

<p>
Constant Physical Size 缩放模式的参数:<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">ArgName</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Physical Unit</td>
<td class="org-left">用来指定位置和尺寸使用的物理单位</td>
</tr>

<tr>
<td class="org-left">Fallback Screen DPI</td>
<td class="org-left">如果屏幕的 DPI 不可知，则假定其 DPI 为该选项设置的值</td>
</tr>

<tr>
<td class="org-left">Default Sprite DPI</td>
<td class="org-left">有‘Pixels Per Unit’配置的 Sprites 使用的每英寸像素数目将匹配‘Reference Pixels Per Unit’配置</td>
</tr>

<tr>
<td class="org-left">Reference Pixels Per Unit</td>
<td class="org-left">如果 Sprite 有‘Pixels Per Unit’设置, 则它的 DPI 将匹配‘Default Sprite DPI’设置</td>
</tr>
</tbody>
</table>

<p>
World Space Canvas 缩放模式的参数(当将 Canvas 的渲染模式设置为 WorldSpace 时会显示):<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">ArgName</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Dynamic Pixels Per Unit</td>
<td class="org-left">在 UI 中动态创建 bitmaps 时（例如创建 Text），每个单位用到的像素数目。</td>
</tr>

<tr>
<td class="org-left">Reference Pixels Per Unit</td>
<td class="org-left">如果 Sprite 有‘Pixels Per Unit’配置,Sprite 中的每个像素会占用世界中的一个单元。如果‘Reference Pixels Per Unit’被设置为 1,Sprite 的‘Pixels Per Unit’配置将按原样使用</td>
</tr>
</tbody>
</table>

<p>
Tips:<br>
CanvasScaler 是通过修改 Canvas 的缩放值来实现缩放的。该缩放值可通过下面的方式获得：<br>
需要注意的是，CanvasScaler 的 scaleFactor 属性和 Canvas 的 scaleFactor 并不是同一个值。CanvasScaler 的 scaleFactor 表示在 Constant Pixel Size 模式下 UI 元素的缩放值。而 Canvas 得 scaleFactor 表示无论什么模式下，当前 Canvas 的缩放值。<br>
</p>
<div class="org-src-container">

<pre class="src src-c#">GetComponentInParent&lt;Canvas&gt; ().scaleFactor;
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline45" class="outline-4">
<h4 id="orgheadline45"><span class="section-number-4">3.1.2</span> Screen And Reference Resolution</h4>
<div class="outline-text-4" id="text-3-1-2">
<p>
Screen.width 表示当前视图的像素宽度<br>
Screen.height 表示当前视图的像素高度<br>
Screen.resolutions 表示显示设备支持的所有全屏的分辨率<br>
Screen.currentResolution 表示显示设备当前全屏的分辨率<br>
</p>
<pre class="example">
// 下面打印出了 Screen.currentResolution 和 Screen.resolutions 的内容：
Screen.currentResolution = 1280 x 800 @ 0Hz
Screen.resolutions = 640 x 480 @ 0Hz
Screen.resolutions = 720 x 480 @ 0Hz
Screen.resolutions = 800 x 500 @ 0Hz
Screen.resolutions = 800 x 600 @ 0Hz
Screen.resolutions = 1024 x 640 @ 0Hz
Screen.resolutions = 1024 x 768 @ 0Hz
Screen.resolutions = 1152 x 720 @ 0Hz
Screen.resolutions = 1280 x 800 @ 0Hz
</pre>
<p>
可以通过下面的方法来获取 ReferenceResolution<br>
</p>
<div class="org-src-container">

<pre class="src src-c#">public static Vector2 GetCanvasReferenceResolution (GameObject gObj)
{
  CanvasScaler scaler = GUtility.GetComponentInSelfAndParent&lt;CanvasScaler&gt; (gObj);
  return scaler.referenceResolution;
}
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline95" class="outline-2">
<h2 id="orgheadline95"><span class="section-number-2">4</span> Scripts</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-orgheadline48" class="outline-3">
<h3 id="orgheadline48"><span class="section-number-3">4.1</span> Scene</h3>
<div class="outline-text-3" id="text-4-1">
<p>
SceneManager.SceneManager.GetActiveScene().GetRootGameObjects()不会返回被标记为不被销毁的对象。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline51" class="outline-3">
<h3 id="orgheadline51"><span class="section-number-3">4.2</span> Object</h3>
<div class="outline-text-3" id="text-4-2">
<p>
Object 中的几个静态方法。<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Name</th>
<th scope="col" class="org-left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Destroy</td>
<td class="org-left">删除一个 <b>游戏对象</b> 或 <b>组件</b> 或 <b>资源</b> .</td>
</tr>

<tr>
<td class="org-left">DestroyImmediate</td>
<td class="org-left">立即删除对象. 强烈建议使用 Destroy 代替此方法.</td>
</tr>

<tr>
<td class="org-left">DontDestroyOnLoad</td>
<td class="org-left">在加载一个新场景时，该对象不被自动销毁</td>
</tr>

<tr>
<td class="org-left">FindObjectOfType</td>
<td class="org-left">返回第一个被加载的 <b>激活的</b> Type 类型的对象.</td>
</tr>

<tr>
<td class="org-left">FindObjectsOfType</td>
<td class="org-left">返回所有被加载的 <b>激活的</b> Type 类型的对象.</td>
</tr>

<tr>
<td class="org-left">Instantiate</td>
<td class="org-left">克隆原始对象并返回克隆体.</td>
</tr>
</tbody>
</table>
</div>
<div id="outline-container-orgheadline49" class="outline-4">
<h4 id="orgheadline49"><span class="section-number-4">4.2.1</span> Destroy</h4>
<div class="outline-text-4" id="text-4-2-1">
<ol class="org-ol">
<li>调用 Destroy 后，会先调用被删除对象的 OnDisable 然后再调用 OnDestroy<br></li>
<li>如果 Object.Destroy(obj)中的 obj 为组件，会先将该组件从 GameObject 上移除，然后销毁该组件；如果 obj 为一个 GameObject，会删除该游戏对象、它的所有组件、以及它 transform 中记录的所有子节点。<br></li>
<li>调用 Destory 后，并不会立即销毁对象，会延迟到当前 Update 执行结束以后，但在渲染之前会销毁。<br>
如果在 OnEnable 中调用 Destroy，会立即触发 OnDisable 方法，但是不会立即触发 OnDestroy 方法， <b>当前所有对象</b> 的 OnEnable 执行结束后才调用 OnDestroy。<br>
如果在 Start 中调用 Destroy，会立即触发 OnDisable 方法，但是不会立即触发 OnDestroy 方法， <b>当前所有对象</b> 的 Start 执行结束后才调用 OnDestroy。<br>
如果在 Update 中调用 Destory，会立即触发 OnDisable 方法，但是不会立即触发 OnDestroy 方法， <b>当前所有对象</b> 的 Update 执行结束后才调用 OnDestroy。<br>
如果在 LateUpdate 中调用 Destroy，会立即触发 OnDisable 方法，但是不会立即触发 OnDestroy 方法， <b>当前所有对象</b> 的 LateUpdate 执行结束后才调用 OnDestroy。<br>
如果在 OnPostRender 中调用 Destroy，会立即触发 OnDisable 方法，但是不会立即触发 OnDestroy 方法， <b>当前对象</b> 的 OnPostRender 执行结束后才调用 OnDestroy。<br></li>
</ol>
</div>
</div>
<div id="outline-container-orgheadline50" class="outline-4">
<h4 id="orgheadline50"><span class="section-number-4">4.2.2</span> DontDestroyOnLoad</h4>
<div class="outline-text-4" id="text-4-2-2">
<p>
DontDestroyOnLoad 只对场景中的 Root GameObjects 或他们上的组件有效。<br>
创建一个空对象，然后对其调用 DontDestroyOnLoad 可以将该对象变为当前场景的 Root GameObject。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline58" class="outline-3">
<h3 id="orgheadline58"><span class="section-number-3">4.3</span> GameObject</h3>
<div class="outline-text-3" id="text-4-3">
</div><div id="outline-container-orgheadline52" class="outline-4">
<h4 id="orgheadline52"><span class="section-number-4">4.3.1</span> GameObject.Find(string childName) 静态成员方法</h4>
<div class="outline-text-4" id="text-4-3-1">
<ol class="org-ol">
<li>需要注意的是该方法会循环查找整个场景树的节点(根节点和子节点都会查找)。找到第一个名称为 childName 的节点。<br></li>
<li>该方法会返回标记为不被销毁的对象。<br></li>
<li>该方法只返回被激活的对象，如果 gameObject 没有被激活，则不会返回。<br></li>
</ol>
</div>
</div>
<div id="outline-container-orgheadline53" class="outline-4">
<h4 id="orgheadline53"><span class="section-number-4">4.3.2</span> GetComponent GetComponents</h4>
<div class="outline-text-4" id="text-4-3-2">
<p>
<a href="#orgtarget1">4.4.5</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline55" class="outline-4">
<h4 id="orgheadline55"><span class="section-number-4">4.3.3</span> GameObject 定义的其他成员方法</h4>
<div class="outline-text-4" id="text-4-3-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Name</th>
<th scope="col" class="org-left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">AddComponent</td>
<td class="org-left">添加一个类名称为 className 的组件到当前对象上.</td>
</tr>

<tr>
<td class="org-left">BroadcastMessage</td>
<td class="org-left">调用当前对象以及其子对象上每个 MonoBehavior 上的名字单位 methodName 的方法</td>
</tr>

<tr>
<td class="org-left">CompareTag</td>
<td class="org-left">判断 gameObject 的 tag 与参数的 tag 相同 ?</td>
</tr>

<tr>
<td class="org-left">GetComponent</td>
<td class="org-left">获取当前对象的指定类型的组件,不存在返回 null</td>
</tr>

<tr>
<td class="org-left">GetComponentInChildren</td>
<td class="org-left">获取当前对象或其子对象的指定类型的组件，不存在返回 null（遍历行为是以深度为优先的）</td>
</tr>

<tr>
<td class="org-left">GetComponentInParent</td>
<td class="org-left">获取当前对象或其父对象的指定类型的组件，不存在返回 null</td>
</tr>

<tr>
<td class="org-left">GetComponents</td>
<td class="org-left">获取当前对象的所有组件</td>
</tr>

<tr>
<td class="org-left">GetComponentsInChildren</td>
<td class="org-left">获取当前对象或其子对象的指定类型的所有组件。</td>
</tr>

<tr>
<td class="org-left">GetComponentsInParent</td>
<td class="org-left">获取当前对象或其父对象的指定类型的所有组件。</td>
</tr>

<tr>
<td class="org-left">SendMessage</td>
<td class="org-left">调用当前对象上每个 MonoBehavior 上的名字为 methodName 的方法</td>
</tr>

<tr>
<td class="org-left">SendMessageUpwards</td>
<td class="org-left">调用当前对象以及其父对象上每个 MonoBehavior 上的名字单位 methodName 的方法</td>
</tr>

<tr>
<td class="org-left">SetActive</td>
<td class="org-left">激活/不激活 当前对象</td>
</tr>
</tbody>
</table>
</div>
<ol class="org-ol"><li><a id="orgheadline54"></a>Tips:<br><div class="outline-text-5" id="text-4-3-3-1">
<p>
GetComponentInChildren(Type compType);<br>
GetComponentsInChildren(Type compType);<br>
GetComponentInParent(Type compType);<br>
GetComponentsInParent(Type compType);<br>
需要注意的是<br>
1 上面 4 个方法会先在当前对象中寻找 CompType 类型的组件。<br>
2 方面 4 个方法会循环查找所有子节点或父节点<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline56" class="outline-4">
<h4 id="orgheadline56"><span class="section-number-4">4.3.4</span> GameObject 和 Transform</h4>
<div class="outline-text-4" id="text-4-3-4">
<p>
new 出来的 GameObject 对象会自带一个 Transform 组件<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">var</span> <span style="color: #eedd82;">obj</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">GameObject</span>();
<span style="color: #00ffff;">if</span> (obj.transform!=<span style="color: #7fffd4;">null</span>)
{
    Debug.Log(<span style="color: #ffa07a;">"exist transform"</span>);
}
<span style="color: #00ffff;">else</span>
{
    Debug.Log(<span style="color: #ffa07a;">"not exist"</span>);
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#19978;&#38754;&#30340;&#20195;&#30721;&#20250;&#36755;&#20986; exist transform</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline57" class="outline-4">
<h4 id="orgheadline57"><span class="section-number-4">4.3.5</span> Get all DontDestroyOnLoad GameObjects</h4>
<div class="outline-text-4" id="text-4-3-5">
<ol class="org-ol">
<li><p>
无论是编辑器版还是 App 版都无法通过下面代码获取所有的 DontDestroyOnLoad GameObject<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">private</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">DestroyDontDestroyOnLoadGameObjects</span>()
{
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#25552;&#31034;&#26080;&#27861;&#25214;&#21040; DontDestroyOnLoad &#22330;&#26223;</span>
    <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">dontDestoyOnLoadScene</span> = SceneManager.GetSceneByName(<span style="color: #ffa07a;">"DontDestroyOnLoad"</span>);
    <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">dontDestroyOnLoadGameObjects</span> = dontDestoyOnLoadScene.GetRootGameObjects();
    <span style="color: #00ffff;">foreach</span> (<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">dontdestroyGameObject</span> <span style="color: #00ffff;">in</span> dontDestroyOnLoadGameObjects)
    {
        Destroy(gameObject);
    }
}
</pre>
</div></li>
<li><p>
在编辑器模式下可以使用如下代码来获取所有 DontDestroyOnLoad GameObject<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">DestroyAllDontDestroyOnLoadObjects</span>()
{
    <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">go</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">GameObject</span>(<span style="color: #ffa07a;">"Sacrificial Lamb"</span>);
    DontDestroyOnLoad(go);

    <span style="color: #00ffff;">foreach</span>(<span style="color: #00ffff;">var</span> <span style="color: #87cefa;">root</span> <span style="color: #00ffff;">in</span> go.scene.GetRootGameObjects())
        Destroy(root);
}
</pre>
</div></li>
<li><p>
在 App 版中，可以使用如下方法<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">DontDestroyOnLoadManager</span>
{
    <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">List</span>&lt;GameObject&gt; <span style="color: #eedd82;">_ddolObjects</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">List</span>&lt;GameObject&gt;();

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">DontDestroyOnLoad</span>(<span style="color: #00ffff;">this</span> GameObject go) {
        UnityEngine.Object.DontDestroyOnLoad(<span style="color: #98fb98;">go</span>);
        _ddolObjects.Add(<span style="color: #98fb98;">go</span>);
    }

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">DestroyAll</span>() {
        <span style="color: #00ffff;">foreach</span>(<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">go</span> <span style="color: #00ffff;">in</span> _ddolObjects)
            <span style="color: #00ffff;">if</span>(go != <span style="color: #7fffd4;">null</span>)
                UnityEngine.Object.Destroy(<span style="color: #98fb98;">go</span>);

        _ddolObjects.Clear();
    }
}
</pre>
</div></li>
</ol>
</div>
</div>
</div>
<div id="outline-container-orgheadline67" class="outline-3">
<h3 id="orgheadline67"><span class="section-number-3">4.4</span> Transform</h3>
<div class="outline-text-3" id="text-4-4">
</div><div id="outline-container-orgheadline59" class="outline-4">
<h4 id="orgheadline59"><span class="section-number-4">4.4.1</span> transform.Find(string childName)</h4>
<div class="outline-text-4" id="text-4-4-1">
<ul class="org-ul">
<li>Find 方法不是递归查找子节点的，它只查询直接子节点(不会查找自己)。<br></li>
<li>Find 方法可以传递子节点的相对路径 例如：“child1/child1_1”<br></li>
<li>Find 方法可以返回没有被激活的子节点<br></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline60" class="outline-4">
<h4 id="orgheadline60"><span class="section-number-4">4.4.2</span> transform.root</h4>
<div class="outline-text-4" id="text-4-4-2">
<p>
该方法返回 transform 的 Root 节点。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">/*</span>
<span style="color: #ff0000;">UIScene &#20013;&#30340;&#32467;&#26500;&#22914;&#19979;</span>
<span style="color: #ff0000;">-Canvas</span>
<span style="color: #ff0000;">--MainUI</span>
<span style="color: #ff0000;">---PlayerIcon</span>
<span style="color: #ff0000;">PlayerIcon.transform.root &#36820;&#22238;&#30340;&#26159; Canvas</span>
<span style="color: #ff0000;">*/</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline61" class="outline-4">
<h4 id="orgheadline61"><span class="section-number-4">4.4.3</span> 设置节点关系</h4>
<div class="outline-text-4" id="text-4-4-3">
<p>
SetAsFirstSibling        将 transform 放置到本地 transform 列表最前。<br>
SetAsLastSibling        将 transform 放置到本地 transform 列表最后。<br>
SetParent        将 transfrom 设置为当前 transform 的父节点.<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline62" class="outline-4">
<h4 id="orgheadline62"><span class="section-number-4">4.4.4</span> SetParent(parentTransform,worldPositionStays)</h4>
<div class="outline-text-4" id="text-4-4-4">
<p>
需要注意下面几点：<br>
</p>
<ul class="org-ul">
<li>该方法为 Transform 对象的方法，GameObject 没有该方法<br></li>
<li>该方法的第一个参数必须为 Transform 对象，不能为 GameObject<br></li>
<li>该方法的第二个参数默认值为 True，表示对象世界坐标不变，此时对象的 localPosition、localScale、localEulerAngles 可能是会被改变<br></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline63" class="outline-4">
<h4 id="orgheadline63"><span class="section-number-4">4.4.5</span> GetComponent GetComponents</h4>
<div class="outline-text-4" id="text-4-4-5">
<p>
<a id="orgtarget1"></a><br>
</p>
<ul class="org-ul">
<li>Component 类和 GameObject 类都有 GetComponent 方法<br></li>
<li><p>
NGUI 中有如下继承关系 UIWidget-&gt;UIBasicSprite-&gt;UISprite，如果 GameObject 上绑定的组件中只有 Transform、UISprite，那么 GetComponent&lt;UIWidget&gt;()可以返回其上的 UISprite 组件。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">var</span> <span style="color: #eedd82;">widget</span> = GetComponent&lt;UIWidget&gt;();
<span style="color: #00ffff;">if</span> ( widget != <span style="color: #7fffd4;">null</span> )
{
    Debug.Log ( <span style="color: #ffa07a;">"&#20174; UIImage &#19978;&#33719;&#21462; UIWidget &#25104;&#21151; --- "</span> + widget.ToString ( ) );
}
<span style="color: #00ffff;">else</span>
{
    Debug.Log ( <span style="color: #ffa07a;">"&#20174; UIImage &#19978;&#33719;&#21462; UIWidget &#22833;&#36133; "</span> );
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#19978;&#38754;&#30340;&#20195;&#30721;&#20250;&#36755;&#20986;&#65306;</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#20174; UIImage &#19978;&#33719;&#21462; UIWidget &#25104;&#21151; --- Sprite (UISprite)</span>
</pre>
</div></li>
<li><p>
遍历 GameObject 上的所有组件<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#19979;&#38754;&#20004;&#31181;&#25928;&#26524;&#26159;&#19968;&#26679;&#30340;</span>
<span style="color: #00ffff;">foreach</span> ( <span style="color: #00ffff;">var</span> <span style="color: #87cefa;">t</span> <span style="color: #00ffff;">in</span> gameObject.GetComponents ( <span style="color: #00ffff;">typeof</span> ( Component ) ) )
<span style="color: #ff0000;">//</span><span style="color: #ff0000;">foreach ( var t in this.GetComponents&lt;Component&gt; ( ) )</span>
{
    Debug.Log ( t.ToString ( ) );
}
</pre>
</div></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline64" class="outline-4">
<h4 id="orgheadline64"><span class="section-number-4">4.4.6</span> Vector2.Angle</h4>
<div class="outline-text-4" id="text-4-4-6">
<p>
该函数只会返回正值<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">Vector2</span> <span style="color: #eedd82;">originDir</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Vector2</span>(0, 1);
<span style="color: #98fb98;">Vector2</span> <span style="color: #eedd82;">targetDir</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Vector2</span>(1, 0);
Debug.Log(<span style="color: #ffa07a;">"y-&gt;x  "</span> + Vector2.Angle(originDir, targetDir).ToString());
targetDir = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Vector2</span>(-1, 0);
Debug.Log(<span style="color: #ffa07a;">"y-&gt;-x "</span> + Vector2.Angle(originDir, targetDir).ToString());
targetDir = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Vector2</span>(0, -1);
Debug.Log(<span style="color: #ffa07a;">"y-&gt;-y "</span> + Vector2.Angle(originDir, targetDir).ToString());
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#19979;&#38754;&#26159;&#36755;&#20986;&#32467;&#26524;&#65306;</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">y-&gt;x  90</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">y-&gt;-x 90</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">y-&gt;-y 180</span>

<span style="color: #98fb98;">float</span> <span style="color: #eedd82;">rotation</span> = Vector2.Angle(originDir,targetDir);
<span style="color: #00ffff;">if</span> (targetDir.x &lt; originDir.x)
{
                rotation = -rotation;
}
<span style="color: #ff0000;">//</span><span style="color: #ff0000;">&#22312; Unity &#20013; &#27491;&#30340;&#26059;&#36716;&#24230;&#25968;&#34920;&#31034; &#27839;&#30528;&#26059;&#36716;&#36724;&#30340;&#26041;&#21521;&#30475; &#26159;&#36870;&#26102;&#38024;&#26059;&#36716;&#65292;&#27839;&#30528;&#26059;&#36716;&#36724;&#30340;&#21453;&#26041;&#21521;&#30475; &#26159; &#39034;&#26102;&#38024;&#26059;&#36716;&#12290;</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline65" class="outline-4">
<h4 id="orgheadline65"><span class="section-number-4">4.4.7</span> transform.localEulerAngles</h4>
<div class="outline-text-4" id="text-4-4-7">
<p>
unity 为左手坐标系，所以旋转的正方向通过左手原则来定。<br>
transform.localEulerAngles.x 表示绕 x 轴旋转的角度<br>
transform.localEulerAngles.y 表示绕 y 轴旋转的角度<br>
transform.localEulerAngles.z 表示绕 z 轴旋转的角度<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline66" class="outline-4">
<h4 id="orgheadline66"><span class="section-number-4">4.4.8</span> transform.LookAt</h4>
<div class="outline-text-4" id="text-4-4-8">
<p>
public void LookAt(Transform target, Vector3 worldUp = Vector3.up);<br>
public void LookAt(Vector3 worldPosition, Vector3 worldUp = Vector3.up);<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#35774;&#32622; gObj &#26397;&#21521;&#21069;&#26041;&#21521;&#19978; 30 &#24230;&#26041;&#21521;</span>
<span style="color: #98fb98;">Vector3</span> <span style="color: #eedd82;">dir</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Vector3</span>(Math.Cos(30*Math.PI/180),Math.Cin(30*Math.PI/180),0);
gObj.transfrom.LookAt(Transform.TransformDirection(dir));
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline69" class="outline-3">
<h3 id="orgheadline69"><span class="section-number-3">4.5</span> Quaternion</h3>
<div class="outline-text-3" id="text-4-5">
</div><div id="outline-container-orgheadline68" class="outline-4">
<h4 id="orgheadline68"><span class="section-number-4">4.5.1</span> 旋转向量</h4>
<div class="outline-text-4" id="text-4-5-1">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">Vector2</span> <span style="color: #eedd82;">originDirVector</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Vector2</span>(1,0);
<span style="color: #98fb98;">Vector2</span> <span style="color: #eedd82;">dir</span> = Quaternion.Euler(0,0,90) * originDirVector;
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">dir = Vector2(0,1)</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline74" class="outline-3">
<h3 id="orgheadline74"><span class="section-number-3">4.6</span> MonoBehavior</h3>
<div class="outline-text-3" id="text-4-6">
</div><div id="outline-container-orgheadline71" class="outline-4">
<h4 id="orgheadline71"><span class="section-number-4">4.6.1</span> 各种函数函数触发时机</h4>
<div class="outline-text-4" id="text-4-6-1">
<ol class="org-ol">
<li><p>
调用顺序如下<br>
</p>
<pre class="example">
OnValidate -&gt; OnValidate-&gt; Awake -&gt; OnEnable -&gt; Start -&gt; 
FixedUpdate -&gt; Update-&gt; LateUpdate -&gt; 
(OnPreRender -&gt; OnPostRender -&gt; OnRenderImage)
-&gt; OnDisable -&gt; OnDestroy -&gt; OnValidate
</pre></li>
<li>只有 Camera 下的脚本会触发 OnPreRender -&gt; OnPostRender -&gt; OnRenderImage<br></li>
<li>只有在编辑器模式下才会触发 OnValidate<br></li>
<li>不同摄像机下的脚本中 OnPreRender -&gt; OnPostRender -&gt; OnRenderImage 的触发是连续的，即 A 摄像机脚本中的 OnPreRender -&gt; OnPostRender -&gt; OnRenderImage 都触发完后，才触发 B 摄像机脚本中的这些方法。<br></li>
<li><p>
Awake 比 标记为 RuntimeInitializeOnLoadMethod 的静态函数先调用<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Test</span>:<span style="color: #98fb98;">MonoBehavior</span>
{
    <span style="color: #00ffff;">static</span> Test()
    {
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">CLR &#20445;&#35777;&#22312;&#31867;&#30340;&#20854;&#20182;&#25805;&#20316;&#20043;&#21069;&#36816;&#34892;&#38745;&#24577;&#26500;&#36896;&#26041;&#27861;&#12290;</span>
        Debug.Log(<span style="color: #ffa07a;">"Static Constructor-----------------------  "</span>);
    }
    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Awake</span>()
    {
        Debug.Log(<span style="color: #ffa07a;">"Awake -----------------------------------  "</span>);
    }

    [<span style="color: #98fb98;">RuntimeInitializeOnLoadMethod</span>]
    <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">void</span> Initialize()
    {
        Debug.Log(<span style="color: #ffa07a;">"RuntimeInitializeOnLoadMethod ------------  "</span>);
    }
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#19978;&#38754;&#30340;&#20195;&#30721; &#20808;&#25191;&#34892; Awake&#65292;&#21518;&#25191;&#34892; Initialize</span>
</pre>
</div></li>
</ol>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">MonoBehaviourTest</span> : <span style="color: #98fb98;">MonoBehaviour</span>
{
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">counter</span> = 1;

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#33050;&#26412;&#23454;&#20363;&#34987;&#21152;&#36733;&#26102;&#35843;&#29992;</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Awake is called when the script instance is being loaded.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Awake</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} Awake"</span>, counter++));
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#24403;&#33050;&#26412;&#20026; enabled&#65292;&#22312;&#20219;&#20309; Update &#26041;&#27861;&#31532;&#19968;&#27425;&#35843;&#29992;&#20043;&#21069;&#65292;&#20250;&#35843;&#29992; Start</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Start is called on the frame when a script is enabled just before any of</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">the Update methods is called the first time.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Start</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} Start"</span>, counter++));
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#37325;&#32622;&#40664;&#35748;&#20540;&#65292;&#23558;&#33050;&#26412;&#32452;&#20214;&#21024;&#38500;&#65292;&#20877;&#28155;&#21152;&#26102;&#20250;&#35843;&#29992;</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Reset to default values.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Reset</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} Reset"</span>, counter++));
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#24403;&#23545;&#35937;&#21464;&#20026; enabled &#25110; active &#26102;&#65292;&#35843;&#29992; OnEnable</span>
        <span style="color: #ff0000;">//</span><span style="color: #ff0000;">This function is called when the object becomes enabled and active.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnEnable</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} OnEnable"</span>, counter++));
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Monobehaviour &#21464;&#20026; Disabled &#25110; Inactive &#26102;&#65292;&#20250;&#35843;&#29992; OnDisable</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">This function is called when the behaviour becomes disabled () or inactive.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnDisable</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} OnDisable"</span>, counter++));
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">MonoBehaviour &#34987;&#38144;&#27585;&#26102;&#20250;&#35843;&#29992; OnDestroy</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">This function is called when the MonoBehaviour will be destroyed.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnDestroy</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} OnDestroy"</span>, counter++));
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#24403;&#33050;&#26412;&#21152;&#36733; &#25110;&#32773; inspector &#38754;&#26495;&#19978;&#30340;&#20540;&#34987;&#20462;&#25913;&#26102;&#20250;&#35843;&#29992; OnValidate</span>
        <span style="color: #ff0000;">//</span><span style="color: #ff0000;">This function is called when the script is loaded or a value is</span>
        <span style="color: #ff0000;">//</span><span style="color: #ff0000;">changed in the inspector (Called in the editor only).</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnValidate</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} OnValidate"</span>, counter++));
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">OnPreRender is called before a camera starts rendering the scene.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnPreRender</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} OnPreRender"</span>, counter++));
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">OnPostRender is called after a camera finished rendering the scene.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnPostRender</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} OnPostRender"</span>, counter++));
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">OnRenderImage is called after all rendering is complete to render image.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnRenderImage</span> (<span style="color: #98fb98;">RenderTexture</span> <span style="color: #eedd82;">src</span>, <span style="color: #98fb98;">RenderTexture</span> <span style="color: #eedd82;">dest</span>)
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} OnRenderImage"</span>, counter++));
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#22914;&#26524;&#29289;&#20307;&#26159;&#21487;&#35265;&#30340;&#65292;&#27599;&#20010;&#25668;&#20687;&#26426;&#35302;&#21457;&#19968;&#27425; OnWillRenderObject &#30340;&#35843;&#29992;</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">OnWillRenderObject is called once for each camera if the object is visible.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnWillRenderObject</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} OnWillRenderObject"</span>, counter++));
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#24403;&#21069;&#30340; collider/rigidbody &#21644;&#21478;&#22806;&#30340; collider/rigidbody &#24320;&#22987;&#25509;&#35302;&#26102;&#65292;&#20250;&#35843;&#29992; OnCollisionEnter</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">OnCollisionEnter is called when this collider/rigidbody has begun touching another</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">rigidbody/collider.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnCollisionEnter</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} OnCollisionEnter"</span>, counter++));
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#24403;&#21069;&#30340; collider/rigidbody &#21644;&#21478;&#22806;&#30340; collider/rigidbody &#20572;&#27490;&#25509;&#35302;&#26102;&#65292;&#20250;&#35843;&#29992; OnCollisionExit</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">OnCollisionExit is called when this collider/rigidbody has stopped touching another</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">rigidbody/collider.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnCollisionExit</span>     ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} OnCollisionExit"</span>, counter++));
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#27599;&#19968;&#20010;&#21644;&#20854;&#20182; collider/rigidbody &#26377;&#25509;&#35302;&#30340; collider/rigidbody &#37117;&#20250;&#22312;&#27599;&#24103;&#20013;&#35302;&#21457; OnCollisionStay &#30340;&#35843;&#29992;</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">OnCollisionStay is called once per frame for every collider/rigidbody that is touching</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">rigidbody/collider.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnCollisionStay</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} OnCollisionStay"</span>, counter++));
        }

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnTriggerEnter</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} OnTriggerEnter"</span>, counter++));
        }

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnTriggerExit</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} OnTriggerExit"</span>, counter++));
        }

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnTriggerStay</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} OnTriggerStay"</span>, counter++));
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#22914;&#26524; MonoBehaviour &#29366;&#24577;&#20026; enabled&#65292;&#21017;&#20197;&#22266;&#23450;&#30340;&#24103;&#29575;&#35843;&#29992;&#27492;&#20989;&#25968;</span>
        <span style="color: #ff0000;">//</span><span style="color: #ff0000;">This function is called every fixed framerate frame, if the MonoBehaviour is enabled.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">FixedUpdate</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} FixedUpdate"</span>, counter++));
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#22914;&#26524; MonoBehaviour &#29366;&#24577;&#20026; enabled&#65292;&#21017;&#20197;&#22266;&#23450;&#30340;&#24103;&#29575;&#35843;&#29992;&#27492;&#20989;&#25968;</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Update is called every frame, if the MonoBehaviour is enabled.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Update</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} Update"</span>, counter++));
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#22914;&#26524; MonoBehaviour &#29366;&#24577;&#20026; enabled&#65292;&#21017;&#20197;&#27599;&#24103;&#37117;&#20250;&#35843;&#29992;&#27492;&#20989;&#25968;</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">LateUpdate is called every frame, if the Behaviour is enabled.</span>
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">LateUpdate</span> ()
        {
                GLogUtility.LogInfo (<span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"{0} LateUpdate"</span>, counter++));
        }
}
</pre>
</div>
</div>
<ol class="org-ol"><li><a id="orgheadline70"></a>不同对象各函数触发顺序<br><div class="outline-text-5" id="text-4-6-1-1">
<ul class="org-ul">
<li>Camera Awake/Enable/Update/LateUpdate 顺序按照 depth 越大越优先<br></li>
<li>Camera 渲染顺序按照 depth 越小越优先，即 Camera depth 值小的先触发 OnPreRender -&gt; OnPostRender -&gt; OnRenderImage<br></li>
<li>Camera Disable 和 Destroy 执行顺序没有什么规律<br></li>
<li>普通对象和 Camera 的事件触发顺序也没有什么规律<br></li>
<li>只有对象身上有 Mesh 时，才会触发 OnWillRenderObject<br></li>
</ul>
<p>
场景中有如下对象树，其各个对象的脚本中函数触发如下描述：<br>
</p>
<pre class="example">
场景对象树：
Cube2
Camera-depth1
Camera-depth0
Camera-depth2
Cube1
	--&gt;Cube1.1

对象函数触发顺序：
// --------------------
Cube1.1 -Awake
Cube1.1 -OnEnable
Cube2   -Awake
Cube2   -OnEnable
Camera3 -Awake
Camera3 -Enable
Camera2 -Awake
Camera2 -Enable
Camera1 -Awake
Camera1 -Enable
Cube1   -Awake
Cube1   -Enable

// --------------------
Cube1.1 -Start
Cube2   -Start
Camera3 -Start
Camera2 -Start
Camera1 -Start
Cube1   -Start

// --------------------
Cube1.1 -Update
Cube2   -Update
Camera3 -Update
Camera2 -Update
Camera1 -Update
Cube1   -Update

// --------------------
Cube1.1 -LateUpdate
Cube2   -LateUpdate
Camera3 -LateUpdate
Camera2 -LateUpdate
Camera1 -LateUpdate
Cube1   -LateUpdate

// -------------------- Camera 渲染
Cube1   -OnWillRenderObject
Cube2   -OnWillRenderObject
Cube1.1 -OnWillRenderObject

Camera1 -OnPreRender
Camera1 -OnPostRender
Camera1 -OnRenderImage

Cube1   -OnWillRenderObject
Cube2   -OnWillRenderObject
Cube1.1 -OnWillRenderObject

Camera2 -OnPreRender
Camera2 -OnPostRender
Camera2 -OnRenderImage

Cube1   -OnWillRenderObject
Cube2   -OnWillRenderObject
Cube1.1 -OnWillRenderObject

Camera3 -OnPreRender
Camera3 -OnPostRender
Camera3 -OnRenderImage

// -------------------- Disable 以上节点的父节点
Cube2   -OnDisable
Camera3 -OnDisable
Camera1 -OnDisable
Cube1.1 -OnDisable
Cube1   -OnDisable
Camera2 -OnDisable

// -------------------- 编辑器停止运行
Cube2   -OnDisable
Camera3 -OnDisable
Camera1 -OnDisable
Cube1.1 -OnDisable
Cube1   -OnDisable
Camera2 -OnDisable

Cube2   -OnDestroy
Camera3 -OnDestroy
Camera1 -OnDestroy
Cube1   -OnDestroy
Cube1.1 -OnDestroy
Camera2 -OnDestroy
</pre>
</div></li></ol>
</div>
<div id="outline-container-orgheadline72" class="outline-4">
<h4 id="orgheadline72"><span class="section-number-4">4.6.2</span> 单例 MonoBehavior</h4>
<div class="outline-text-4" id="text-4-6-2">
<p>
单例 MonoBehavior 被添加到多个 GameObject 上后，对于每个 GameObject，都分别实例化了一个 MonoBehavior 对象，这些对象和你自己实例化的单例不是同一个对象。<br>
创建 MonoBehavior 单例是不被允许的，会提示下面错误:<br>
</p>
<pre class="example">
You are trying to create a MonoBehaviour using the 'new' keyword.  This is not allowed.  MonoBehaviours can only be added using AddComponent().  Alternatively, your script can inherit from ScriptableObject or no base class at all
</pre>
</div>
</div>
<div id="outline-container-orgheadline73" class="outline-4">
<h4 id="orgheadline73"><span class="section-number-4">4.6.3</span> public 变量赋值顺序</h4>
<div class="outline-text-4" id="text-4-6-3">
<p>
public 变量的赋值顺序按照 初始化语句、构造函数、编辑器赋值的顺序。<br>
</p>
<div class="org-src-container">

<pre class="src src-c#">public class Test:MonoBehaviour
{
	public int value2 = 10;

	public Test ()
	{
		Debug.Log ("Test value2 = " + value2.ToString ());

		value2 = 11;
	}

	void Awake ()
	{
		Debug.Log ("Awake value2 = " + value2.ToString ());
	}

	void Start ()
	{
		Debug.Log ("Start value2 = " + value2.ToString ());
	}
}
// Output
Test value2 = 10    //构造函数中读的值为 初始化语句中赋的值
Awake value2 = 120  //在编辑器中设置了 value2 的值为 120, 所以编辑器赋值在 Awake 之前执行的。
Start value2 = 120
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline76" class="outline-3">
<h3 id="orgheadline76"><span class="section-number-3">4.7</span> Resource</h3>
<div class="outline-text-3" id="text-4-7">
</div><div id="outline-container-orgheadline75" class="outline-4">
<h4 id="orgheadline75"><span class="section-number-4">4.7.1</span> Load</h4>
<div class="outline-text-4" id="text-4-7-1">
<p>
需要注意一下两点<br>
1 使用 Resource.Load 时，其中参数不能填写后缀名，否则返回 null.<br>
2 通过 Resource.Load 返回的是 Prefab 本身，需要对其实例化才能使用。否则会报下面的错误<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">var</span> <span style="color: #eedd82;">obj</span> = Resources.Load (<span style="color: #ffa07a;">"UI/Root_bg"</span>) <span style="color: #00ffff;">as</span> <span style="color: #98fb98;">GameObject</span>;
obj.transform.SetParent(rootUI);
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#19978;&#38754;&#20195;&#30721;&#20250;&#24341;&#21457;&#19979;&#38754;&#38169;&#35823;</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Setting the parent of a transform which resides in a prefab is disabled to prevent data corruption.</span>

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#27491;&#30830;&#30340;&#20570;&#27861;&#22914;&#19979;&#65306;</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Instantiate &#26159; Object &#30340;&#38745;&#24577;&#26041;&#27861;</span>
<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">obj</span> = Instantiate(Resources.Load(<span style="color: #ffa07a;">"UI/Root_bg"</span>)) <span style="color: #00ffff;">as</span> <span style="color: #98fb98;">GameObject</span>;
obj.transform.SetParent(rootUI);
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline77" class="outline-3">
<h3 id="orgheadline77"><span class="section-number-3">4.8</span> Animator</h3>
<div class="outline-text-3" id="text-4-8">
<p>
animator 中的条件<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline82" class="outline-3">
<h3 id="orgheadline82"><span class="section-number-3">4.9</span> Attributes</h3>
<div class="outline-text-3" id="text-4-9">
</div><div id="outline-container-orgheadline78" class="outline-4">
<h4 id="orgheadline78"><span class="section-number-4">4.9.1</span> RuntimeInitializeOnLoadMethod</h4>
<div class="outline-text-4" id="text-4-9-1">
<p>
设置了[RuntimeInitializeOnLoadMethod]属性的静态函数，在场景加载完成后会被调用(Awake 消息触发之后调用)。<br>
不同文件中的[RuntimeInitializeOnLoadMethod]属性的静态函数调用顺序是不确定的。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline81" class="outline-4">
<h4 id="orgheadline81"><span class="section-number-4">4.9.2</span> Inspector Attributes</h4>
<div class="outline-text-4" id="text-4-9-2">
</div><ol class="org-ol"><li><a id="orgheadline79"></a>Range<br><div class="outline-text-5" id="text-4-9-2-1">
<div class="org-src-container">

<pre class="src src-csharp">[Range(0.0f,1.0f)]
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">float</span> speedFactor;
[<span style="color: #98fb98;">Range</span>(1,5)]
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">float</span> blurStopTime = 3.0f;
</pre>
</div>
</div></li>
<li><a id="orgheadline80"></a>字段序列化和显示<br><div class="outline-text-5" id="text-4-9-2-2">
<p>
Unity 会自动为 Public 变量做序列化，序列化的意思是说再次读取 Unity 时序列化的变量是有值的，不需要你再次去赋值，因为它已经被保存下来。<br>
什么样的值会被显示在面板上？已经被序列化，但是没有用 HideInInspector 标记的值。<br>
[HideInInspector]表示将原本显示在面板上的序列化值隐藏起来。<br>
[SerializeField]表示将原本不会被序列化的私有变量和保护变量可以序列化，这么他们在下次读取时，就是你上次赋值的值。<br>
<a href="http://blog.sina.com.cn/s/blog_697b1b8c0102uxvn.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_697b1b8c0102uxvn.html</a><br>
</p>

<ol class="org-ol">
<li><p>
如果 a 是公有的序列化变量。<br>
</p>
<ul class="org-ul">
<li>如果你想要在面板中看到 a，那么用：<br></li>
</ul>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">a</span>;
</pre>
</div>
<ul class="org-ul">
<li>如果你不想在面板中看到 a，那么用:<br></li>
</ul>
<div class="org-src-container">

<pre class="src src-csharp">[HideInInspector]
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> a;   <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#36825;&#26679; a &#21487;&#20197;&#22312;&#31243;&#24207;&#20013;&#34987;&#20195;&#30721;&#36171;&#20540;&#65292;&#20294;&#19981;&#20250;&#22312;&#38754;&#26495;&#20013;&#30475;&#21040;&#24182;&#25163;&#21160;&#35774;&#32622;&#36171;&#20540;&#12290;</span>
</pre>
</div></li>
<li><p>
如果 a 是私有的序列化变量，你想在面板中读取并保存，那么用:<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp">[SerializeField]
<span style="color: #00ffff;">private</span> <span style="color: #98fb98;">int</span> a;
</pre>
</div></li>
<li><p>
如果 a 是私有的序列化变量，你想在面板中读取，但是不保存，那么用：<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp">[HideInInspector]
[<span style="color: #98fb98;">SerializedField</span>]
<span style="color: #00ffff;">private</span> <span style="color: #98fb98;">int</span> a;
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">b</span>  { <span style="color: #00ffff;">get</span>{ <span style="color: #00ffff;">return</span> a; } }

<span style="color: #ff0000;">//</span><span style="color: #ff0000;">&#28982;&#21518;&#22312; Editor &#20013;&#20462;&#25913;&#26174;&#31034;</span>
EditorGUILayout.LabelField(<span style="color: #ffa07a;">"value"</span>,game.B.ToString());
</pre>
</div></li>
<li><p>
如果 a 是私有序列化变量，你不想在面板中做任何操作(不想看到，也不想写)，但是想要在程序中给它赋值，那么用。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp">[HideInInspector]
[<span style="color: #98fb98;">SerializedField</span>]
<span style="color: #00ffff;">private</span> <span style="color: #98fb98;">int</span> a;
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">b</span>{ <span style="color: #00ffff;">get</span> { <span style="color: #00ffff;">return</span> a; }  <span style="color: #00ffff;">set</span> { a = value; } }
</pre>
</div></li>
</ol>
</div></li></ol>
</div>
</div>

<div id="outline-container-orgheadline84" class="outline-3">
<h3 id="orgheadline84"><span class="section-number-3">4.10</span> Ray</h3>
<div class="outline-text-3" id="text-4-10">
<p>
Ray 是一个结构体<br>
</p>
<div class="org-src-container">

<pre class="src src-c#">public struct Ray
{
		Vector3 origin;     // 射线发出的原点
		Vector3 direction;  // 射线发出的方向
}
</pre>
</div>
</div>
<div id="outline-container-orgheadline83" class="outline-4">
<h4 id="orgheadline83"><span class="section-number-4">4.10.1</span> 使用射线来实现拾取物体</h4>
<div class="outline-text-4" id="text-4-10-1">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#20174; main &#25668;&#20687;&#26426;&#25152;&#22312;&#20301;&#32622;&#21457;&#20986;&#19968;&#26465;&#25351;&#21521;&#40736;&#26631;&#20301;&#32622;&#30340;&#23556;&#32447;</span>
ray = Camera.main.ScreenPointToRay(Input.mousePosition);
<span style="color: #00ffff;">if</span> (Input.GetMouseButtonDown(0))
{
    <span style="color: #98fb98;">RaycastHit</span> <span style="color: #eedd82;">hit</span>;
    <span style="color: #ff0000;">//</span><span style="color: #ff0000;">&#22914;&#26524;&#23556;&#32447;&#30896;&#25758;&#21040;&#23545;&#35937;&#65292;&#25226;&#36820;&#22238;&#20449;&#24687;&#20648;&#23384;&#21040; hit &#20013;  </span>
    <span style="color: #00ffff;">if</span> (Physics.Raycast(ray, <span style="color: #00ffff;">out</span> <span style="color: #98fb98;">hit</span>))
    {
        <span style="color: #ff0000;">//</span><span style="color: #ff0000;">&#22914;&#26524;&#30896;&#25758;&#30340;&#23545;&#35937;&#26159; Cube&#65292;&#21017;&#38144;&#27585;&#23427;  </span>
        <span style="color: #00ffff;">if</span> (hit.transform.gameObject.name == <span style="color: #ffa07a;">"Cube"</span>)
        {
            Destroy(hit.transform.gameObject);
        }
    }
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#32534;&#36753;&#22120;&#20013;&#30340;&#23556;&#32447;&#26816;&#27979;</span>
SceneView.onSceneGUIDelegate += OnSceneGUI;
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnSceneGUI</span>(<span style="color: #98fb98;">SceneView</span> <span style="color: #eedd82;">sceneView</span>)
{
    <span style="color: #00ffff;">if</span> (Event.current.button == 1 &amp;&amp; Event.current.type == EventType.MouseDown)
    {
        <span style="color: #98fb98;">Ray</span> <span style="color: #eedd82;">ray</span> = HandleUtility.GUIPointToWorldRay(Event.current.mousePosition);
        <span style="color: #ff0000;">//</span><span style="color: #ff0000;">Ray ray = sceneView.camera.ScreenPointToRay(Event.current.mousePosition);</span>
        <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">hits</span> = Physics.RaycastAll(ray);
        <span style="color: #00ffff;">foreach</span> (<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">hit</span> <span style="color: #00ffff;">in</span> hits)
        {
            <span style="color: #00ffff;">if</span> (hit.transform.tag == selectedTag)
            {
                Selection.activeGameObject = hit.transform.gameObject;
                <span style="color: #00ffff;">break</span>;
            }
        }
    }
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline85" class="outline-3">
<h3 id="orgheadline85"><span class="section-number-3">4.11</span> Coroutine</h3>
<div class="outline-text-3" id="text-4-11">
<p>
MonoBehaviour 的 Start 方法可以为 Coroutine。(Awake OnEnable OnDisable 都不可以是 Coroutine)<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline92" class="outline-3">
<h3 id="orgheadline92"><span class="section-number-3">4.12</span> Dir File Path</h3>
<div class="outline-text-3" id="text-4-12">
</div><div id="outline-container-orgheadline86" class="outline-4">
<h4 id="orgheadline86"><span class="section-number-4">4.12.1</span> Application.absoluteURL</h4>
<div class="outline-text-4" id="text-4-12-1">
<p>
返回 web 播放器数据文件的绝对路径（只读）。<br>
Application.absoluteURL 和 Application.srcValue 允许你检测你的 unityWeb 数据文件是否被移动或链接到另一个地方。你可能会希望保护和防止你的数据文件被剽窃。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline87" class="outline-4">
<h4 id="orgheadline87"><span class="section-number-4">4.12.2</span> Application.dataPath</h4>
<div class="outline-text-4" id="text-4-12-2">
<p>
返回游戏数据文件的目录（只读）。<br>
</p>
<ul class="org-ul">
<li>Unity Editor: &lt;path to project folder&gt;/Assets<br></li>
<li>Mac player: &lt;path to player app bundle&gt;/Contents<br></li>
<li>iOS player: &lt;path to player app bundle&gt;/&lt;AppName.app&gt;/Data (this folder is read only, use Application.persistentDataPath to save data).<br></li>
<li>Win/Linux player: &lt;path to executablename_Data folder&gt; (note that most Linux installations will be case-sensitive!)<br></li>
<li>WebGL: The absolute url to the player data file folder (without the actual data file name)<br></li>
<li>Android: Normally it would point directly to the APK. The exception is if you are running a split binary build in which case it points to the the OBB instead.<br></li>
</ul>
<p>
在 PC 上，返回的字符串以斜杠"/"为文件夹分隔符。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline88" class="outline-4">
<h4 id="orgheadline88"><span class="section-number-4">4.12.3</span> Application.persistentDataPath</h4>
<div class="outline-text-4" id="text-4-12-3">
<p>
返回持久化数据的目录（只读）。<br>
在运行期间期望被保存的数据可以记录在该文件夹下。<br>
发布 iOS 和 Android 时，persistentDataPath 会指向一个设备的公共目录。在每次 App 更新过程中，这个目录下的文件不会被删除。但是，你应该意识到无法安全的防止用户的行为。例如，移除 SD 卡将会使存储到其中的数据无法访问。<br>
当构建 app 的时候，GUID 会基于 BundleID 生成，而且 GUID 是 persistentDataPath 的一部分。如果你在将来的版本中保持同一个 Bundle ID，app 就可以在每次更新后都能继续访问同一个目录。<br>
</p>

<p>
Windows Store Apps: Application.persistentDataPath points to &lt;user&gt;\AppData\Local\Packages\&lt;productname&gt;\LocalState.<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline89" class="outline-4">
<h4 id="orgheadline89"><span class="section-number-4">4.12.4</span> Application.streamingAssetsPath</h4>
<div class="outline-text-4" id="text-4-12-4">
<p>
返回 StreamingAssets 文件夹的路径（只读）。<br>
如果在项目的 Assets 目录下有一个 StreamingAssets 文件夹，这个目录将会被复制到播放器的构建中，并被存储在 Applicaiton.streamingAssetsPath 指定的路径下。<br>
注意： 在一些平台下无法直接访问 StreamingAssets 文件夹，例如，在 web 平台下是没有文件系统访问的，又比如在 Android 平台下，它会被压缩到.apk 文件中。在这些平台下，Applicaiton.streamingAssetsPath 会返回一个 url 地址，它可以和 WWW 类配合使用，来获取 StreamingAssets 目录下的文件。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline90" class="outline-4">
<h4 id="orgheadline90"><span class="section-number-4">4.12.5</span> Application.temporaryCachePath</h4>
<div class="outline-text-4" id="text-4-12-5">
<p>
返回临时数据、缓存目录的路径（只读）。<br>
在该目录下可以存放临时数据。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline91" class="outline-4">
<h4 id="orgheadline91"><span class="section-number-4">4.12.6</span> 获取项目根目录</h4>
<div class="outline-text-4" id="text-4-12-6">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">var</span> <span style="color: #eedd82;">projAbsPath</span> = Path.GetDirectoryName(Application.dataPath);
<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">buildAbsPath</span> = projAbsPath + <span style="color: #ffa07a;">"/build"</span>;
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline94" class="outline-3">
<h3 id="orgheadline94"><span class="section-number-3">4.13</span> Camera</h3>
<div class="outline-text-3" id="text-4-13">
</div><div id="outline-container-orgheadline93" class="outline-4">
<h4 id="orgheadline93"><span class="section-number-4">4.13.1</span> 判断物体是否在摄像机视野内</h4>
<div class="outline-text-4" id="text-4-13-1">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">bool</span> <span style="color: #87cefa;">IsVisibleFrom</span>(<span style="color: #98fb98;">Bounds</span> <span style="color: #eedd82;">bounds</span>, <span style="color: #98fb98;">Camera</span> <span style="color: #eedd82;">camera</span>)
{
    <span style="color: #98fb98;">Plane</span>[] <span style="color: #eedd82;">planes</span> = GeometryUtility.CalculateFrustumPlanes(camera);
    <span style="color: #00ffff;">return</span> GeometryUtility.TestPlanesAABB(planes, bounds);
}
</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-orgheadline111" class="outline-2">
<h2 id="orgheadline111"><span class="section-number-2">5</span> Editor</h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-orgheadline103" class="outline-3">
<h3 id="orgheadline103"><span class="section-number-3">5.1</span> EditorExtension</h3>
<div class="outline-text-3" id="text-5-1">
</div><div id="outline-container-orgheadline96" class="outline-4">
<h4 id="orgheadline96"><span class="section-number-4">5.1.1</span> Update/Redraw SceneView</h4>
<div class="outline-text-4" id="text-5-1-1">
<div class="org-src-container">

<pre class="src src-csharp">SceneView.RepaintAll();
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline97" class="outline-4">
<h4 id="orgheadline97"><span class="section-number-4">5.1.2</span> 执行菜单命令</h4>
<div class="outline-text-4" id="text-5-1-2">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">https://docs.unity3d.com/ScriptReference/EditorApplication.ExecuteMenuItem.html</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Simple script that lets you create a new</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">scene, create a cube and an empty game object in the scene</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Save the scene and close the editor</span>

<span style="color: #00ffff;">using</span> <span style="color: #7fffd4;">UnityEditor</span>;
<span style="color: #00ffff;">using</span> <span style="color: #7fffd4;">UnityEditor.SceneManagement</span>;

<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ExampleClass</span>
{
    [<span style="color: #98fb98;">MenuItem</span>(<span style="color: #ffa07a;">"Examples/Execute menu items"</span>)]
    <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">void</span> EditorPlaying()
    {
        <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">newScene</span> = EditorSceneManager.NewScene(NewSceneSetup.<span style="color: #98fb98;">EmptyScene</span>, NewSceneMode.<span style="color: #98fb98;">Single</span>);

        EditorApplication.ExecuteMenuItem(<span style="color: #ffa07a;">"GameObject/3D Object/Cube"</span>);
        EditorApplication.ExecuteMenuItem(<span style="color: #ffa07a;">"GameObject/Create Empty"</span>);

        EditorSceneManager.SaveScene(<span style="color: #98fb98;">newScene</span>, <span style="color: #ffa07a;">"Assets/MyNewScene.unity"</span>);
        EditorApplication.Exit(0);
    }
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline100" class="outline-4">
<h4 id="orgheadline100"><span class="section-number-4">5.1.3</span> CustomEditor</h4>
<div class="outline-text-4" id="text-5-1-3">
</div><ol class="org-ol"><li><a id="orgheadline98"></a>自定义 Inspector<br><div class="outline-text-5" id="text-5-1-3-1">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">https://docs.unity3d.com/ScriptReference/Editor.html</span>
[CustomEditor (<span style="color: #00ffff;">typeof</span>(MyPlayer))]
<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">MyPlayerEditor</span> : <span style="color: #98fb98;">Editor</span> {
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">......</span>
}
</pre>
</div>
</div></li>
<li><a id="orgheadline99"></a>自定义属性通过选择文件来赋值<br><div class="outline-text-5" id="text-5-1-3-2">
<div class="org-src-container">

<pre class="src src-csharp">[CustomEditor(<span style="color: #00ffff;">typeof</span>(GUIParticle))]
<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">GUIParticleInspector</span> : <span style="color: #98fb98;">GBaseInspector</span>
{
    <span style="color: #98fb98;">GUIParticle</span> <span style="color: #eedd82;">scriptObj</span>;
    UnityEngine.<span style="color: #98fb98;">Object</span> <span style="color: #eedd82;">particleObj</span>;

    <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnEnable</span>()
    {
        scriptObj = GetTarget&lt;<span style="color: #98fb98;">GUIParticle</span>&gt;();
        <span style="color: #00ffff;">if</span>(!<span style="color: #98fb98;">string</span>.IsNullOrEmpty(scriptObj.particlePath))
        {
            <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">tmpPath</span> = <span style="color: #98fb98;">string</span>.Format(<span style="color: #ffa07a;">"{0}/{1}"</span>, GResMgrDefine.ABRootPath, scriptObj.particlePath);
            particleObj = AssetDatabase.LoadAssetAtPath&lt;Object&gt;(tmpPath);
        }
    }

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">override</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnInspectorGUI</span>()
    {
        particleObj = EditorGUILayout.ObjectField(<span style="color: #ffa07a;">"ParticleFile"</span>, particleObj, <span style="color: #00ffff;">typeof</span>(UnityEngine.Object), <span style="color: #7fffd4;">false</span>);
        <span style="color: #00ffff;">if</span>(particleObj==<span style="color: #7fffd4;">null</span>)
        {
            scriptObj.particlePath = <span style="color: #ffa07a;">""</span>;
        }
        <span style="color: #00ffff;">else</span>
        {
            <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">tmpPath</span> = AssetDatabase.GetAssetPath(particleObj);
            scriptObj.particlePath = tmpPath.Replace(GResMgrDefine.ABRootPath+<span style="color: #ffa07a;">"/"</span>, <span style="color: #ffa07a;">""</span>);
        }
        EditorGUILayout.LabelField(<span style="color: #ffa07a;">"ParticleFileURL"</span>, scriptObj.particlePath);

        <span style="color: #00ffff;">if</span> (GUILayout.Button(<span style="color: #ffa07a;">"Play"</span>))
        {
            Debug.Log(scriptObj.particlePath);
            scriptObj.Play();
        }
    }
}
</pre>
</div>
</div></li></ol>
</div>
<div id="outline-container-orgheadline102" class="outline-4">
<h4 id="orgheadline102"><span class="section-number-4">5.1.4</span> EditorWindow</h4>
<div class="outline-text-4" id="text-5-1-4">
</div><ol class="org-ol"><li><a id="orgheadline101"></a>EditorGUILayout<br><div class="outline-text-5" id="text-5-1-4-1">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">- &#24320;&#22987;&#19968;&#20010;&#27700;&#24179;&#20998;&#32452;&#65292;&#36820;&#22238;&#35813;&#20998;&#32452;&#30340;&#30697;&#24418;&#21306;&#22495;</span>
<span style="color: #ff0000;">//</span><span style="color: #ff0000;">BeginHorizontal       Begin a horizontal group and get its rect back.</span>
EditorGUILayout.BeginHorizontal();
EditorGUILayout.EndHorizontal ();

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">- &#22312;&#21069;&#19968;&#20010;&#25511;&#20214;&#21644;&#19979;&#19968;&#20010;&#25511;&#20214;&#20043;&#38388;&#28155;&#21152;&#19968;&#20010;&#23567;&#30340;&#31354;&#34892;</span>
<span style="color: #ff0000;">//</span><span style="color: #ff0000;">Make a small space between the previous control and the following.</span>
EditorGUILayout.Space();

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">- &#28155;&#21152;&#28378;&#21160;&#26465; &#38480;&#23450;&#28378;&#21160;&#21306;&#22495;</span>
scrollPos = GUI.BeginScrollView(<span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Rect</span>(0, 10, 500, 600), scrollPos, <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Rect</span>(-20, 0, 770, 600));
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">......</span>
GUI.EndScrollView();

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">- &#28155;&#21152;&#28378;&#21160;&#26465; &#33258;&#21160;&#21305;&#37197;&#28378;&#21160;&#21306;&#22495;</span>
scrollPos = GUILayout.BeginScrollView(scrollPos);
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">......</span>
GUILayout.EndScrollView();

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">- &#20462;&#25913;&#23383;&#20307;&#22823;&#23567;&#39068;&#33394;</span>
<span style="color: #98fb98;">GUIStyle</span> <span style="color: #eedd82;">uiFont</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">GUIStyle</span>();
uiFont.normal.background = <span style="color: #7fffd4;">null</span>;
uiFont.normal.textColor = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Color</span>(1, 0, 0);
uiFont.fontSize = 20;
GUI.Label(<span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Rect</span>(200, 320, 200, 200), <span style="color: #ffa07a;">"UI &#25171;&#21253;"</span>, uiFont);
</pre>
</div>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline107" class="outline-3">
<h3 id="orgheadline107"><span class="section-number-3">5.2</span> Misc</h3>
<div class="outline-text-3" id="text-5-2">
</div><div id="outline-container-orgheadline106" class="outline-4">
<h4 id="orgheadline106"><span class="section-number-4">5.2.1</span> Path</h4>
<div class="outline-text-4" id="text-5-2-1">
</div><ol class="org-ol"><li><a id="orgheadline104"></a>EditorApplication.applicationContentsPath<br><div class="outline-text-5" id="text-5-2-1-1">
<p>
返回 Unity 编辑器内容的目录。（只读）<br>
该目录下包含多个内置项目，使用编辑器构建播放器时，会用到它们。<br>
例如： 我打印出的这个目录为 D:/Applications/Unity/Editor/Data<br>
</p>
</div></li>
<li><a id="orgheadline105"></a>EditorApplication.applicationPath<br><div class="outline-text-5" id="text-5-2-1-2">
<p>
返回 Unity 编辑器应用程序的目录。（只读）<br>
例如： 我打印出的这个目录为 D:/Applications/Unity/Editor/Unity.exe<br>
</p>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline110" class="outline-3">
<h3 id="orgheadline110"><span class="section-number-3">5.3</span> Build</h3>
<div class="outline-text-3" id="text-5-3">
</div><div id="outline-container-orgheadline108" class="outline-4">
<h4 id="orgheadline108"><span class="section-number-4">5.3.1</span> 自定义宏</h4>
<div class="outline-text-4" id="text-5-3-1">
<p>
File -&gt; Build Settings -&gt; Player Settings /Other Settings/Scripting Define Symbols<br>
</p>

<p>
<a href="https://docs.unity3d.com/Manual/PlatformDependentCompilation.html" target="_blank" rel="external">https://docs.unity3d.com/Manual/PlatformDependentCompilation.html</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline109" class="outline-4">
<h4 id="orgheadline109"><span class="section-number-4">5.3.2</span> Unity 命令行</h4>
<div class="outline-text-4" id="text-5-3-2">
<p>
Unity 命令行参数文档  <a href="https://docs.unity3d.com/Manual/CommandLineArguments.html" target="_blank" rel="external">https://docs.unity3d.com/Manual/CommandLineArguments.html</a><br>
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline115" class="outline-2">
<h2 id="orgheadline115"><span class="section-number-2">6</span> Usage</h2>
<div class="outline-text-2" id="text-6">
</div><div id="outline-container-orgheadline113" class="outline-3">
<h3 id="orgheadline113"><span class="section-number-3">6.1</span> prefab</h3>
<div class="outline-text-3" id="text-6-1">
</div><div id="outline-container-orgheadline112" class="outline-4">
<h4 id="orgheadline112"><span class="section-number-4">6.1.1</span> 取消预制体关联</h4>
<div class="outline-text-4" id="text-6-1-1">
<ol class="org-ol">
<li>将 GameObject 拖到 Assets 中的一个临时目录，创建一个临时的 Prefab<br></li>
<li>执行菜单命令 GameObject/Break Prefab Instance<br></li>
<li>删除第一步中的临时 Prefab<br></li>
</ol>
</div>
</div>
</div>
<div id="outline-container-orgheadline114" class="outline-3">
<h3 id="orgheadline114"><span class="section-number-3">6.2</span> search</h3>
</div>
</div>
<div id="outline-container-orgheadline185" class="outline-2">
<h2 id="orgheadline185"><span class="section-number-2">7</span> Optimize</h2>
<div class="outline-text-2" id="text-7">
</div><div id="outline-container-orgheadline156" class="outline-3">
<h3 id="orgheadline156"><span class="section-number-3">7.1</span> Optimizing Graphics Performance</h3>
<div class="outline-text-3" id="text-7-1">
<pre class="example">
翻译自 OptimizingGraphicsPerformance.html
</pre>
<p>
好的性能是很多游戏成功的关键。下面是一些最大化游戏图形渲染速度的简单指导方针。<br>
</p>
</div>
<div id="outline-container-orgheadline122" class="outline-4">
<h4 id="orgheadline122"><span class="section-number-4">7.1.1</span> where are the graphics costs</h4>
<div class="outline-text-4" id="text-7-1-1">
<p>
哪些地方会有图形消耗?<br>
游戏的图形部分主要会消耗计算机的两大系统：GPU 和 CPU。任何优化的第一准则就是找出性能问题发生在哪儿。因为优化 GPU 和 CPU 的策略会非常不同（甚至是相反的，通常会让 GPU 一次做更多的工作来实现优化，而 CPU 则恰恰相反）<br>
</p>
</div>

<ol class="org-ol"><li><a id="orgheadline121"></a>典型的瓶颈以及检测他们的方法<br><ol class="org-ol"><li><a id="orgheadline116"></a>GPU 通常会受到填充率和内存带宽的限制:<br><div class="outline-text-6" id="text-7-1-1-1-1">
<p>
是否游戏在低分辨率设备上运行的更快？如果是这样，你很可能是受到了填充率在 GPU 上的限制。<br>
</p>
</div></li>
<li><a id="orgheadline117"></a>CPU 通常会受到需要被渲染的批处理的数量的限制<br><div class="outline-text-6" id="text-7-1-1-1-2">
<p>
在 Rendering Statistics 窗口可以检查”batches”的数量。<br>
</p>

<p>
当然，这里只有首要的原则；瓶颈也可能发生在其他什么地方。比较不典型的瓶颈有：<br>
</p>
</div></li>
<li><a id="orgheadline118"></a>不是渲染的问题，无论是在 GPU 还是 CPU 上。<br><div class="outline-text-6" id="text-7-1-1-1-3">
<p>
例如你的脚本和物理可能才是真正的问题。用 Profiler 可以将其指出来。<br>
</p>
</div></li>
<li><a id="orgheadline119"></a>GPU 有很多顶点需要处理。多少个顶点是可以接受的，这一点取决于 GPU 以及顶点着色器的复杂度。<br><div class="outline-text-6" id="text-7-1-1-1-4">
<p>
通常数据表明，在移动设备上，顶点数目不要超过 10 万个，在 PC 平台上，不要超过几百万个。<br>
</p>
</div></li>
<li><a id="orgheadline120"></a>对于一些需要在 CPU 进行的顶点处理，CPU 也有很多顶点需要处理。<br><div class="outline-text-6" id="text-7-1-1-1-5">
<p>
例如，网格蒙皮，布料模拟，特效等。<br>
</p>
</div></li></ol></li></ol>
</div>

<div id="outline-container-orgheadline126" class="outline-4">
<h4 id="orgheadline126"><span class="section-number-4">7.1.2</span> CPU optimization</h4>
<div class="outline-text-4" id="text-7-1-2">
<p>
为了渲染屏幕上的任何物体，CPU 必须要做一些工作——计算出哪些光照影响到了这些物体，设置着色器以及他们的参数，发生绘制命令给图形驱动，图形驱动会准备这些命令发送给图形卡（显卡）。所有这些每个物体的 CPU 消耗都不廉价，有很多可见的物体时，消耗会叠加。<br>
所以，如果你有一千个三角形，他们如果都在一个网格内，那将会比每个三角形都有一个独立的网格的情况要高效很多。这两种情况在 GPU 上的消耗是差不多的，但是在 CPU 上，渲染一千个物体和一个物体所做的工作将有很明显差别。<br>
</p>

<p>
为了让 CPU 少做一些工作，最好减少可见物体的数量：<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline123"></a>使用手动方式或者 Unity 的 draw call 批处理方式，将靠近的物体组合在一起。<br></li>
<li><a id="orgheadline124"></a>游戏物体使用尽可能少的材质，将不同的贴图放到一张更大的贴图地图中。<br></li>
<li><a id="orgheadline125"></a>尽可能少使用导致多次渲染物体的效果（例如，反射、阴影、基于像素的光照等等）<br><div class="outline-text-6" id="text-7-1-2-0-3">
<p>
组合物体到一起从而每个网格最少有几百个三角形并且为整个网格使用一个材质。将两个不共享同一材质的物体合并在一起不会获得任何性能的提升。最常见的需要有多个材质的原因是两个网格使用不同的贴图，所以，为了优化 CPU 性能，你应该保证你组合到一起的物体使用同一个贴图。<br>
</p>

<p>
然而，在正向渲染中，当使用很多基于像素的光照，有很多情况下，将多个物体合并可能不会管用，就像下面的解释。<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline129" class="outline-4">
<h4 id="orgheadline129"><span class="section-number-4">7.1.3</span> GPU: Optimizing Model Geometry</h4>
<div class="outline-text-4" id="text-7-1-3">
<p>
优化一个模型的几何时，有两个基础的准则：<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline127"></a>不要使用任何多余的不必要的三角形<br></li>
<li><a id="orgheadline128"></a>保持 UV 贴图接缝和硬边缘的数目越少越好<br><div class="outline-text-6" id="text-7-1-3-0-2">
<p>
需要注意的是图形硬件需要处理的实际的顶点的数目通常和 3D 应用程序导出的顶点的数目是不相同的。模型应用程序通常显示的是几何顶点数目，例如组成模型的不同的角点。然而，对于显卡来说，为了渲染的目的，一些结合顶点需要被分为两个或更多个逻辑顶点。如果一个顶点有多个法线、贴图坐标或顶点颜色，这个顶点就必须被分为多个逻辑顶点。因此，Unity 中的顶点数目总是要比 3D 应用程序所给的顶点数目多。<br>
</p>

<p>
尽管模型中的几何数量大多会影响到 GPU，在 Unity 中一些特性依然会在 CPU 中处理模型，例如网格蒙皮。<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline133" class="outline-4">
<h4 id="orgheadline133"><span class="section-number-4">7.1.4</span> Lighting Performance</h4>
<div class="outline-text-4" id="text-7-1-4">
<p>
不进行计算的光照总是最快的！只需要使用光照贴图来 bake 静态光照一次，就可以代替每一帧的光照计算。在 Unity 中，生成光照贴图环境的处理过程所花的时间只会比将一个光照放在场景中长一点，但是：<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline130"></a>光照贴图要运行的更快（比基于像素的光照快 2-3 倍）<br></li>
<li><a id="orgheadline131"></a>并且看上去效果要更好，因为你可以烘焙的全局照明而且光照贴图可以平滑化结果。<br><div class="outline-text-6" id="text-7-1-4-0-2">
<p>
在很多情况下，在 shader 和内容中有一些简单的技巧可以代替到处添加光照。例如，可以在 shader 中添加专门的边缘发光计算，来代替添加一个光照直接照射摄像机从而获得边缘发光的效果。<br>
</p>
</div></li>
<li><a id="orgheadline132"></a>Lights in forward rendering<br><div class="outline-text-5" id="text-7-1-4-1">
<p>
基于像素的动态光照会给每个被影响的像素增加明显的渲染负荷，并且会导致物体在多个阶段中被渲染。在性能低的设备上，例如移动设备或底端 PC GPU 上，需要避免有多于一个的像素光照照明任何一个物体，并且使用光照贴图代替每帧的光照计算来照亮静态物体。基于顶点的动态光照会给顶点变换添加明显的消耗。尽可能避免多个光照照明任何一个给定物体的情况。<br>
如果你使用基于像素的光照，每个网格必须被渲染的次数和它被照明的像素光照的数目是相同的。如果你合并两个相距较远的物体，这将会增加组合物体的有效尺寸。所有的照明了组合物体的任何一部分的像素光照，在渲染过程中都会被考虑，所以需要执行的渲染阶段的数量将会增加。通常渲染组合物体时，需要执行的阶段数目是所有分开的物体的阶段数目的总和，所以组合没有获得任何好处。基于这样的原因，你不应该将分开的比较远的不被同一组像素光照影响的网格合并在一起。<br>
</p>

<p>
在渲染期间，Unity 会找出一个网格周围的所有光照，并且计算其中有哪些光照对物体影响最大。Quality Settings 用来修改有多少光照最终被当做像素光照，以及有多少被当做顶点光照。每个光照会基于它离网格的距离以及它的照明强度来计算它的重要性。更进一步，只从游戏内容来看，一些光照比另外一些要更重要。基于这样的原因，每个光照都有一个 RenderMode 设置，它可以被设置为 Important 或者 Not Important；被标记为 Not Important 的光照通常会有较低的渲染负载。<br>
例如，在一个驾驶游戏中，玩家在黑暗中打开车头灯驾驶。车头灯很可能是游戏中最明显的光源，所以他们的 RenderMode 应该被设置为 Important。另一方面，游戏中一定包含不太重要的等（汽车的尾灯）并且使用像素光照，他们也不会改善可视化效果。这样的灯光应该被设置为 Not Important，从而避免在只能获得很小效果的地方浪费渲染能力。<br>
</p>

<p>
优化基于像素的光照可以同时节省 CPU 和 GPU 消耗：对于额外的物体渲染，CPU 有更少的 draw call 需要做，GPU 有更少的顶点需要处理、更少的像素需要光栅化。<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline135" class="outline-4">
<h4 id="orgheadline135"><span class="section-number-4">7.1.5</span> GPU: Texture Compression and Mipmaps</h4>
<div class="outline-text-4" id="text-7-1-5">
<p>
使用压缩贴图将会减低你的贴图大小（从而使加载时间更快，内存占用更小）并且可以显著地增加渲染性能。压缩的贴图所使用的内存带宽和未压缩的 32 位 RGBA 贴图所使用的内存带宽相比，只是一小部分。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline134"></a>Use Texture Mip Maps<br><div class="outline-text-5" id="text-7-1-5-1">
<p>
首要的规则是，对于在 3D 场景中使用的贴图，应该总是开启 MipMaps 生成。在 GPU 渲染时，就像贴图压缩可以帮助限制贴图数据的数量，一个 mip mapped 贴图可以让 GPU 为更小的三角形使用低分辨率的贴图。<br>
这个规则的唯一的例外是贴图图元以 1 比 1 映射到屏幕像素，例如 UI 元素，或者是在 2D 游戏中。<br>
</p>
</div></li></ol>
</div>

<div id="outline-container-orgheadline136" class="outline-4">
<h4 id="orgheadline136"><span class="section-number-4">7.1.6</span> LOD and Per-Layer Cull Distances</h4>
<div class="outline-text-4" id="text-7-1-6">
<p>
在一些游戏中，为了减低 CPU 和 GPU 的负载，积极地剔除比较小的物体可能更合适。例如，小石块和碎片应该在距离很远时变的不可见，然而巨大的建筑却依然可见。<br>
这可以通过 Level Of Detail system 来实现，或者通过在摄像机上手动设置每个层的剔除距离。你可以将小物体放到一个分开的层中并且使用 Camera.layerCullDistances 脚本函数来设置每个层的剔除距离。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline137" class="outline-4">
<h4 id="orgheadline137"><span class="section-number-4">7.1.7</span> Realtime Shadows</h4>
<div class="outline-text-4" id="text-7-1-7">
<p>
实时阴影非常的棒，但他们会消耗很多的性能，在 CPU 上会有额外的 draw calls，在 GPU 上也有额外的处理。<br>
更多详细情况，请参阅 Light Performance。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline140" class="outline-4">
<h4 id="orgheadline140"><span class="section-number-4">7.1.8</span> GPU: Tips for writing high-performance shaders</h4>
<div class="outline-text-4" id="text-7-1-8">
<p>
毫不夸张地讲，一个高端的 PC GPU 和一个底端的移动设备 GPU 有几百倍的性能差别。即使在同一平台上，也是一样的。在一个 PC 上，一个快速的 GPU 要比一个慢速的集成的 GPU 快几十倍；在移动平台上你也可以看到 GPU 直接的巨大差异。<br>
所以需要记住移动平台和底端 PC 上的 GPU 性能会比你的开发机器低很多。通常着色器需要手动优化来减低计算和贴图读取，从而获得好的性能。例如，内置的 Unity 着色器有他们等价的“mobile”版本，他们会更加高效（但是有一些限制或者近似 - 这使得他们更高效）。<br>
</p>

<p>
下面是一些指导方针，他们对于移动平台和底端 PC 显卡比较重要：<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline138"></a>Complex mathematical operations<br><div class="outline-text-5" id="text-7-1-8-1">
<p>
超越数学函数（幂函数、指数函数，对数函数，余弦函数，正弦函数，正切函数等）是非常昂贵的，所以一个好的首要规则是每个像素不要超过一个这样的操作。在适用的地方，可以考虑将贴图查询作为可选方案。<br>
尝试编写你自己的规范化、点积、inverse sqrt 操作是不明智的。如果你适用内置的方法，驱动会为你生成更好的代码。<br>
记住 alpha 测试（discard）操作将会是你的片段处理变慢。<br>
</p>
</div></li>
<li><a id="orgheadline139"></a>Floating point operations<br><div class="outline-text-5" id="text-7-1-8-2">
<p>
在写自定义的着色器时，你应该总是指定浮点数变量的精度。选择尽可能小的浮点数格式来获得最好的性能是至关重要的。操作的精度在很多桌面 GPU 上是完全被忽略的，但是对于很多移动平台的 GPU 却是至关重要的。<br>
如果 shader 是使用 Cg/HLSL 编写的，可以按照下面描述来指定精度：<br>
float - 32 位浮点数格式，适用于顶点变换但它是性能最慢的.<br>
half  - 16 位浮点数格式，适用于贴图 UV 坐标并且比 float 差不多要快 2 倍.<br>
fixed - 10 位浮点数格式，适用于颜色，光照计算和其他高性能操作并且比 float 差不多快 4 倍.<br>
如果 shader 是用 GLSL 编写的，浮点数精度是分别通过 highp、mediump、lowp 来指定的。<br>
关于 shader 性能的更多的详细信息可以在 Shader Performance 页面中找到。<br>
</p>
</div></li></ol>
</div>

<div id="outline-container-orgheadline155" class="outline-4">
<h4 id="orgheadline155"><span class="section-number-4">7.1.9</span> Simple Checklist to make Your Game Faster</h4>
<div class="outline-text-4" id="text-7-1-9">
</div><ol class="org-ol"><li><a id="orgheadline141"></a>在 PC 平台下，依据目标 GPU 不同，保持每帧的顶点数目低于 200k 到 3M<br></li>
<li><a id="orgheadline142"></a>如果你使用内置着色器，请选择移动平台类型或无光照类型。他们可以在非移动平台上也可以很好的运行；他们只是更复杂的着色器的简化版和近似版。<br></li>
<li><a id="orgheadline143"></a>保持每个场景中不同材质的数目比较少，尽量在多个不同的物体之间共享材质。<br></li>
<li><a id="orgheadline144"></a>为不移动的物体设置静态属性，从而允许静态批处理等内部优化。<br></li>
<li><a id="orgheadline145"></a>不要使用不必要的像素光照，应该选择只有一个像素光照可以影响你的几何体。<br></li>
<li><a id="orgheadline146"></a>不要使用不必要的动态光照，应该选择烘焙光照来代替。<br></li>
<li><a id="orgheadline147"></a>如果可以的话尽量使用压缩格式的贴图，另外和 32 位贴图相比优先选择 16 位贴图格式。<br></li>
<li><a id="orgheadline148"></a>不要使用不必要的雾效果。<br></li>
<li><a id="orgheadline149"></a>了解遮挡剔除的好处，在有很多遮挡的静态场景的情况下，使用它来减低可见几何体和 draw calls 的数量.规划你的场景从遮挡剔除中获益。<br></li>
<li><a id="orgheadline150"></a>使用天空盒来伪造远处的几何体。<br></li>
<li><a id="orgheadline151"></a>使用像素着色器或贴图组合器来混合多个贴图从而代替多个阶段的处理。<br></li>
<li><a id="orgheadline152"></a>如果编写自定的着色器，应该总是尽可能使用最小的浮点数格式：<br><div class="outline-text-5" id="text-7-1-9-12">
<p>
fixed / lowp    - 用于颜色，光照信息和法线<br>
half  / mediump - 用于 UV 坐标<br>
float / highp   - 避免在像素着色器中使用，最好用于在顶点着色器中计算位置。<br>
</p>
</div></li>
<li><a id="orgheadline153"></a>在像素着色器中，最小化使用复杂的数学运算，例如 pow sin cos 等等。<br></li>
<li><a id="orgheadline154"></a>对于每个片段，尽可能使用少的贴图。<br></li></ol>
</div>
</div>
<div id="outline-container-orgheadline170" class="outline-3">
<h3 id="orgheadline170"><span class="section-number-3">7.2</span> Draw Call Batching</h3>
<div class="outline-text-3" id="text-7-2">
<pre class="example">
翻译自 DrawCallBatching.html
</pre>
<p>
为了将一个物体绘制在屏幕上，引擎必须发送一个绘制调用给图形 API（例如,OpenGL 或 Direct3D）。绘制调用通常是很昂贵的，每一次绘制调用都会有图形 API 做一些重要的工作，导致在 CPU 端有性能负载。这大多数是因为不同的绘制调用之间状态的改变而引起的（例如，切换不同的材质），这导致了图形驱动中，昂贵的生效和变换步骤。<br>
Unity 使用 static batching 来处理这种情况。静态批处理的目标是将尽可能多的网格重新分组到尽可能少的 buffer 中，从而获得更好的性能。这样做的结果是少量的巨大的网格会被渲染，从而代替了大量的低效的小的网格。Unity 会在同样的资源上循环渲染这些资源的不同区间。它为每个 static batched 网格，高效地执行一系列的快速绘制调用。<br>
Unity 中内置的批处理支持比简单地合并几何体到模型中要有很显著的好处。在 Unity5.0 中，开始时只有一个构建的索引缓存区，然后对于大网格的每一个可见的子网格，会提交一个绘制调用。<br>
</p>
</div>
<div id="outline-container-orgheadline157" class="outline-4">
<h4 id="orgheadline157"><span class="section-number-4">7.2.1</span> Materials</h4>
<div class="outline-text-4" id="text-7-2-1">
<p>
只有共享相同材质的物体才可以被 batch 在一起。所以，如果你想好的 batching，你需要尽可能在多个不同物体之间共享材质。<br>
如果你有两个不同的材质他们只是贴图不同，你可以将这些贴图合并到一个大贴图中（这个处理过程经常被称做贴图地图）。当贴图在同一个贴图地图中时，你就可以用一个材质来代替多个不同材质了。<br>
如果你需要在脚本中访问共享的材质属性，非常重要的一点是修改 Renderer.material 将会创建一个材质副本。而你应该使用 Renderer.sharedMaterial 来保持材质的共享。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline167" class="outline-4">
<h4 id="orgheadline167"><span class="section-number-4">7.2.2</span> Dynamic Batching</h4>
<div class="outline-text-4" id="text-7-2-2">
<p>
Unity 可以自动 batch 移动的物体到相同的 draw call 中，条件是他们需要共享相同的材质以及满足一些其他条件。Dynamic batching 是自动进行的并且不需要你的任何额外工作。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline166"></a>Tips:<br><ol class="org-ol"><li><a id="orgheadline160"></a>批处理动态物体对于每个顶点都有负荷，所以只会应用于顶点属性总数少于 900 的网格。<br><ol class="org-ol"><li><a id="orgheadline158"></a>如果你的着色器使用顶点位置、法线和一个 UV、你可以批处理 300 个顶点；然而，如果你需要使用顶点位置、法线、UV0、UV1 以及切线，你只可以批处理 180 个顶点。<br></li>
<li><a id="orgheadline159"></a>请注意：属性数量限制在未来可能会改变。Please note: attribute count limit might be changed in future<br></li></ol></li>
<li><a id="orgheadline161"></a>一般来讲，物体应该使用相同的缩放比例。<br><div class="outline-text-6" id="text-7-2-2-1-2">
<p>
非统一缩放对象属于例外；如果很多对象都有不同的非统一缩放，它们依然可以被 batched。<br>
</p>
</div></li>
<li><a id="orgheadline162"></a>使用不同的材质实例（即使他们相同）将使得物体无法被一起 batched。<br></li>
<li><a id="orgheadline163"></a>使用光照贴图的物体有额外的渲染参数：光照贴图索引以及光照贴图中的偏移和缩放。所以通常来讲动态光照贴图对象应该指定相同的光照贴图位置来支持 batched。<br></li>
<li><a id="orgheadline164"></a>多阶段着色器将会打破批处理。在正向渲染中，几乎所有的 unity 着色器都支持多个光照，实际上是为他们执行额外的阶段。额外的像素光照的绘制调用将不会被 batched。<br></li>
<li><a id="orgheadline165"></a>接收实时阴影的物体也不可以被 batched。<br></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline168" class="outline-4">
<h4 id="orgheadline168"><span class="section-number-4">7.2.3</span> Static Batching</h4>
<div class="outline-text-4" id="text-7-2-3">
<p>
另一方面，静态批处理允许引擎降低任意大小几何体的 draw calls（假如它不会移动并且共享相同的材质）。静态批处理比动态批处理效果更加显著，但是它会使用更多的内存。你应该选择使用静态批处理，因为它只占用少量的 CPU 功能。<br>
</p>

<p>
为了利用静态批处理的优势，你需要显式地指定特定的物体在游戏中是静止的，将不会被移动，旋转和缩放。在 Inspector 面板中勾选 Static 选项即可。<br>
</p>

<p>
使用静态批处理将需要额外的内存来存储组合后的几何体。在静态批处理之前，如果多个物体共享同一个几何体，这是会为每个对象创建一个几何体副本，无论是在编辑器中还是在实际运行中。这可能并不是一个好的主意 - 有时候你必须为一些物体避免使用静态批处理牺牲渲染性能来保持较低的内存占用。例如，在一个稠密的森林关卡中，将树木标记为静态会有很严重的内存影响。<br>
</p>

<p>
在内部实现中，静态批处理将静态物体转换到世界空间，并且建立一个顶点和索引缓冲区。然后，在同一个批处理中的所有可见物体，会执行一系列的廉价的 draw calls，这些 draws 之间几乎没有状态改变。所以，技术上来讲静态批处理并没有节省“3D API draw calls”，但是它节省了不同 draw calls 之间的状态改变（这是非常耗时的一部分）。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline169" class="outline-4">
<h4 id="orgheadline169"><span class="section-number-4">7.2.4</span> Other batching tips</h4>
<div class="outline-text-4" id="text-7-2-4">
<p>
目前，只有 Mesh Renderers 和 Particle Systems 是被 batched 的。这意味着网格蒙皮、布料、路径渲染以及其他类型的渲染组件是不被 batched。<br>
</p>

<p>
半透明着色器通常需要以从后到前的顺序渲染物体。Unity 首先会以这样的顺序排列物体，然后尝试将他们批处理（但是，因为必须满足严格的顺序，这就意味着比起不透明物体来讲，只有更少的物体可以批处理）。<br>
</p>

<p>
为了批处理 draw call，手动组合那些互相比较靠近的物体可能是一个比较好的选择。例如，一个放有很多衣物的静态橱柜被组合为一个网格是有意义的，你可以通过 3D 模型应用程序或者是使用 Mesh.CombineMeshes 来实现组合。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline176" class="outline-3">
<h3 id="orgheadline176"><span class="section-number-3">7.3</span> Modeling characters for optimal performance</h3>
<div class="outline-text-3" id="text-7-3">
<pre class="example">
翻译自 ModelingOptimizedCharacters.html
</pre>
<p>
Below are some tips for designing character models to give optimal rendering speed.<br>
下面是设计角色模型达到最佳渲染速度的一些提示：<br>
</p>
</div>
<div id="outline-container-orgheadline171" class="outline-4">
<h4 id="orgheadline171"><span class="section-number-4">7.3.1</span> 使用单个蒙皮网格渲染</h4>
<div class="outline-text-4" id="text-7-3-1">
<p>
你应该为每个角色只使用一个蒙皮网格渲染。Unity 使用可见性剔除和边界体积更新来优化动画，并且这些优化在只使用了一个 Animation 组件以及一个 Skinned Mesh Renderer 组件的时候才激活。使用两个 Shinned Mesh Renderer 来代替单个 Shinned Mesh Renderer 会导致一个模型的渲染时间几乎翻倍，使用多个网格很少有任何实际优势。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline172" class="outline-4">
<h4 id="orgheadline172"><span class="section-number-4">7.3.2</span> 使用尽可能少的材质</h4>
<div class="outline-text-4" id="text-7-3-2">
<p>
你应该尽可能降低每个网格使用的材质数目。为一个角色使用多个材质的唯一原因是你需要为角色的不同部位使用不同的着色器。然而，在大多数情况下，每个角色使用 2-3 个材质应该是足够了。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline173" class="outline-4">
<h4 id="orgheadline173"><span class="section-number-4">7.3.3</span> 使用尽可能少的骨骼</h4>
<div class="outline-text-4" id="text-7-3-3">
<p>
在一个典型的桌面游戏中，一个骨骼层级中大概会使用 15-60 个骨骼。使用的骨骼数目越少，性能会越好。使用 30 个骨骼的话，你可以在桌面平台和移动平台上都获得不错的品质。理性情况下，保证移动平台中骨骼数目少于 30 个，并且在桌面游戏中不要超出 30 个太多。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline174" class="outline-4">
<h4 id="orgheadline174"><span class="section-number-4">7.3.4</span> 多边形数目</h4>
<div class="outline-text-4" id="text-7-3-4">
<p>
多边形的数目取决于你需要的品质以及你的目标平台。对于移动设备来说，每个网格的多边形介于 300 和 1500 个会有一个好的结果，然而，对于桌面平台来说，理想的范围是 1500 到 4000。在任何给定时间点，如果游戏中有很多角色出现在屏幕上，你可能需要降低每个网格的多边形的数量。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline175" class="outline-4">
<h4 id="orgheadline175"><span class="section-number-4">7.3.5</span> 保持正向运动和反向运动分开</h4>
<div class="outline-text-4" id="text-7-3-5">
<p>
当动画被导入时，一个模型的反向运动节点会被烘焙到正向运动中作为最终结果，Unity 不需要反向运动节点。然而，如果将他们留在模型中他们会有 CPU 负载，尽管他们不影响动画。你可以依据你的偏好在 Unity 中或者是使用模型工具删除这些冗余的逆向运动节点。理想的情况是，你应该在建模的过程中，保持反向运动和正向运动层级分开，从而在需要删除反向运动节点时会比较容易。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline184" class="outline-3">
<h3 id="orgheadline184"><span class="section-number-3">7.4</span> Optimizing Shader Load Time</h3>
<div class="outline-text-3" id="text-7-4">
<pre class="example">
翻译自 OptimizingShaderLoadTime.html
</pre>
<p>
着色器都是在 GPU 上执行的小程序，加载它们会花费一些时间。通常情况下每个独立的 GPU 程序不会花费太多的加载时间，但是在内部着色器会有很多变体。<br>
例如，标准着色器，如果完全编译的话，最终会是成千上万个稍微不同的 GPU 程序。这造成了两个潜在的问题：<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline177"></a>巨大数量的着色器变体增加了游戏编译时间，以及游戏的大小。<br></li>
<li><a id="orgheadline178"></a>在游戏中，加载巨大数量的着色器变体会比较慢，并且占用会内存。<br></li>
<div id="outline-container-orgheadline181" class="outline-4">
<h4 id="orgheadline181"><span class="section-number-4">7.4.1</span> Shader build time stripping</h4>
<div class="outline-text-4" id="text-7-4-1">
<p>
着色器编译时间剥离<br>
</p>

<p>
在编译游戏时，Unity 可以检测一些内部的着色器变体不会被游戏用到，并且可以忽略他们。下面两种情况下，会剥离着色器编译时间：<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline179"></a>独立的着色器特性，对于使用了#pragma shader_feature 的着色器。如果在使用的材质中，没有用到这个特定的变体，该着色器变体不会被包含在编译中。详细信息可以查看 internal shader variants 文档。除了内置着色器以外，标准着色器也是这样的。<br></li>
<li><a id="orgheadline180"></a>着色器变体用来处理雾并且光照贴图模式没有被任何场景使用时，着色器变体也不会被包含在游戏数据中。如果你想覆盖这种行为，你可以查看 Graphics Settings 文档。<br><div class="outline-text-5" id="text-7-4-1-2">
<p>
组合上面的基本上可以降低着色器数据的大小。例如，一个完全编译的标准着色器将会占用几百兆字节，但是一个特定的项目中最终只会占用两兆字节（并且在应用程序打包处理时会进一步压缩）。<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline182" class="outline-4">
<h4 id="orgheadline182"><span class="section-number-4">7.4.2</span> Default Unity shader loading behavior</h4>
<div class="outline-text-4" id="text-7-4-2">
<p>
在所有默认设置情况下，Unity 加载 shaderlab 着色器对象到内存中，但并不会创建内置的着色器变体，直到他们被需要的时候。<br>
这就意味着被包含在游戏编译中的着色器变体还是有可能被使用，但是并不会有内存占用也没有加载时间消耗，直到他们被需要的时候。例如，着色器总是包含一个变体来处理带有阴影的点光照，但是，如果你最终没有在游戏中使用带有阴影的点光源，就不会加载这个特定的变体。<br>
然而，默认行为的一个缺点是，当第一次需要某个特定的着色器变体时，可能会造成卡顿，因为一个新的 GPU 程序被加载到图形驱动中。在游戏过程中，这通常是不希望看到这种情况的，所以 Unity 有 ShaderVariantCollection 资源来帮助解决这个问题。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline183" class="outline-4">
<h4 id="orgheadline183"><span class="section-number-4">7.4.3</span> Shader Variant Collections</h4>
<div class="outline-text-4" id="text-7-4-3">
<p>
ShaderVariantCollection 是一个基于着色器列表的资源，对于列表中的每个元素，有一个 Pass 类型列表和 shader 关键字组合被加载。<br>
为了基于实际使用的着色器和他们的变体来创建这些资源，编辑器可以追踪哪些着色器以及他们的变体在实际中被使用。在 Graphics Settings 中，有一个按钮可以依据当前追踪的着色器来创建一个新的 ShaderVariantCollection，或者是清除当前追踪的着色器列表。<br>
一旦你有了 ShaderVariantCollection 资源，你可以设置着色器变体在游戏加载时自动加载(在 Graphics Settings 下的 Preloaded Shaders 列表中设置)，或者你可以预加载独立的着色器变体集合。详细信息可以查看 ShaderVariantCollection 脚本类。<br>
</p>
</div>
</div>
</ol></div>
</div>
<div id="outline-container-orgheadline187" class="outline-2">
<h2 id="orgheadline187"><span class="section-number-2">8</span> Shader</h2>
<div class="outline-text-2" id="text-8">
</div><div id="outline-container-orgheadline186" class="outline-3">
<h3 id="orgheadline186"><span class="section-number-3">8.1</span> 内置着色器下载</h3>
<div class="outline-text-3" id="text-8-1">
<p>
Unity 内置 Shader 可以在官网下载：<a href="https://unity3d.com/cn/get-unity/download/archive" target="_blank" rel="external">https://unity3d.com/cn/get-unity/download/archive</a><br>
进入上面页面，点击下载按钮的下拉菜单，选择 内置着色器。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline189" class="outline-2">
<h2 id="orgheadline189"><span class="section-number-2">9</span> Android Platform</h2>
<div class="outline-text-2" id="text-9">
</div><div id="outline-container-orgheadline188" class="outline-3">
<h3 id="orgheadline188"><span class="section-number-3">9.1</span> 开发环境</h3>
<div class="outline-text-3" id="text-9-1">
<ol class="org-ol">
<li>下载 Android Studio 安装 Android SDK<br></li>
<li>安装 JDK<br></li>
</ol>
</div>
</div>
</div>
<div id="outline-container-orgheadline192" class="outline-2">
<h2 id="orgheadline192"><span class="section-number-2">10</span> Error</h2>
<div class="outline-text-2" id="text-10">
</div><div id="outline-container-orgheadline190" class="outline-3">
<h3 id="orgheadline190"><span class="section-number-3">10.1</span> Setting the parent of a transform which resides in a prefab is disabled to prevent data corruption.</h3>
<div class="outline-text-3" id="text-10-1">
<p>
错误的原因是，prefab 加载后不能直接加入到场景中。必须要以 prefab 为父本生成克隆对象，将克隆对象作为操作的对象加入场景。<br>
</p>
<div class="org-src-container">

<pre class="src src-c#">public static GameObject CreateView ()
{
	// 正确的方式
  return GameObject.Instantiate (Resources.Load ("UI/Root_start") as GameObject);
}
public static GameObject CreateView ()
{
	// 错误的方式
  return Resources.Load ("UI/Root_start") as GameObject;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline191" class="outline-3">
<h3 id="orgheadline191"><span class="section-number-3">10.2</span> 在编辑器场景中移近视角（滑动鼠标滚轮）时，物体会突然无法看到</h3>
<div class="outline-text-3" id="text-10-2">
<p>
检查一下方向光的方向，漫放射光无法进入视角时就无法看到物体。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline196" class="outline-2">
<h2 id="orgheadline196"><span class="section-number-2">11</span> Q&amp;A</h2>
<div class="outline-text-2" id="text-11">
</div><div id="outline-container-orgheadline193" class="outline-3">
<h3 id="orgheadline193"><span class="section-number-3">11.1</span> 为什么基于像素的光照会导致物体的多次渲染？</h3>
</div>
<div id="outline-container-orgheadline194" class="outline-3">
<h3 id="orgheadline194"><span class="section-number-3">11.2</span> 激活 GameObject 和激活 Component 分别使用什么方法？</h3>
<div class="outline-text-3" id="text-11-2">
<p>
gameObject.SetActive(true)<br>
comp.enabled = true<br>
大部分组件是包含 enabled 属性的，但是该属性并不是 Component 类的成员，例如：Transform 属性是没有 enabled 属性的。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline195" class="outline-3">
<h3 id="orgheadline195"><span class="section-number-3">11.3</span> 删除 GameObject 和删除 Component 分别使用什么方法？</h3>
<div class="outline-text-3" id="text-11-3">
<p>
GameObject.Destroy(gameObject);<br>
GameObject.Destroy(com)<br>
</p>
</div>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> unity </category>
            
        </categories>
        
        
        <tags>
            
            <tag> unity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VIM]]></title>
      <url>http://wolfand11.coding.me/2016/09/28/tools/vim/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5"><span class="section-number-2">1</span> VIM</h2>
<div class="outline-text-2" id="text-1">
<a id="more"></a>
</div>

<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3"><span class="section-number-3">1.1</span> 配置</h3>
<div class="outline-text-3" id="text-1-1">
<p>
window 下配置放置在 ~/_vimrc<br>
osx    下配置放置在 ~/.vimrc<br>
</p>
</div>
<div id="outline-container-orgheadline2" class="outline-4">
<h4 id="orgheadline2"><span class="section-number-4">1.1.1</span> 键盘映射</h4>
<div class="outline-text-4" id="text-1-1-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">

<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Command</th>
<th scope="col" class="org-left">Normal</th>
<th scope="col" class="org-left">Visual</th>
<th scope="col" class="org-left">Operator Pending</th>
<th scope="col" class="org-left">Insert Only</th>
<th scope="col" class="org-left">Command Line</th>
</tr>

<tr>
<th scope="col" class="org-left">命令</th>
<th scope="col" class="org-left">常规模式</th>
<th scope="col" class="org-left">可视化模式</th>
<th scope="col" class="org-left">运算符模式</th>
<th scope="col" class="org-left">插入模式</th>
<th scope="col" class="org-left">命令行模式</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">:map</td>
<td class="org-left">y</td>
<td class="org-left">y</td>
<td class="org-left">y</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">:nmap</td>
<td class="org-left">y</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">:vmap</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">y</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">:omap</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">y</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">:map!</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">y</td>
<td class="org-left">y</td>
</tr>

<tr>
<td class="org-left">:imap</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">y</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">:cmap</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">y</td>
</tr>
</tbody>
</table>
</div>
<ol class="org-ol"><li><a id="orgheadline1"></a>查看键盘映射,命令模式下输入<br><div class="outline-text-5" id="text-1-1-1-1">
<div class="org-src-container">

<pre class="src src-vim">:(ivon)map
</pre>
</div>
<p>
使用:map 命令，可以列出所有键盘映射。其中第一列标明了映射在哪种模式下工作：<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">标记</th>
<th scope="col" class="org-left">模式</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">&lt;space&gt;</td>
<td class="org-left">常规模式，可视化模式，运算符模式</td>
</tr>

<tr>
<td class="org-left">n</td>
<td class="org-left">常规模式</td>
</tr>

<tr>
<td class="org-left">v</td>
<td class="org-left">可视化模式</td>
</tr>

<tr>
<td class="org-left">o</td>
<td class="org-left">运算符模式</td>
</tr>

<tr>
<td class="org-left">!</td>
<td class="org-left">插入模式，命令行模式</td>
</tr>

<tr>
<td class="org-left">i</td>
<td class="org-left">插入模式</td>
</tr>

<tr>
<td class="org-left">c</td>
<td class="org-left">命令模式</td>
</tr>
</tbody>
</table>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4"><span class="section-number-3">1.2</span> 命令</h3>
<div class="outline-text-3" id="text-1-2">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">命令</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">:source ~/_vimrc</td>
<td class="org-left">重新加载配置</td>
</tr>

<tr>
<td class="org-left">:e ~/_vimrc</td>
<td class="org-left">打开_vimrc 文件</td>
</tr>

<tr>
<td class="org-left">:version</td>
<td class="org-left">查看 vim 相关信息，包括配置加载路径</td>
</tr>

<tr>
<td class="org-left">C-o</td>
<td class="org-left">临时进入 normal 模式</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Game Dev Tools]]></title>
      <url>http://wolfand11.coding.me/2016/09/27/tools/GameDevTools/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline6" class="outline-2">
<h2 id="orgheadline6"><span class="section-number-2">1</span> Game Dev Tools</h2>
<div class="outline-text-2" id="text-1">
<a id="more"></a>
</div>
<div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> ILSpy</h3>
<div class="outline-text-3" id="text-1-1">
<p>
该工具可以查看 C# DLL 的源代码<br>
<a href="http://ilspy.net/" target="_blank" rel="external">http://ilspy.net/</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2"><span class="section-number-3">1.2</span> IDA Pro</h3>
<div class="outline-text-3" id="text-1-2">
<p>
IDA PRO 简称 IDA（Interactive Disassembler） ，是一个世界顶级的交互式反汇编工具<br>
<a href="https://www.hex-rays.com/products/ida/index.shtml" target="_blank" rel="external">https://www.hex-rays.com/products/ida/index.shtml</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3"><span class="section-number-3">1.3</span> Unity Studio</h3>
<div class="outline-text-3" id="text-1-3">
<p>
该工具可以查看 Unity3D 游戏中所包含的所有资源<br>
<a href="https://github.com/Perfare/UnityStudio" target="_blank" rel="external">https://github.com/Perfare/UnityStudio</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4"><span class="section-number-3">1.4</span> Disunity</h3>
<div class="outline-text-3" id="text-1-4">
<p>
该工具可以导出 Unity3D 游戏中的所有资源<br>
<a href="https://github.com/ata4/disunity" target="_blank" rel="external">https://github.com/ata4/disunity</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5"><span class="section-number-3">1.5</span> Sqlite Tools</h3>
<div class="outline-text-3" id="text-1-5">
<p>
Sqlitestudio <a href="https://sqlitestudio.pl/index.rvt" target="_blank" rel="external">https://sqlitestudio.pl/index.rvt</a><br>
SQLiteExpert 个人免费 <a href="http://www.sqliteexpert.com/" target="_blank" rel="external">http://www.sqliteexpert.com/</a><br>
</p>
</div>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> game </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Programing in CSharp]]></title>
      <url>http://wolfand11.coding.me/2016/09/26/language/CSharp/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline94" class="outline-2">
<h2 id="orgheadline94"><span class="section-number-2">1</span> The C# Language</h2>
<div class="outline-text-2" id="text-1">
<a id="more"></a>
</div>
<div id="outline-container-orgheadline17" class="outline-3">
<h3 id="orgheadline17"><span class="section-number-3">1.1</span> C#语言基础</h3>
<div class="outline-text-3" id="text-1-1">
<p>
C#有两种类型内置类型和用户自定义类型。<br>
C#还可以分为值类型和引用类型。这两种类型的区别为值在内存中的存储方式不同。<br>
值类型在栈分配的内存中保存其实际值（或者作为更大的引用类型对象的一部分分配）。<br>
引用类型变量的地址保存在栈中，但实际对象存在堆中。<br>
C#还支持 C++风格的指针。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 10;
<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">j</span> = 10;
Console.WriteLine (<span style="color: #ffa07a;">"object.ReferenceEquals(i,j) = {0}"</span>, <span style="color: #98fb98;">object</span>.ReferenceEquals (i, j));
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">output: False</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#22312; object.ReferenceEquals(i,j) &#36825;&#19968;&#27493;&#20250;&#23545; i,j &#20998;&#21035;&#36827;&#34892;&#35013;&#31665;&#25805;&#20316;</span>
</pre>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-4">
<h4 id="orgheadline4"><span class="section-number-4">1.1.1</span> 内置类型</h4>
<div class="outline-text-4" id="text-1-1-1">
<p>
C#中内置类型符合.Net CLS 规范。<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-right">

<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">类型</th>
<th scope="col" class="org-right">大小/字节</th>
<th scope="col" class="org-left">.Net 类型</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">byte</td>
<td class="org-right">1</td>
<td class="org-left">Byte</td>
<td class="org-left">无符号（0~255）</td>
</tr>

<tr>
<td class="org-left">char</td>
<td class="org-right">2</td>
<td class="org-left">Char</td>
<td class="org-left">Unicode 字符</td>
</tr>

<tr>
<td class="org-left">bool</td>
<td class="org-right">1</td>
<td class="org-left">Boolean</td>
<td class="org-left">true 或者 false</td>
</tr>

<tr>
<td class="org-left">sbyte</td>
<td class="org-right">1</td>
<td class="org-left">Sbyte</td>
<td class="org-left">有符号（-128~127）</td>
</tr>

<tr>
<td class="org-left">short</td>
<td class="org-right">2</td>
<td class="org-left">Int16</td>
<td class="org-left">有符号 short（-32768~32767）</td>
</tr>

<tr>
<td class="org-left">ushort</td>
<td class="org-right">2</td>
<td class="org-left">Uint16</td>
<td class="org-left">无符号 short（0~65535）</td>
</tr>

<tr>
<td class="org-left">int</td>
<td class="org-right">4</td>
<td class="org-left">Int32</td>
<td class="org-left">有符号 int（-2147483648~2147483647）</td>
</tr>

<tr>
<td class="org-left">uint</td>
<td class="org-right">4</td>
<td class="org-left">Uint32</td>
<td class="org-left">无符号 int（0~4294967295）</td>
</tr>

<tr>
<td class="org-left">float</td>
<td class="org-right">4</td>
<td class="org-left">Single</td>
<td class="org-left">浮点数</td>
</tr>

<tr>
<td class="org-left">double</td>
<td class="org-right">8</td>
<td class="org-left">Double</td>
<td class="org-left">双精度浮点数</td>
</tr>

<tr>
<td class="org-left">decimal</td>
<td class="org-right">12</td>
<td class="org-left">Decimal</td>
<td class="org-left">固定精度</td>
</tr>

<tr>
<td class="org-left">long</td>
<td class="org-right">8</td>
<td class="org-left">Int64</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">ulong</td>
<td class="org-right">8</td>
<td class="org-left">Uint64</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
<ol class="org-ol"><li><a id="orgheadline1"></a>指针类型<br><div class="outline-text-5" id="text-1-1-1-1">
<p>
为了保持类型安全，默认情况下，C# 不支持指针运算。不过，通过使用 unsafe 关键字，可以定义可使用指针的不安全上下文。<br>
在公共语言运行时 (CLR) 中，不安全代码是指无法验证的代码。C# 中的不安全代码不一定是危险的；只是其安全性无法由 CLR 进行验证的代码。 因此，CLR 只对在完全受信任的程序集中的不安全代码执行操作。 如果使用不安全代码，由您负责确保您的代码不会引起安全风险或指针错误。<br>
我们在运行 unsafe 代码是要在项目属性-生成选项里配置下"允许运行不安全代码"。<br>
参考资料: <a href="http://www.cnblogs.com/ydchw/p/3734453.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://www.cnblogs.com/ydchw/p/3734453.html?utm_source=tuicool&amp;utm_medium=referral</a><br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">//</span><span style="color: #ff0000;">Tips:</span>
<span style="color: #ff0000;">//</span><span style="color: #ff0000;">&#22312; csproj &#25991;&#20214;&#20013; PropertyGroup &#23383;&#27573;&#19979;&#28155;&#21152;&lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt;</span>

<span style="color: #00ffff;">using</span> <span style="color: #7fffd4;">System</span>;
<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">Point</span>
{
    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>, <span style="color: #eedd82;">y</span>; 
}

<span style="color: #00ffff;">class</span> <span style="color: #98fb98;">MainClass</span>
{
    <span style="color: #00ffff;">unsafe</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Main</span>() 
    {
        <span style="color: #98fb98;">Point</span> <span style="color: #eedd82;">pt</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Point</span>();
        Point* pp = &amp;pt;
        pp-&gt;x = 123;
        pp-&gt;y = 456;
        Console.WriteLine ( <span style="color: #ffa07a;">"{0} {1}"</span>, pt.<span style="color: #98fb98;">x</span>, pt.<span style="color: #98fb98;">y</span> );
    }
    <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Test</span>()
    {
        <span style="color: #00ffff;">unsafe</span> {
            <span style="color: #98fb98;">UnsafePoint</span> <span style="color: #eedd82;">pt</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">UnsafePoint</span> ();
            UnsafePoint* pp = &amp;pt;
            pp-&gt;x = 123;
            pp-&gt;y = 456;
            Console.WriteLine (<span style="color: #ffa07a;">"{0} {1}"</span>, pt.<span style="color: #98fb98;">x</span>, pt.<span style="color: #98fb98;">y</span>);
        }
    }
}
</pre>
</div>
</div></li>
<li><a id="orgheadline2"></a>可以为 null 的值类型<br><div class="outline-text-5" id="text-1-1-1-2">
<p>
普通的值类型不能有 null 值。 但是，可以通过在类型后面附加 ? 来创建可以为 null 值的类型。<br>
</p>
</div></li>
<li><a id="orgheadline3"></a>判断是否为 NaN 和 Infinity<br><div class="outline-text-5" id="text-1-1-1-3">
<p>
在 C#的浮点数计算中，0 除以 0 将得到 NaN，正数除以 0 将得到 PositiveInfinity,负数除以 0 将得到 NegativeInfinity。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">if</span> (<span style="color: #98fb98;">float</span>.IsInfinity(1.0f/0))
{
    Debug.Log(<span style="color: #ffa07a;">"1.0f/0 is infinity"</span>);
}
<span style="color: #00ffff;">if</span> (<span style="color: #98fb98;">float</span>.IsNaN(0.0f/0))
{
    Debug.Log(<span style="color: #ffa07a;">"0.0f/0 is NaN"</span>);
}
</pre>
</div>
</div></li></ol>
</div>

<div id="outline-container-orgheadline5" class="outline-4">
<h4 id="orgheadline5"><span class="section-number-4">1.1.2</span> 变量初始化 赋值</h4>
<div class="outline-text-4" id="text-1-1-2">
<p>
C#要求变量在使用前必须初始化或者赋值。<br>
const 为编译期常量 ，readonly 为运行时常量<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline10" class="outline-4">
<h4 id="orgheadline10"><span class="section-number-4">1.1.3</span> 枚举类型</h4>
<div class="outline-text-4" id="text-1-1-3">
<p>
每个枚举类型都有底层类型，可以是任意整数类型（integer，short，long），但 char 除外。默认情况下枚举类型的底层类型为 int。<br>
[性质][修饰符] enum 标识符 [:基础类型]<br>
{枚举列表};<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline6"></a>枚举遍历<br><div class="outline-text-5" id="text-1-1-3-1">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">enum</span> <span style="color: #98fb98;">SomeValues</span>
{
    <span style="color: #eedd82;">Value_0</span>,
    <span style="color: #eedd82;">Value_1</span>,
    <span style="color: #eedd82;">Value_20</span> = 20,
    <span style="color: #eedd82;">Value_21</span>
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#36941;&#21382;&#26522;&#20030;&#20540;</span>
<span style="color: #00ffff;">foreach</span> (<span style="color: #98fb98;">GViewType</span> <span style="color: #87cefa;">type</span> <span style="color: #00ffff;">in</span> GViewType.GetValues(<span style="color: #00ffff;">typeof</span>(GViewType))) {
    InitView_ (type);
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#38656;&#35201;&#27880;&#24847;&#30340;&#26159; GViewType.GetValues(typeof(GViewType))&#36820;&#22238;&#30340;&#25968;&#32452;&#26159;&#25353;&#29031;&#21517;&#31216;&#23383;&#31526;&#20018;&#25490;&#24207;&#30340;&#65292;&#25152;&#20197;&#35201;&#25353;&#29031;&#26522;&#20030;&#20540;&#36941;&#21382;&#38656;&#35201;&#22914;&#19979;&#25805;&#20316;&#65306;</span>
<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">enums</span> = GViewType.GetValues(<span style="color: #00ffff;">typeof</span>(GViewType));
Array.Sort(enums);
<span style="color: #00ffff;">foreach</span>(<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">eValue</span> <span style="color: #00ffff;">in</span> enums)
{
     <span style="color: #ff0000;">// </span><span style="color: #ff0000;">do something</span>
}
</pre>
</div>
</div></li>
<li><a id="orgheadline7"></a>定义多个范围的枚举<br><div class="outline-text-5" id="text-1-1-3-2">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#23450;&#20041;&#22810;&#20010;&#33539;&#22260;&#20851;&#32852;&#30340;&#26522;&#20030;</span>
<span style="color: #00ffff;">enum</span> <span style="color: #98fb98;">EnumType</span>
{
    <span style="color: #eedd82;">kFirstEnumStart</span> = 100,
    <span style="color: #eedd82;">kFirstEnumEnd</span>   = 200,
    <span style="color: #eedd82;">kSecondEnumStart</span> = 201,
    <span style="color: #eedd82;">kSecondEnumEnd</span>   = 300
}
<span style="color: #00ffff;">enum</span> <span style="color: #98fb98;">FirstEnum</span>
{
    <span style="color: #eedd82;">kFirstEnumStart</span>,
    <span style="color: #eedd82;">kFirstEnumOne</span>,
    <span style="color: #eedd82;">kFirstEnumTwo</span>,
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">...</span>
    <span style="color: #eedd82;">kFirstEnumEnd</span>,
}
<span style="color: #00ffff;">enum</span> <span style="color: #98fb98;">SecondEnum</span>
{
    <span style="color: #eedd82;">kSecondEnumStart</span>,
    <span style="color: #eedd82;">kSecondEnumOne</span>,
    <span style="color: #eedd82;">kSecondEnumTwo</span>,
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">...</span>
    <span style="color: #eedd82;">kSecondEnumEnd</span>,
}
</pre>
</div>
</div></li>
<li><a id="orgheadline8"></a>通过 Enum 的名称字符串判断 Enum 是否定义<br><div class="outline-text-5" id="text-1-1-3-3">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">string</span> <span style="color: #eedd82;">netEventIDStr</span> = <span style="color: #ffa07a;">"Cmd_"</span> + methodInfo.Name.Replace(_netEventPrefix, <span style="color: #ffa07a;">""</span>);
<span style="color: #00ffff;">if</span>( Enum.IsDefined(<span style="color: #00ffff;">typeof</span>(NETWORK.Command), netEventIDStr) )
{
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">do something</span>
}
</pre>
</div>
</div></li>
<li><a id="orgheadline9"></a>string int Enum 互转<br><div class="outline-text-5" id="text-1-1-3-4">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">enum</span> <span style="color: #98fb98;">Colors</span> { <span style="color: #eedd82;">Red</span>, <span style="color: #eedd82;">Green</span>, <span style="color: #eedd82;">Blue</span>, <span style="color: #eedd82;">Yellow</span> };

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">1 Enum--&gt;String </span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#36820;&#22238; "Green"</span>
<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">greenName</span> = Colors.Green.ToString(); 
<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">greenName</span> = Enum.GetName(<span style="color: #00ffff;">typeof</span>(Colors), Colors.Blue);
<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">colorsNames</span> = Enum.GetNames(<span style="color: #00ffff;">typeof</span>(Colors));

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">2 String--&gt;Enum</span>
<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">redEnum</span> = (Colors)Enum.Parse(<span style="color: #00ffff;">typeof</span>(Colors), <span style="color: #ffa07a;">"Red"</span>);

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">3 Enum--&gt;int</span>
(<span style="color: #98fb98;">int</span>)Colors.Red;
(<span style="color: #98fb98;">byte</span>)Colors.Green;

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">4 int--&gt;Enum</span>
<span style="color: #98fb98;">Colors</span> <span style="color: #eedd82;">color</span> = (Colors)2;
<span style="color: #98fb98;">Colors</span> <span style="color: #eedd82;">color</span> = (Colors)Enum.ToObject(<span style="color: #00ffff;">typeof</span>(Colors), 2);
</pre>
</div>

<ul class="org-ul">
<li>参考链接 <a href="http://www.cnblogs.com/tekkaman/p/3973513.html" target="_blank" rel="external">http://www.cnblogs.com/tekkaman/p/3973513.html</a><br></li>
</ul>
</div></li></ol>
</div>
<div id="outline-container-orgheadline14" class="outline-4">
<h4 id="orgheadline14"><span class="section-number-4">1.1.4</span> 运算符</h4>
<div class="outline-text-4" id="text-1-1-4">
</div><ol class="org-ol"><li><a id="orgheadline11"></a>&amp;符号<br><div class="outline-text-5" id="text-1-1-4-1">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">1 &#20301;&#19982;&#25805;&#20316;&#31526;</span>
Console.WriteLine (<span style="color: #ffa07a;">"x&amp;y = {0}"</span>, 15 &amp; 3);
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">2 &#21462;&#24341;&#29992;&#25805;&#20316;&#31526;</span>
<span style="color: #00ffff;">unsafe</span> {
        <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 10;
    <span style="color: #98fb98;">int</span>* j = &amp;i;
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">3 &amp;&amp; &#36923;&#36753;&#36816;&#31639;&#31526; &#19988;</span>
<span style="color: #00ffff;">if</span> (a&gt;b &amp;&amp; a&lt;c)
{
}
</pre>
</div>
</div></li>
<li><a id="orgheadline12"></a>?符号<br><div class="outline-text-5" id="text-1-1-4-2">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">1 &#20462;&#39280;&#22522;&#30784;&#31867;&#22411;&#20351;&#20854;&#21487;&#20026; null</span>
<span style="color: #98fb98;">int</span>? i = <span style="color: #7fffd4;">null</span>;
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">2 &#19977;&#20803;&#36816;&#31639;&#31526; &#26465;&#20214;&#34920;&#36798;&#24335; &#65311; &#34920;&#36798;&#24335; 1 : &#34920;&#36798;&#24335; 2</span>
<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">a</span> = 3&gt;4 ? 3 : 4; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">a=4;</span>
</pre>
</div>
</div></li>
<li><a id="orgheadline13"></a>??<br><div class="outline-text-5" id="text-1-1-4-3">
<p>
如果 ?? 运算符的左操作数非空，该运算符将返回左操作数，否则返回右操作数。<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline15" class="outline-4">
<h4 id="orgheadline15"><span class="section-number-4">1.1.5</span> 条件分支语句</h4>
<div class="outline-text-4" id="text-1-1-5">
<p>
C/C++中条件语句中可以使用任意表达式，C#要求所有条件表达式都必须为布尔值.这是为了避免 if(a=10) 这样的错误的！<br>
</p>

<p>
switch 语句可以对字符串进行跳转。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">switch</span>(name)
 {
     <span style="color: #00ffff;">case</span> <span style="color: #ffa07a;">"Mr.A"</span>:
         DoSomething();
         <span style="color: #00ffff;">break</span>;
     <span style="color: #00ffff;">case</span> <span style="color: #ffa07a;">"Mr.B"</span>:
         DoOtherthing();
         <span style="color: #00ffff;">break</span>;
     <span style="color: #00ffff;">default</span>:
         <span style="color: #00ffff;">break</span>;
 }
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline16" class="outline-4">
<h4 id="orgheadline16"><span class="section-number-4">1.1.6</span> 预处理指令</h4>
<div class="outline-text-4" id="text-1-1-6">
<p>
C#预处理器只实现了 C++预处理器的一个子集，不支持宏。<br>
#region [comment context]- #endregion 使用注释来标记一段代码.<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #b0c4de;">#region</span> <span style="color: #ff0000;">test region</span>
<span style="color: #ff0000;">//</span><span style="color: #ff0000;">test region</span>
<span style="color: #ff0000;">//</span><span style="color: #ff0000;">a define is here</span>
<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">a</span> = 10;
<span style="color: #b0c4de;">#endregion</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline38" class="outline-3">
<h3 id="orgheadline38"><span class="section-number-3">1.2</span> 类与对象</h3>
<div class="outline-text-3" id="text-1-2">
</div><div id="outline-container-orgheadline20" class="outline-4">
<h4 id="orgheadline20"><span class="section-number-4">1.2.1</span> 定义类</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
[attribue 性质][修饰符]class 标识符[:基类]<br>
{类主体}<br>
C#类定义后不需要分号,加分号也不会报错。<br>
</p>
</div>

<ol class="org-ol"><li><a id="orgheadline19"></a>访问修饰符<br><div class="outline-text-5" id="text-1-2-1-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">访问修饰符</th>
<th scope="col" class="org-left">限制</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">public</td>
<td class="org-left">无限制。标记为 public 成员，任何类的任何方法都可以访问</td>
</tr>

<tr>
<td class="org-left">private</td>
<td class="org-left">标记为 private 的类 A 的成员，只有类 A 的方法可以访问</td>
</tr>

<tr>
<td class="org-left">protected</td>
<td class="org-left">标记为 protected 的类 A 的成员，类 A 和从类 A 派生的类的方法可以访问</td>
</tr>

<tr>
<td class="org-left">internal</td>
<td class="org-left">标记为 internal 的类 A 的成员，A 所处的程序集中的任何类的方法都可以访问</td>
</tr>

<tr>
<td class="org-left">protected internal</td>
<td class="org-left">protected 或 internal 的意思。（没有 protected 且 internal 的概念）</td>
</tr>
</tbody>
</table>
</div>
<ol class="org-ol"><li><a id="orgheadline18"></a>protected internal<br><div class="outline-text-6" id="text-1-2-1-1-1">
<p>
protected internal 表示 类和子类可以访问，该成员所在程序集内的任何类也可以访问。protected internal 范围大于等于 internal，也大于等于 protected。<br>
<a href="http://www.cnblogs.com/adodo1/p/4327581.html" target="_blank" rel="external">http://www.cnblogs.com/adodo1/p/4327581.html</a><br>
</p>
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline25" class="outline-4">
<h4 id="orgheadline25"><span class="section-number-4">1.2.2</span> 创建对象</h4>
<div class="outline-text-4" id="text-1-2-2">
<p>
对象是引用类型，创建于堆中，需要使用关键字 new。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline21"></a>构造方法<br><div class="outline-text-5" id="text-1-2-2-1">
<p>
未定义构造函数时，编译器会提供一个默认构造函数。<br>
未显式初始化的成员变量会按照下表的值初始化。<br>
用户实现任何构造函数后，编译器将不会提供默认构造函数。<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">类型</th>
<th scope="col" class="org-left">默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">numeric(int long 等)</td>
<td class="org-left">0</td>
</tr>

<tr>
<td class="org-left">bool</td>
<td class="org-left">false</td>
</tr>

<tr>
<td class="org-left">char</td>
<td class="org-left">\0</td>
</tr>

<tr>
<td class="org-left">enum</td>
<td class="org-left">0</td>
</tr>

<tr>
<td class="org-left">reference</td>
<td class="org-left">null</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline22"></a>初始化语句<br><div class="outline-text-5" id="text-1-2-2-2">
<p>
可以在初始化语句中初始化成员变量的值，而不需要都在构造函数中进行。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Person</span> 
{
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#19979;&#38754;&#30340;&#21021;&#22987;&#21270;&#35821;&#21477;&#20013;&#21021;&#22987;&#21270;&#20102;&#25104;&#21592;&#21464;&#37327;&#30340;&#20540;&#20026; "Unknown"</span>
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span> = <span style="color: #ffa07a;">"Unknown"</span>;
    <span style="color: #00ffff;">public</span> Person(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span>)
    {
      <span style="color: #00ffff;">this</span>.name = name;
    }
}

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#19979;&#38754;&#30340;&#20195;&#30721;&#32534;&#35793;&#20250;&#20986;&#38169;&#65292;&#25552;&#31034;&#26500;&#36896;&#20989;&#25968;&#27809;&#26377;&#25552;&#20379; string &#31867;&#22411;&#30340;&#21442;&#25968;</span>
<span style="color: #eedd82;">Person</span> p = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Person</span>();
</pre>
</div>
</div></li>
<li><a id="orgheadline23"></a>ICloneable 接口<br><div class="outline-text-5" id="text-1-2-2-3">
<p>
C#中没有复制构造函数。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Person</span>: <span style="color: #98fb98;">ICloneable</span>
{
        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span> = <span style="color: #ffa07a;">"Unknown"</span>;
        <span style="color: #00ffff;">public</span> Person(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span>)
        {
        <span style="color: #00ffff;">this</span>.name = name;
    }
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#27880;&#24847;&#35813;&#20989;&#25968;&#30340;&#36820;&#22238;&#31867;&#22411;&#20026; Object</span>
    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Object</span> <span style="color: #87cefa;">Clone</span>()
        {
        <span style="color: #98fb98;">Person</span> <span style="color: #eedd82;">newObj</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Person</span> (name);
                <span style="color: #00ffff;">return</span> newObj;
    }
}
</pre>
</div>
</div></li>
<li><a id="orgheadline24"></a>对象构造顺序<br><div class="outline-text-5" id="text-1-2-2-4">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Temp</span>
{
    <span style="color: #00ffff;">public</span> Temp(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">arg</span>)
    {
        Console.WriteLine(<span style="color: #ffa07a;">"Temp "</span> + arg);
    }
}
<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">TestA</span>
{
    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Temp</span> <span style="color: #eedd82;">tempA</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Temp</span>(<span style="color: #ffa07a;">"A"</span>);
    <span style="color: #00ffff;">public</span> TestA()
    {
        Console.WriteLine(<span style="color: #ffa07a;">"TestA"</span>);
        Print();
    }
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Print</span>()
    {
        Console.WriteLine(<span style="color: #ffa07a;">"TestA.Print"</span>);
    }
};

<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">TestB</span> : <span style="color: #98fb98;">TestA</span>
{
    <span style="color: #98fb98;">Temp</span> <span style="color: #eedd82;">tempB</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Temp</span>(<span style="color: #ffa07a;">"B"</span>);
    <span style="color: #00ffff;">public</span> TestB()
    {
        Console.WriteLine(<span style="color: #ffa07a;">"TestB"</span>);
    }
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">override</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Print</span>()
    {
        Console.WriteLine(<span style="color: #ffa07a;">"TestB.Print"</span>);
    }
};
<span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Program</span>
{
    <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Main</span>(<span style="color: #98fb98;">string</span>[] <span style="color: #eedd82;">args</span>)
    {
        <span style="color: #98fb98;">TestB</span> <span style="color: #eedd82;">b</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">TestB</span>();
    }
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Output:</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Temp B</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Temp A</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">TestA</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">TestB.Print</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">TestB</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#31867;&#33258;&#24049;&#30340;&#21021;&#22987;&#21270;&#35821;&#21477;&#20808;&#25191;&#34892; &#28982;&#21518;&#25191;&#34892;&#29238;&#31867;&#21021;&#22987;&#21270;&#35821;&#21477; &#28982;&#21518;&#25191;&#34892;&#29238;&#31867;&#26500;&#36896;&#20989;&#25968;&#65288;&#29238;&#31867;&#26500;&#36896;&#20989;&#25968;&#20013;&#22810;&#24577;&#24050;&#32463;&#21487;&#29992;&#65289; &#28982;&#21518;&#25191;&#34892;&#23376;&#31867;&#26500;&#36896;&#20989;&#25968;</span>
</pre>
</div>
</div></li></ol>
</div>
<div id="outline-container-orgheadline28" class="outline-4">
<h4 id="orgheadline28"><span class="section-number-4">1.2.3</span> 使用静态成员</h4>
<div class="outline-text-4" id="text-1-2-3">
</div><ol class="org-ol"><li><a id="orgheadline26"></a>静态成员<br><div class="outline-text-5" id="text-1-2-3-1">
<p>
C#中不可以通过对象来访问类的静态成员方法和变量。但是在类内可以直接访问静态成员方法和变量。<br>
CLR 保证在类的其他操作之前运行静态构造方法。静态构造方法通常用于初始化语句无法完成或者仅需一次的设置工作。<br>
</p>
</div></li>
<li><a id="orgheadline27"></a>静态类<br><div class="outline-text-5" id="text-1-2-3-2">
<p>
C#中没有全局方法或全局变量、常量。可以创建静态类来封装全局方法和全局变量、常量。<br>
静态类无法实例化，静态类不能被派生，静态类不可含非静态成员。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">AppConstant</span>
{
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">MaxPlayer</span> = 3;
}
AppConstant.<span style="color: #eedd82;">MaxPlayer</span> = 4;
Console.WriteLine(AppConstant.MaxPlayer);
</pre>
</div>
</div></li></ol>
</div>
<div id="outline-container-orgheadline32" class="outline-4">
<h4 id="orgheadline32"><span class="section-number-4">1.2.4</span> 销毁对象</h4>
<div class="outline-text-4" id="text-1-2-4">
<p>
C#提供了垃圾回收器，因此不需要显式地销毁对象。但如果对象要控制非托管的资源，用完后显式地释放还是需要的。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline29"></a>析构函数<br><div class="outline-text-6" id="text-1-2-4-0-1">
<p>
对非托管资源的隐式控制是通过析构方法来提供的，它会在对象销毁时有垃圾回收器调用。<br>
</p>
<div class="org-src-container">

<pre class="src src-c#">~MyClass(){}
// 上面的代码会被编译器翻译为
protected override void Finalize()
{
	try
  {}
  finally
  {
		base.Finalize();
  }
}
</pre>
</div>
</div></li>
<li><a id="orgheadline30"></a>Dispose 方法<br><div class="outline-text-6" id="text-1-2-4-0-2">
<p>
显式调用析构方法是不合法的。如果需要处理昂贵的非托管资源，需要尽快关闭和清除他们，应该实现 IDisposable 接口。<br>
IDisosable 接口要求实现者定义一个名为 Dispose()的方法，清除我们认为重要的一切。<br>
如果提供了 Dispose()方法，应该停止垃圾回收器调用对象的析构方法，这样保证只进行一次资源释放。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">TestDispose</span>:<span style="color: #98fb98;">IDisposable</span>
{
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">RunTestDispose</span> (<span style="color: #98fb98;">bool</span> <span style="color: #eedd82;">isRun</span>)
    {
        <span style="color: #00ffff;">if</span> (!isRun)
            <span style="color: #00ffff;">return</span>;

        <span style="color: #98fb98;">TestDispose</span> <span style="color: #eedd82;">temp</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">TestDispose</span> ();
        temp.Dispose ();
    }

    <span style="color: #98fb98;">bool</span> <span style="color: #eedd82;">is_disposed</span> = <span style="color: #7fffd4;">false</span>;
    <span style="color: #00ffff;">public</span> TestDispose ()
    {
    }
    <span style="color: #00ffff;">protected</span> <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Dispose</span>(<span style="color: #98fb98;">bool</span> <span style="color: #eedd82;">disposing</span>)
    {
        <span style="color: #00ffff;">if</span>(!is_disposed)
        {
            <span style="color: #00ffff;">if</span>(disposing)
            {
                Console.WriteLine(<span style="color: #ffa07a;">"Not in destructor,Ok to reference other objects"</span>);
            }
            Console.WriteLine(<span style="color: #ffa07a;">"Disposing ... "</span>);
        }
        is_disposed = <span style="color: #7fffd4;">true</span>;
    }
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#27492;&#20026; IDisposable &#23450;&#20041;&#30340;&#26041;&#27861;</span>
    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Dispose</span>()
    {
        Dispose(<span style="color: #7fffd4;">true</span>);
        GC.SuppressFinalize(<span style="color: #00ffff;">this</span>);
    }
    ~TestDispose()
    {
        Dispose(<span style="color: #7fffd4;">false</span>);
        Console.WriteLine(<span style="color: #ffa07a;">"In destructor"</span>);
    }
}
</pre>
</div>
</div></li>
<li><a id="orgheadline31"></a>using 语句<br><div class="outline-text-6" id="text-1-2-4-0-3">
<p>
using 语句用于保证 Dispose 会尽可能最早的时刻调用。<br>
</p>
<div class="org-src-container">

<pre class="src src-c#">//方法 1
using (Font theFont = new Font("Arial",10.0f))
{
	// 使用 theFont
	// 编译器会调用 theFont 的 Dispose
}
//方法 2
Font anotherFont = new Font("Arial",10.0f);
using (anotherFont)
{
	// 使用 anotherFont
  // 编译器会调用 anotherFont 的 Dispose
}
</pre>
</div>
<p>
方法 2 存在风险。<br>
首先：如果在创建对象后，进入 using 语句之前发生异常，对象将不会被清除。<br>
其次：变量在 using 语句块结束后仍然在作用域中，但是其资源已经释放了，所以再次使用它时可能会有错误。<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline36" class="outline-4">
<h4 id="orgheadline36"><span class="section-number-4">1.2.5</span> 参数传递</h4>
<div class="outline-text-4" id="text-1-2-5">
</div><ol class="org-ol"><li><a id="orgheadline33"></a>默认情况下值类型是按值传递给方法的。<br><div class="outline-text-5" id="text-1-2-5-1">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">arg</span> = 10;
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">ChangeArgTo20</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">arg</span>)
{
    arg = 20;
}
ChangeArgTo20(arg);
Console.WriteLine(<span style="color: #ffa07a;">"arg = "</span> + arg);
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">arg = 10</span>
</pre>
</div>
</div></li>
<li><a id="orgheadline34"></a>通过 ref 可以实现按照引用传递值类型的参数。<br><div class="outline-text-5" id="text-1-2-5-2">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">arg</span> = 10;
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">ChangeArgTo20</span>(<span style="color: #00ffff;">ref</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">arg</span>)
{
    arg = 20;
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#27880;&#24847;&#65306; &#20256;&#36882;&#21442;&#25968;&#24517;&#39035;&#26631;&#35782; ref&#65292;&#21542;&#21017;&#20250;&#25253;&#38169;</span>
ChangeArgTo20(<span style="color: #00ffff;">ref</span> <span style="color: #98fb98;">arg</span>);
Console.WriteLine(<span style="color: #ffa07a;">"arg = "</span> + arg);
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">arg = 20</span>
</pre>
</div>
</div></li>
<li><a id="orgheadline35"></a>通过 out 可以克服明确赋值问题。<br><div class="outline-text-5" id="text-1-2-5-3">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">arg</span>;
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">ChangeArgTo20</span>(<span style="color: #00ffff;">out</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">arg</span>)
{
    arg = 20;
}
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#27880;&#24847;&#65306; &#20256;&#36882;&#21442;&#25968;&#24517;&#39035;&#26631;&#35782; out&#65292;&#21542;&#21017;&#20250;&#25253;&#38169;</span>
ChangeArgTo20(<span style="color: #00ffff;">out</span> <span style="color: #98fb98;">arg</span>);
Console.WriteLine(<span style="color: #ffa07a;">"arg = "</span> + arg);

<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">arg1</span>;
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">ChangeArgAdd10</span>(<span style="color: #00ffff;">out</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">arg1</span>)
{
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#27880;&#24847;&#65306;&#19979;&#38754;&#30340;&#20195;&#30721;&#24517;&#39035;&#26377;&#65292;&#21542;&#21017;&#32534;&#35793;&#25253;&#38169;&#65292;&#25552;&#31034; out &#31867;&#22411;&#21442;&#25968;&#24517;&#39035;&#22312;&#20989;&#25968;&#20869;&#36171;&#20540;</span>
        arg1 = 10;
        arg1 += 10;
}
</pre>
</div>
</div></li></ol>
</div>
<div id="outline-container-orgheadline37" class="outline-4">
<h4 id="orgheadline37"><span class="section-number-4">1.2.6</span> 通过属性封装数据</h4>
<div class="outline-text-4" id="text-1-2-6">
<p>
通过属性，客户代码可以访问类的状态，就像直接访问成员字段一样，而实际上这是通过类方法访问才实现的。<br>
通过 public private protected internal 实现属性访问控制<br>
使用属性要小心，属性本身实际上是成员方法，在初始化所有成员变量之前不能调用成员方法。<br>
只定义 set 时，属性只可写不可读。只定义 get 时，属性只可读不可写。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Person</span>{
    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span>;
    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">Name</span>
    {
        <span style="color: #00ffff;">get</span> 
        {
            <span style="color: #00ffff;">return</span> name;
        }
        <span style="color: #00ffff;">set</span> 
        {
            name = value;
        }
    }
    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">age</span>;
    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">Age</span>
    {
        <span style="color: #00ffff;">protected</span> <span style="color: #00ffff;">get</span>
        {
            <span style="color: #00ffff;">return</span> age;
        }
        <span style="color: #00ffff;">set</span>
        {
            age = value;
        }
    }
    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">tel</span>;
    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">Tel</span>
    {
        <span style="color: #00ffff;">set</span>{ tel = value; }
    }
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline46" class="outline-3">
<h3 id="orgheadline46"><span class="section-number-3">1.3</span> 继承和多态</h3>
<div class="outline-text-3" id="text-1-3">
</div><div id="outline-container-orgheadline40" class="outline-4">
<h4 id="orgheadline40"><span class="section-number-4">1.3.1</span> 多态</h4>
<div class="outline-text-4" id="text-1-3-1">
<p>
必须显式用关键词 override 标记重新定义了虚方法的方法声明。否则通过基类多态调用该方法时不会调用子类的方法。此时编译器会有警告。<br>
函数前加 new 关键词，可以取消上述编译器的警告，注意此时多态调用依然只会调用基类的方法。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline39"></a>调用基类构造方法<br><div class="outline-text-5" id="text-1-3-1-1">
<p>
可以通过 base 来调用基类构造方法<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Button</span>: <span style="color: #98fb98;">Control</span>
{
    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">id</span> = 0;
    <span style="color: #00ffff;">public</span> Button(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">id</span>)
    {
        <span style="color: #00ffff;">this</span>.id = id;
    }
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">override</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">DrawWindow</span>()
    {
        Console.WriteLine(<span style="color: #ffa07a;">"Button DrawWindow"</span>);
    }
}

<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">LabelButton</span>:<span style="color: #98fb98;">Button</span>
{
    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">label</span>;
    <span style="color: #00ffff;">public</span> LabelButton(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">id</span>,<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">label</span>)
        :<span style="color: #00ffff;">base</span>(id)
    {
        <span style="color: #00ffff;">this</span>.label = label;
    }
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">override</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">DrawWindow</span>()
    {
        Console.WriteLine(<span style="color: #ffa07a;">"LabelButton DrawWindow"</span>);
    }
}
</pre>
</div>
</div></li></ol>
</div>
<div id="outline-container-orgheadline41" class="outline-4">
<h4 id="orgheadline41"><span class="section-number-4">1.3.2</span> 抽象类</h4>
<div class="outline-text-4" id="text-1-3-2">
<p>
将方法指定为抽象方法可以强制子类实现基类的该抽象方法。<br>
抽象方法没有实现。<br>
使类的一个或多个方法为抽象方法，会使类变为抽象类，而且必须在类定义前加 abatract 修饰符。<br>
抽象类无法实例化。<br>
抽象类代表了一种抽象的理念，要为所有派生类创建一个“合同（contract）”。也就是说，抽象类描述了要实现该抽象的所有类的公共方法。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#31867;&#20869;&#37096;&#26377;&#25277;&#35937;&#26041;&#27861;&#26102;&#65292;&#24517;&#39035;&#23558;&#31867;&#22768;&#26126;&#20026;&#25277;&#35937;&#31867;</span>
<span style="color: #ff0000;">//</span><span style="color: #ff0000;">public class Control</span>
<span style="color: #00ffff;">abstract</span> <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Control</span>
{
    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">id</span> = 0;

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">Id</span> {   
        <span style="color: #00ffff;">get</span> { 
            <span style="color: #00ffff;">return</span> id;            
        }
        <span style="color: #00ffff;">set</span> {
            id = value;
        }
    }

    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#21487;&#20197;&#23558;&#20989;&#25968;&#25351;&#23450;&#20026; virtual &#25552;&#20379;&#40664;&#35748;&#23454;&#29616;</span>
    <span style="color: #ff0000;">//        </span><span style="color: #ff0000;">public virtual void DrawWindow ()</span>
    <span style="color: #ff0000;">//        </span><span style="color: #ff0000;">{</span>
    <span style="color: #ff0000;">//        </span><span style="color: #ff0000;">}</span>

    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">error &#25277;&#35937;&#26041;&#27861;&#19981;&#33021;&#26377;&#23454;&#29616;</span>
    <span style="color: #ff0000;">//        </span><span style="color: #ff0000;">abstract public void DrawWindow ()</span>
    <span style="color: #ff0000;">//        </span><span style="color: #ff0000;">{</span>
    <span style="color: #ff0000;">//        </span><span style="color: #ff0000;">}</span>

    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#21487;&#20197;&#23558;&#20989;&#25968;&#25351;&#23450;&#20026; abstract &#22914;&#26524;&#23376;&#31867;&#27809;&#26377;&#23454;&#29616; abstract &#26041;&#27861;&#21017;&#23376;&#31867;&#20063;&#38656;&#35201;&#26631;&#35760;&#20026;&#25277;&#35937;&#31867;</span>
    <span style="color: #00ffff;">abstract</span> <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">DrawWindow</span> ();
}

<span style="color: #00ffff;">abstract</span> <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ConrolX</span> : <span style="color: #98fb98;">Control</span>
{
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#19981;&#38656;&#35201;&#37325;&#26032;&#22768;&#26126;&#25277;&#35937;&#26041;&#27861;&#65292;&#21542;&#21017;&#20250;&#38544;&#34255; Control &#20013;&#30340;&#22768;&#26126;</span>
    <span style="color: #ff0000;">//</span><span style="color: #ff0000;">abstract public void DrawWindow ();</span>
}

<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Button</span>: <span style="color: #98fb98;">Control</span>
{
    <span style="color: #00ffff;">public</span> Button (<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">id</span>)
    {
        <span style="color: #00ffff;">this</span>.Id = id;
    }

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">override</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">DrawWindow</span> ()
    {
        Console.WriteLine (<span style="color: #ffa07a;">"Button DrawWindow"</span>);
    }
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline42" class="outline-4">
<h4 id="orgheadline42"><span class="section-number-4">1.3.3</span> 密封类</h4>
<div class="outline-text-4" id="text-1-3-3">
<p>
抽象类是用来派生的，与抽象相对的设计概念是密封。sealed 置于类声明之前用来阻止派生。<br>
struct 是隐式密封的，因此在定义 struct 的时候不用使用 sealed 和 abstract 关键字<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">sealed</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">SealedClass</span>
{
    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;
    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">y</span>;
}
<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">MyDerivedC</span>: <span style="color: #98fb98;">SealedClass</span> {} <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Error</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline43" class="outline-4">
<h4 id="orgheadline43"><span class="section-number-4">1.3.4</span> 万类之根：Object</h4>
<div class="outline-text-4" id="text-1-3-4">
<p>
所有 C#类，无论是何类型，都可以看成是从 System.Object 派生而来的。值类型也包括在内。<br>
类不需要声明从 Ojbect 派生，继承是隐含的。<br>
所有的值类型均隐式派生自 System.ValueType。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline44" class="outline-4">
<h4 id="orgheadline44"><span class="section-number-4">1.3.5</span> 类型的装箱和拆箱</h4>
<div class="outline-text-4" id="text-1-3-5">
<p>
装箱和拆箱是使值类型能够被当成引用类型（对象）的处理过程。值被装箱到一个 Object 里然后拆箱回一个值类型。<br>
装箱是一种隐含的转换。<br>
拆箱必须是显式的。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 123;
<span style="color: #98fb98;">Object</span> <span style="color: #eedd82;">obj</span> = i;   <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#35013;&#31665;</span>
<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">j</span> = (<span style="color: #98fb98;">int</span>)obj; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#25286;&#31665;</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline45" class="outline-4">
<h4 id="orgheadline45"><span class="section-number-4">1.3.6</span> 嵌套类</h4>
<div class="outline-text-4" id="text-1-3-6">
<p>
嵌套类的方法可以访问外层类的私有成员。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">OuterClass</span>
{
    <span style="color: #00ffff;">private</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">outer_obj_count</span> = 0;
    <span style="color: #00ffff;">public</span> OuterClass()
    {
        outer_obj_count++;
    }
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">NestedClass</span>
    {
        <span style="color: #00ffff;">private</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">nested_obj_count</span> = 0;
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">PrintOuterObjCount</span>()
        {
            Console.WriteLine(<span style="color: #98fb98;">outer_obj_count</span>);
        }
        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">PrintNestedObjCount</span>()
        {
            Console.WriteLine(<span style="color: #98fb98;">nested_obj_count</span>);
        }
    }
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline47" class="outline-3">
<h3 id="orgheadline47"><span class="section-number-3">1.4</span> 操作符重载</h3>
<div class="outline-text-3" id="text-1-4">
<p>
c#中，操作符都是一些静态方法，其返回值表示操作结果，其参数是操作数。<br>
C#要求必须成对重载操作符。例如 <code>=与!</code> &lt;与&gt; &lt;=与&gt;=<br>
转换操作符重载中，implicit 关键字用于转换肯定成功，不会丢失信息的时候；否则就用关键字 explicit。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#35814;&#32454;&#20195;&#30721;&#35831;&#30475; Fraction.cs &#25991;&#20214;</span>
<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Fraction</span>
{
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#30465;&#30053;&#37096;&#20998;&#20195;&#30721; ......</span>
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">implicit</span> <span style="color: #00ffff;">operator</span> <span style="color: #98fb98;">Fraction</span> (<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">theInt</span>)
    {
        <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Fraction</span> (<span style="color: #98fb98;">theInt</span>);
    }

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #00ffff;">explicit</span> <span style="color: #00ffff;">operator</span> <span style="color: #98fb98;">int</span> (<span style="color: #98fb98;">Fraction</span> <span style="color: #eedd82;">fraction</span>)
    {
        <span style="color: #00ffff;">return</span> fraction.numerator / fraction.denominator;
    }

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">bool</span> <span style="color: #00ffff;">operator</span>== (<span style="color: #98fb98;">Fraction</span> <span style="color: #eedd82;">lhs</span>, <span style="color: #98fb98;">Fraction</span> <span style="color: #eedd82;">rhs</span>)
    {
        <span style="color: #00ffff;">if</span> (lhs.denominator == rhs.denominator &amp;&amp;
            lhs.numerator == rhs.numerator) {
            <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">true</span>;
        }
        <span style="color: #00ffff;">return</span> lhs.numerator / lhs.denominator == rhs.numerator / rhs.denominator;
    }

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">bool</span> <span style="color: #00ffff;">operator</span>!= (<span style="color: #98fb98;">Fraction</span> <span style="color: #eedd82;">lhs</span>, <span style="color: #98fb98;">Fraction</span> <span style="color: #eedd82;">rhs</span>)
    {
        <span style="color: #00ffff;">return</span> !(lhs == rhs);
    }
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline50" class="outline-3">
<h3 id="orgheadline50"><span class="section-number-3">1.5</span> 结构体</h3>
<div class="outline-text-3" id="text-1-5">
<p>
结构体不支持继承和析构函数。结构体是值类型。(所以函数的结构体类型的参数是按值传递的)<br>
结构体数组在内存使用方面效率相对更好。结构体集合的效率就不行了。集合的元素必须是引用类型，所以结构体必须进行装箱处理。<br>
结构体不能通过初始化语句初始化结构体的实例字段。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">Student</span>
{
    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span> = <span style="color: #ffa07a;">"hi"</span>; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">this is error</span>
    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">age</span>;
}
</pre>
</div>
<p>
结构体成员默认的访问权限也为 private。<br>
</p>
</div>
<div id="outline-container-orgheadline48" class="outline-4">
<h4 id="orgheadline48"><span class="section-number-4">1.5.1</span> 定义结构体</h4>
<div class="outline-text-4" id="text-1-5-1">
<p>
[attribue 性质][访问修饰符]struct 标识符[:接口列表]<br>
{结构体成员}<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline49" class="outline-4">
<h4 id="orgheadline49"><span class="section-number-4">1.5.2</span> 创建结构对象</h4>
<div class="outline-text-4" id="text-1-5-2">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#26041;&#27861; 1</span>
<span style="color: #98fb98;">Student</span> <span style="color: #eedd82;">stu1</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Student</span>();
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#26041;&#27861; 2</span>
<span style="color: #98fb98;">Student</span> <span style="color: #eedd82;">stu2</span>;
stu2.name = <span style="color: #ffa07a;">""</span>;
stu2.age = 0;
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#26041;&#27861; 2 &#38656;&#35201;&#25163;&#21160;&#21021;&#22987;&#21270;&#25152;&#26377;&#25104;&#21592;&#30340;&#21021;&#22987;&#20540;&#12290;&#24403;&#32467;&#26500;&#20307;&#20869;&#26377;&#31169;&#26377;&#25104;&#21592;&#21464;&#37327;&#26102;&#65292;&#26041;&#27861; 2 &#23558;&#26080;&#27861;&#20351;&#29992;&#65292;&#22240;&#20026;&#26080;&#27861;&#21021;&#22987;&#21270;&#31169;&#26377;&#25104;&#21592;&#21464;&#37327;&#12290;</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline62" class="outline-3">
<h3 id="orgheadline62"><span class="section-number-3">1.6</span> 接口</h3>
<div class="outline-text-3" id="text-1-6">
<p>
接口是向客户保证类或结构体行为方式的一种协定。定义接口时可以定义实现该接口的类需要实现的方法、属性、索引器和事件。<br>
继承抽象类描述了 is-a 的关系，类实现接口描述了 implement 的关系。<br>
</p>
</div>
<div id="outline-container-orgheadline51" class="outline-4">
<h4 id="orgheadline51"><span class="section-number-4">1.6.1</span> 定义接口</h4>
<div class="outline-text-4" id="text-1-6-1">
<p>
[attribue 性质][访问修饰符]interface 标识符[:基列表]<br>
{接口主体}<br>
interface 后的标识符通常会以 I 开头，不过不是必须的。<br>
基列表列出了此接口扩展的接口。<br>
接口中属性的声明并没有实现 get\set 方法。<br>
接口中的方法声明没有访问修饰符，接口的方法隐含就是 public 的，因为接口是要其他类使用的协定。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">interface</span> <span style="color: #98fb98;">IStorable</span>
{
    <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Read</span> ();

    <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Write</span> (<span style="color: #98fb98;">Object</span> <span style="color: #eedd82;">obj</span>);

    <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">Status</span> {
        <span style="color: #00ffff;">get</span>;
        <span style="color: #00ffff;">set</span>;
    }
}

<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">GDoc</span> : <span style="color: #98fb98;">IStorable</span>
{
    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Read</span> ()
    {
        Console.WriteLine (<span style="color: #ffa07a;">"GDoc read ..."</span>);
    }

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Write</span> (<span style="color: #98fb98;">Object</span> <span style="color: #eedd82;">obj</span>)
    {
        Console.WriteLine (<span style="color: #ffa07a;">"GDoc write ..."</span>);
    }

    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">status</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">Status</span> {
        <span style="color: #00ffff;">get</span>;
        <span style="color: #00ffff;">set</span>;
    }
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline52" class="outline-4">
<h4 id="orgheadline52"><span class="section-number-4">1.6.2</span> 类可以实现多个接口</h4>
<div class="outline-text-4" id="text-1-6-2">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">GDoc</span> : <span style="color: #98fb98;">IStorable</span>, <span style="color: #98fb98;">ICompressible</span>
{ ... }
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline53" class="outline-4">
<h4 id="orgheadline53"><span class="section-number-4">1.6.3</span> 扩展接口</h4>
<div class="outline-text-4" id="text-1-6-3">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">interface</span> <span style="color: #98fb98;">ILoggedCompressible</span> : <span style="color: #98fb98;">ICompressible</span>
{
        <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">LogSavedBytes</span>();
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline54" class="outline-4">
<h4 id="orgheadline54"><span class="section-number-4">1.6.4</span> 组合接口</h4>
<div class="outline-text-4" id="text-1-6-4">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">interface</span> <span style="color: #98fb98;">IStorableCompressible</span>: <span style="color: #98fb98;">IStorable</span>,<span style="color: #98fb98;">ICompressible</span>
{
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline55" class="outline-4">
<h4 id="orgheadline55"><span class="section-number-4">1.6.5</span> 转换为接口</h4>
<div class="outline-text-4" id="text-1-6-5">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">IStorable</span> <span style="color: #eedd82;">iObj</span> = doc <span style="color: #00ffff;">as</span> <span style="color: #98fb98;">IStorable</span>;
<span style="color: #00ffff;">if</span>(iObj != <span style="color: #7fffd4;">null</span>)
 {
     iObj.Read();
 }
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline56" class="outline-4">
<h4 id="orgheadline56"><span class="section-number-4">1.6.6</span> is 和 as 操作符</h4>
<div class="outline-text-4" id="text-1-6-6">
<p>
is 可用来判断某个对象是否为某个类型。也可以判断某个对象是否实现了某个接口。<br>
表达式 is 类型 // is 返回 true 或 false<br>
is 运算符只考虑引用转换、装箱转换和取消装箱转换。不考虑其他转换，如用户定义的转换。<br>
as 是将 is 和转换操作结合起来。首先测试转换是否合法，如果是就进行转换。如果转换不合法就返回 null。<br>
表达式 as 类型 // as 返回转换后的对象 或 null<br>
as 用于在兼容的引用类型之间执行转换.as 运算符只执行引用转换和装箱转换。as 运算符无法执行其他转换，如用户定义的转换。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">iValue</span> = 10;
Console.WriteLine (<span style="color: #ffa07a;">"iValue is object = {0}"</span>, iValue <span style="color: #00ffff;">is</span> <span style="color: #98fb98;">object</span>);
Console.WriteLine (<span style="color: #ffa07a;">"iValue is int    = {0}"</span>, iValue <span style="color: #00ffff;">is</span> <span style="color: #98fb98;">int</span>);
Console.WriteLine (<span style="color: #ffa07a;">"iValue as object = {0}"</span>, iValue <span style="color: #00ffff;">as</span> <span style="color: #98fb98;">object</span>);
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">output</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">iValue is object = True</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">iValue is int    = True</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">iValue as object = 10</span>

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#19979;&#38754;&#30340;&#20195;&#30721;&#32534;&#35793;&#20250;&#20986;&#38169;</span>
Console.WriteLine (<span style="color: #ffa07a;">"iValue as int    = {0}"</span>, iValue <span style="color: #00ffff;">as</span> <span style="color: #98fb98;">int</span>);
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline57" class="outline-4">
<h4 id="orgheadline57"><span class="section-number-4">1.6.7</span> 接口和抽象类比较</h4>
<div class="outline-text-4" id="text-1-6-7">
<p>
若要创建一个会被许多人使用的类库，最好使用抽象基类；这样当你需要增加一个新的方法时，只需要在抽象基类中添加一个虚方法，然后配一个默认实现就好了。<br>
若只是为单个项目创建类，则使用接口更好，因为接口更加灵活且具有弹性。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline58" class="outline-4">
<h4 id="orgheadline58"><span class="section-number-4">1.6.8</span> 重定义接口的实现</h4>
<div class="outline-text-4" id="text-1-6-8">
<p>
实现类可以自由地将任何或全部实现接口的方法标记为虚。派生类可以重定义或提供新的实现。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">interface</span> <span style="color: #98fb98;">IStorable</span>
{
    <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Read</span> ();

    <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Write</span> (<span style="color: #98fb98;">Object</span> <span style="color: #eedd82;">obj</span>);

    <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">Status</span> {
        <span style="color: #00ffff;">get</span>;
        <span style="color: #00ffff;">set</span>;
    }
}

<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">GDoc</span> : <span style="color: #98fb98;">IStorable</span>
{
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Read</span> ()
    {
        Console.WriteLine (<span style="color: #ffa07a;">"GDoc read ..."</span>);
    }

    <span style="color: #00ffff;">virtual</span> <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Write</span> (<span style="color: #98fb98;">Object</span> <span style="color: #eedd82;">obj</span>)
    {
        Console.WriteLine (<span style="color: #ffa07a;">"GDoc write ..."</span>);
    }

    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">status</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">Status</span> {
        <span style="color: #00ffff;">get</span>;
        <span style="color: #00ffff;">set</span>;
    }
}

<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">GNote</span> : <span style="color: #98fb98;">GDoc</span>
{
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">override</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Read</span> ()
    {
        Console.WriteLine (<span style="color: #ffa07a;">"GNote read ..."</span>);
    }

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">override</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Write</span> (<span style="color: #98fb98;">Object</span> <span style="color: #eedd82;">obj</span>)
    {
        Console.WriteLine (<span style="color: #ffa07a;">"GNote write ..."</span>);
    }
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline59" class="outline-4">
<h4 id="orgheadline59"><span class="section-number-4">1.6.9</span> 显式接口实现</h4>
<div class="outline-text-4" id="text-1-6-9">
<p>
当需要实现的两个接口有相同的方法时，其中一个接口的方法需要显式实现。<br>
显式实现声明的方法不能用访问修饰符，该方法隐含为公共的。<br>
显式实现声明的方法不能用 abstract\virtual\override\new 修饰符声明。<br>
将接口方法通过显式实现，可以一定程度的隐藏接口方法，从而达到有选择公开接口方法的目的。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">GDoc</span> : <span style="color: #98fb98;">IStorable</span>,<span style="color: #98fb98;">ITalk</span>
{
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Read</span> ()
    {
        Console.WriteLine (<span style="color: #ffa07a;">"GDoc read ..."</span>);
    }

    <span style="color: #00ffff;">virtual</span> <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Write</span> (<span style="color: #98fb98;">Object</span> <span style="color: #eedd82;">obj</span>)
    {
        Console.WriteLine (<span style="color: #ffa07a;">"GDoc write ..."</span>);
    }

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Talk</span> ()
    {
        Console.WriteLine(<span style="color: #ffa07a;">"IStorable Talk implement"</span>);
    }

    <span style="color: #98fb98;">void</span> ITalk.<span style="color: #87cefa;">Talk</span> ()
    {
        Console.WriteLine(<span style="color: #ffa07a;">"ITalk Talk implement"</span>);
    }

    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">status</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">Status</span> {
        <span style="color: #00ffff;">get</span>;
        <span style="color: #00ffff;">set</span>;
    }
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline60" class="outline-4">
<h4 id="orgheadline60"><span class="section-number-4">1.6.10</span> 隐藏接口成员</h4>
<div class="outline-text-4" id="text-1-6-10">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">interface</span> <span style="color: #98fb98;">IGBase</span>
{
    <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">P</span> {
        <span style="color: #00ffff;">get</span>;
        <span style="color: #00ffff;">set</span>;
    }
}

<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">interface</span> <span style="color: #98fb98;">IGDerived</span>:<span style="color: #98fb98;">IGBase</span>
{
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">new &#21487;&#20197;&#38544;&#34255; IGBase &#30340; P &#25104;&#21592;</span>
    <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">P</span> {
        <span style="color: #00ffff;">get</span>;
        <span style="color: #00ffff;">set</span>;
    }
}

<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">GMyClass</span>:<span style="color: #98fb98;">IGDerived</span>
{
    <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">IGBase_P</span>;

    <span style="color: #98fb98;">int</span> IGBase.<span style="color: #eedd82;">P</span> {
        <span style="color: #00ffff;">get</span> {
            <span style="color: #00ffff;">return</span> IGBase_P;
        }
        <span style="color: #00ffff;">set</span> { 
            IGBase_P = value;
        }
    }

    <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">p</span> = 10;

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">P</span> {
        <span style="color: #00ffff;">get</span> {
            <span style="color: #00ffff;">return</span> p;
        }
        <span style="color: #00ffff;">set</span> { 
            p = value;
        }
    }
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline61" class="outline-4">
<h4 id="orgheadline61"><span class="section-number-4">1.6.11</span> 访问密封类和结构体</h4>
<div class="outline-text-4" id="text-1-6-11">
<p>
使用值类型实现接口时，一定要通过对象访问接口成员，而不要通过接口引用。因为将值类型对象转换为接口引用时会对值类型对象进行装箱操作，<br>
通过接口引用调用接口方法是在装箱后的引用对象上进行的。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">GStudentA</span> <span style="color: #eedd82;">stu1</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">GStudentA</span> (<span style="color: #ffa07a;">"God1"</span>); <span style="color: #ff0000;">//</span><span style="color: #ff0000;">GStudentA is a struct</span>
<span style="color: #98fb98;">IChangeName</span> <span style="color: #eedd82;">iCN</span> = stu1;
iCN.Name = <span style="color: #ffa07a;">"God2"</span>;
Console.WriteLine (<span style="color: #ffa07a;">"stu1 name = {0}"</span>, stu1.Name);
Console.WriteLine (<span style="color: #ffa07a;">"iCN  name = {0}"</span>, iCN.Name);
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">output</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">stu1 name = God1</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">iCN  name = God2</span>

<span style="color: #98fb98;">GStudentB</span> <span style="color: #eedd82;">stu2</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">GStudentB</span> (<span style="color: #ffa07a;">"Dog1"</span>); <span style="color: #ff0000;">// </span><span style="color: #ff0000;">GStudentB is a sealed class</span>
<span style="color: #98fb98;">IChangeName</span> <span style="color: #eedd82;">iCN2</span> = stu2;
iCN2.Name = <span style="color: #ffa07a;">"Dog2"</span>;
Console.WriteLine (<span style="color: #ffa07a;">"stu2 name = {0}"</span>, stu2.Name);
Console.WriteLine (<span style="color: #ffa07a;">"iCN2 name = {0}"</span>, iCN2.Name);
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">output</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">stu2 name = Dog2</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">iCN2 name = Dog2</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline80" class="outline-3">
<h3 id="orgheadline80"><span class="section-number-3">1.7</span> 数组索引器与集合</h3>
<div class="outline-text-3" id="text-1-7">
</div><div id="outline-container-orgheadline74" class="outline-4">
<h4 id="orgheadline74"><span class="section-number-4">1.7.1</span> 数组</h4>
<div class="outline-text-4" id="text-1-7-1">
<p>
C#中数组为对象，数组可以有自己的方法和属性。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline63"></a>声明数组<br><div class="outline-text-5" id="text-1-7-1-1">
<p>
类型[] 数组名;<br>
</p>
</div></li>
<li><a id="orgheadline64"></a>内存分配<br><div class="outline-text-5" id="text-1-7-1-2">
<p>
C#数组为引用类型，所以其在堆中分配，数组内的元素如何分配要看他们自己的类型。如果数组元素为值类型，则所有元素在为数组分配的内存块中创建。<br>
如果数组元素为引用类型，分配给数组的内存将用来存放对实际元素的引用。实际元素本身是在堆中分配的，所占内存和分配给数组的内存是不同的。<br>
</p>
</div></li>
<li><a id="orgheadline65"></a>默认值<br><div class="outline-text-5" id="text-1-7-1-3">
<p>
创建值类型数组时，每个元素最初都存放着数组所存类型的默认值。<br>
创建引用类型数组时，每个元素被初始化为 null。<br>
</p>
</div></li>
<li><a id="orgheadline66"></a>遍历数组<br><div class="outline-text-5" id="text-1-7-1-4">
<p>
foreach(类型 标识符 in 表达式)语句<br>
for(int i=0; i&lt;arr.Length; i++)语句<br>
</p>
</div></li>
<li><a id="orgheadline67"></a>初始化数组元素<br><div class="outline-text-5" id="text-1-7-1-5">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">Employee</span>[] <span style="color: #eedd82;">empArr</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Employee</span>[3] {
    <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Employee</span> (110),
    <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Employee</span> (111),
    <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Employee</span> (112)
};
<span style="color: #98fb98;">Employee</span>[] <span style="color: #eedd82;">empArr</span> = {
    <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Employee</span> (110),
    <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Employee</span> (111),
    <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Employee</span> (112)
};
</pre>
</div>
</div></li>
<li><a id="orgheadline68"></a>params 关键字<br><div class="outline-text-5" id="text-1-7-1-6">
<p>
params 可用于可变数目的数组函数参数。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">PrintIntArray</span> (<span style="color: #00ffff;">params</span> <span style="color: #98fb98;">int</span>[] <span style="color: #eedd82;">intArr</span>)
{
    <span style="color: #00ffff;">foreach</span> (<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">value</span> <span style="color: #00ffff;">in</span> intArr) {
        Console.WriteLine (value);
    }
}
<span style="color: #98fb98;">int</span>[] <span style="color: #eedd82;">intArr</span> = { 11111, 11112, 11113, 11114 };
PrintIntArray (intArr);
PrintIntArray (1111, 1112, 1113);
</pre>
</div>
</div></li>
<li><a id="orgheadline71"></a>多维数组<br><div class="outline-text-5" id="text-1-7-1-7">
<p>
数组可分为规则数组和不规则数组。规则数组每行长度是相同的，不规则数组是数组组成的数组。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline69"></a>规则数组<br><div class="outline-text-6" id="text-1-7-1-7-1">
<p>
二维数组 类型[,]数组名;<br>
三维数组 类型[,,]数组名;<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">int</span>[2,3]arr;     <span style="color: #ff0000;">//</span><span style="color: #ff0000;">2 &#34892; 3 &#21015;&#30340;&#20108;&#32500;&#25968;&#32452;</span>
<span style="color: #98fb98;">int</span>[2,3,4]arr;   <span style="color: #ff0000;">//</span><span style="color: #ff0000;">&#19977;&#32500;&#25968;&#32452;</span>
<span style="color: #98fb98;">int</span>[,] arr = {
    {0,1,2},
    {3,4,5},
    {6,7,8},
    {9,10,11}
};                       <span style="color: #ff0000;">//</span><span style="color: #ff0000;">4 &#34892; 3 &#21015;&#30340;&#20108;&#32500;&#25968;&#32452;</span>
arr[1,1];                <span style="color: #ff0000;">//</span><span style="color: #ff0000;">&#35775;&#38382;&#31532;&#20108;&#34892;&#31532;&#20108;&#21015;&#30340;&#20803;&#32032;&#65292;&#35813;&#20540;&#20026; 4</span>
</pre>
</div>
</div></li>
<li><a id="orgheadline70"></a>不规则数组<br><div class="outline-text-6" id="text-1-7-1-7-2">
<p>
类型[][]&#x2026;数组名;<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">int</span>[3][]arr;      <span style="color: #ff0000;">//</span><span style="color: #ff0000;">&#20108;&#32500;&#25972;&#22411;&#19981;&#35268;&#21017;&#25968;&#32452;</span>
arr[0] = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">int</span>[4];
arr[1] = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">int</span>[2];
arr[2] = {0,2,4,6,8};
arr[2][3];        <span style="color: #ff0000;">//</span><span style="color: #ff0000;">&#35775;&#38382;&#31532;&#19977;&#34892;&#31532;&#22235;&#21015;&#30340;&#20803;&#32032;&#65292;&#35813;&#20540;&#20026; 8</span>
</pre>
</div>
</div></li></ol></li>
<li><a id="orgheadline72"></a>数组转换<br><div class="outline-text-5" id="text-1-7-1-8">
<p>
如果维数相同，且引用元素类型可以转换，那么可以进行数组间的转换。如果元素类型可以隐式转换，则可以进行隐式转换，否则必须进行显式转换。<br>
Tips: 值类型元素的数组不可以转换。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">ImgButton</span>[] <span style="color: #eedd82;">imgBtnArr</span> = { <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ImgButton</span> (10, <span style="color: #ffa07a;">"10"</span>), <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ImgButton</span> (11, <span style="color: #ffa07a;">"11"</span>) };
PrintControl (imgBtnArr);
<span style="color: #98fb98;">Control</span>[] <span style="color: #eedd82;">tmpCtrlArr</span> = imgBtnArr;
PrintControl (tmpCtrlArr);
<span style="color: #98fb98;">ImgButton</span>[] <span style="color: #eedd82;">tmpImgBtnArr</span> = (ImgButton[])tmpCtrlArr;
PrintControl (tmpImgBtnArr);

<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">PrintControl</span> (<span style="color: #98fb98;">Control</span>[] <span style="color: #eedd82;">controlArr</span>)
{
    <span style="color: #00ffff;">foreach</span> (<span style="color: #98fb98;">Control</span> <span style="color: #eedd82;">ctr</span> <span style="color: #00ffff;">in</span> controlArr) {
        Console.WriteLine (<span style="color: #ffa07a;">"controlId = {0}"</span>, ctr.Id);
    }
}


<span style="color: #98fb98;">float</span>[] <span style="color: #eedd82;">floatArr</span> = { 1.0f, 1.1f, 1.2f };
<span style="color: #98fb98;">float</span>[] <span style="color: #eedd82;">floatArr2</span> = {0.0f, 1.0f};
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#19979;&#38754;&#30340;&#20195;&#30721;&#27491;&#30830;</span>
floatArr2 = floatArr;
PrintArray&lt;<span style="color: #98fb98;">float</span>&gt; (floatArr2);

<span style="color: #98fb98;">double</span>[] <span style="color: #eedd82;">doubleArr</span> = { 2.0, 2.1, 2.2 };
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#19979;&#38754;&#30340;&#20195;&#30721;&#32534;&#35793;&#20250;&#20986;&#38169;</span>
doubleArr = (<span style="color: #98fb98;">double</span>[])floatArr;
</pre>
</div>
</div></li>
<li><a id="orgheadline73"></a>数组排序<br><div class="outline-text-5" id="text-1-7-1-9">
<p>
Array.Sort    可用来排序数组。<br>
Array.Reverse 可用来将数组元素顺序反转。<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline75" class="outline-4">
<h4 id="orgheadline75"><span class="section-number-4">1.7.2</span> 索引器</h4>
<div class="outline-text-4" id="text-1-7-2">
<p>
索引器是一种特殊的属性，可以通过 get set 方法来指定其行为。<br>
(返回)类型 this[(索引)类型 参数]{get;set}<br>
索引类型<br>
索引操作符在 C#中不能重载，所以提供了索引器。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ListBox</span>:<span style="color: #98fb98;">IEnumerable</span>&lt;<span style="color: #98fb98;">string</span>&gt;
{
    <span style="color: #00ffff;">public</span> ListBox (<span style="color: #00ffff;">params</span> <span style="color: #98fb98;">string</span>[] <span style="color: #eedd82;">init_strs</span>)
    {
        strings = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">string</span>[256];
        <span style="color: #00ffff;">foreach</span> (<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">str</span> <span style="color: #00ffff;">in</span> init_strs) {
            strings [count++] = str;
        }
    }

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">IEnumerator</span>&lt;<span style="color: #98fb98;">string</span>&gt; <span style="color: #87cefa;">GetEnumerator</span> ()
    {
        <span style="color: #00ffff;">foreach</span> (<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">s</span> <span style="color: #00ffff;">in</span> strings) {
            <span style="color: #00ffff;">yield</span> <span style="color: #00ffff;">return</span> s;
        }
    }

    <span style="color: #98fb98;">IEnumerator</span> IEnumerable.<span style="color: #87cefa;">GetEnumerator</span> ()
    {
        <span style="color: #00ffff;">return</span> GetEnumerator ();
    }

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Add</span> (<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">item</span>)
    {
        <span style="color: #00ffff;">if</span> (count &gt;= strings.Length) {
            <span style="color: #ff0000;">//</span>
        } <span style="color: #00ffff;">else</span> {
            strings [count++] = item;
        }
    }

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">string</span> <span style="color: #00ffff;">this</span> [<span style="color: #98fb98;">int</span> index] {
        <span style="color: #00ffff;">get</span> {
            <span style="color: #00ffff;">if</span> (index &gt;= count) {
                <span style="color: #00ffff;">return</span> <span style="color: #ffa07a;">""</span>;
            } <span style="color: #00ffff;">else</span> {
                <span style="color: #00ffff;">return</span> strings [index];
            }
        }
        <span style="color: #00ffff;">set</span> {
            <span style="color: #00ffff;">if</span> (index &gt;= strings.Length) {
                <span style="color: #ff0000;">//</span>
            } <span style="color: #00ffff;">else</span> {
                <span style="color: #00ffff;">if</span> (index &gt;= count) {
                    count = index + 1;
                }
                strings [index] = value;
            }
        }
    }

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">string</span> <span style="color: #00ffff;">this</span> [<span style="color: #98fb98;">string</span> index] {
        <span style="color: #00ffff;">get</span> {
            <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">idx</span> = findString (index);
            <span style="color: #00ffff;">if</span> (idx != -1) {
                <span style="color: #00ffff;">return</span> strings [idx];
            } <span style="color: #00ffff;">else</span> {
                <span style="color: #00ffff;">return</span> <span style="color: #ffa07a;">""</span>;
            }
        }
        <span style="color: #00ffff;">set</span> {
            <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">idx</span> = findString (index);
            <span style="color: #00ffff;">if</span> (idx != -1) {
                strings [idx] = value;
            } <span style="color: #00ffff;">else</span> {
                <span style="color: #ff0000;">//</span>
            }
        }
    }

    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">int</span> <span style="color: #87cefa;">findString</span> (<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">str</span>)
    {
        <span style="color: #00ffff;">for</span> (<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; count; i++) {
            <span style="color: #00ffff;">if</span> (strings [i].StartsWith (str)) {
                <span style="color: #00ffff;">return</span> i;
            }
        }
        <span style="color: #00ffff;">return</span> -1;
    }

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">Count</span> {
        <span style="color: #00ffff;">get</span> {
            <span style="color: #00ffff;">return</span> count;
        }
        <span style="color: #ff0000;">//</span><span style="color: #ff0000;">private set;</span>
    }

    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">string</span>[] <span style="color: #eedd82;">strings</span>;
    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">count</span>;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline79" class="outline-4">
<h4 id="orgheadline79"><span class="section-number-4">1.7.3</span> 集合接口</h4>
<div class="outline-text-4" id="text-1-7-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">接口</th>
<th scope="col" class="org-left">目的</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">ICollection&lt;T&gt;</td>
<td class="org-left">泛型集合的基接口</td>
</tr>

<tr>
<td class="org-left">IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;</td>
<td class="org-left">用 foreach 语句枚举集合</td>
</tr>

<tr>
<td class="org-left">ICollection&lt;T&gt;</td>
<td class="org-left">所有集合都要实现，以提供 CopyTo()方法，以及 Count、IsSynchronized 和 SyncRoot 属性</td>
</tr>

<tr>
<td class="org-left">IComparer&lt;T&gt; IComparable&lt;T&gt;</td>
<td class="org-left">比较集合中的两个对象以对集合排序</td>
</tr>

<tr>
<td class="org-left">IList&lt;T&gt;</td>
<td class="org-left">用于数组可索引的集合</td>
</tr>

<tr>
<td class="org-left">IDictionary&lt;K,V&gt;</td>
<td class="org-left">用于基于键值对的集合，如 Dictionary</td>
</tr>
</tbody>
</table>
</div>
<ol class="org-ol"><li><a id="orgheadline76"></a>约束<br><div class="outline-text-5" id="text-1-7-3-1">
<p>
通过关键字 where 指定约束。<br>
public class Node&lt;T&gt;:IComparable&lt;Node&lt;T&gt;&gt; where T : IComparable&lt;T&gt; <i>/ 指定约束 T 需要实现 IComparable&lt;T&gt;接口<br>
public class Node&lt;T&gt; where T : new() /</i> 指定 T 支持不带参数的构造函数<br>
public class Node&lt;T&gt; where T : class // 指定 T 可以被赋值为 null<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Node</span>&lt;T&gt;:<span style="color: #98fb98;">IComparable</span>&lt;<span style="color: #98fb98;">Node</span>&lt;T&gt;&gt; <span style="color: #00ffff;">where</span> T : <span style="color: #98fb98;">IComparable</span>&lt;T&gt;
{
    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">T</span> <span style="color: #eedd82;">data</span>;
    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">Node</span>&lt;<span style="color: #98fb98;">T</span>&gt; <span style="color: #eedd82;">prev</span>;
    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">Node</span>&lt;<span style="color: #98fb98;">T</span>&gt; <span style="color: #eedd82;">next</span>;

    <span style="color: #00ffff;">public</span> Node (<span style="color: #98fb98;">T</span> <span style="color: #eedd82;">data</span>)
    {
        <span style="color: #00ffff;">this</span>.data = data;
    }

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">T</span> <span style="color: #eedd82;">Data</span>{ <span style="color: #00ffff;">get</span> { <span style="color: #00ffff;">return</span> data; } }

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Node</span>&lt;<span style="color: #98fb98;">T</span>&gt; <span style="color: #eedd82;">Next</span> { <span style="color: #00ffff;">get</span> { <span style="color: #00ffff;">return</span> next; } }

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #87cefa;">CompareTo</span> (<span style="color: #98fb98;">Node</span>&lt;<span style="color: #98fb98;">T</span>&gt; <span style="color: #eedd82;">rhs</span>)
    {
        <span style="color: #00ffff;">return</span> data.CompareTo (rhs.Data);
    }

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">bool</span> <span style="color: #87cefa;">Equals</span> (<span style="color: #98fb98;">Node</span>&lt;<span style="color: #98fb98;">T</span>&gt; <span style="color: #eedd82;">rhs</span>)
    {
        <span style="color: #00ffff;">return</span> data.Equals (rhs.Data);
    }

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Node</span>&lt;<span style="color: #98fb98;">T</span>&gt; <span style="color: #87cefa;">Add</span> (<span style="color: #98fb98;">Node</span>&lt;<span style="color: #98fb98;">T</span>&gt; <span style="color: #eedd82;">newNode</span>)
    {
        <span style="color: #00ffff;">if</span> (<span style="color: #00ffff;">this</span>.CompareTo (newNode) &gt; 0) {
            newNode.next = <span style="color: #00ffff;">this</span>;
            <span style="color: #00ffff;">if</span> (<span style="color: #00ffff;">this</span>.prev != <span style="color: #7fffd4;">null</span>) {
                <span style="color: #00ffff;">this</span>.prev.next = newNode;
                newNode.prev = <span style="color: #00ffff;">this</span>.prev;
            }
            <span style="color: #00ffff;">this</span>.prev = newNode;

            <span style="color: #00ffff;">return</span> newNode;
        } <span style="color: #00ffff;">else</span> {
            <span style="color: #00ffff;">if</span> (<span style="color: #00ffff;">this</span>.next != <span style="color: #7fffd4;">null</span>) {
                <span style="color: #00ffff;">this</span>.next.Add (newNode);
            } <span style="color: #00ffff;">else</span> {
                <span style="color: #00ffff;">this</span>.next = newNode;
                newNode.prev = <span style="color: #00ffff;">this</span>;
            }
            <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">this</span>;
        }
    }

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">override</span> <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">ToString</span> ()
    {
        <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">output</span> = data.ToString ();
        <span style="color: #00ffff;">if</span> (next != <span style="color: #7fffd4;">null</span>) {
            output += <span style="color: #ffa07a;">", "</span>    + next.ToString ();
        }
        <span style="color: #00ffff;">return</span> output;
    }
}

<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">LinkedList</span>&lt;<span style="color: #98fb98;">T</span>&gt; <span style="color: #00ffff;">where</span> T : <span style="color: #98fb98;">IComparable</span>&lt;<span style="color: #98fb98;">T</span>&gt;
{
    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">Node</span>&lt;<span style="color: #98fb98;">T</span>&gt; <span style="color: #eedd82;">headNode</span> = <span style="color: #7fffd4;">null</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">T</span> <span style="color: #00ffff;">this</span> [<span style="color: #98fb98;">int</span> index] {
        <span style="color: #00ffff;">get</span> {
            <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">count</span> = 0;
            <span style="color: #98fb98;">Node</span>&lt;<span style="color: #98fb98;">T</span>&gt; <span style="color: #eedd82;">node</span> = headNode;
            <span style="color: #00ffff;">while</span> (node != <span style="color: #7fffd4;">null</span> &amp;&amp; count &lt;= index) {
                <span style="color: #00ffff;">if</span> (count == index) {
                    <span style="color: #00ffff;">return</span> node.Data;
                } <span style="color: #00ffff;">else</span> {
                    count++;
                    node = node.Next;
                }
            }
            <span style="color: #00ffff;">throw</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ArgumentOutOfRangeException</span> ();
        }
    }

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Add</span> (<span style="color: #98fb98;">T</span> <span style="color: #eedd82;">data</span>)
    {
        <span style="color: #00ffff;">if</span> (headNode == <span style="color: #7fffd4;">null</span>) {
            headNode = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Node</span>&lt;<span style="color: #98fb98;">T</span>&gt; (data);
        } <span style="color: #00ffff;">else</span> {
            headNode.Add (<span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Node</span>&lt;<span style="color: #98fb98;">T</span>&gt; (data));
        }
    }

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">override</span> <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">ToString</span> ()
    {
        <span style="color: #00ffff;">if</span> (headNode == <span style="color: #7fffd4;">null</span>) {
            <span style="color: #00ffff;">return</span> <span style="color: #98fb98;">string</span>.Empty;
        } <span style="color: #00ffff;">else</span> {
            <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">this</span>.headNode.ToString ();
        }
    }
}
</pre>
</div>
</div></li>
<li><a id="orgheadline77"></a>实现 IComparer IComparable<br><div class="outline-text-5" id="text-1-7-3-2">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">IComparable    &#23450;&#20041;&#30340;&#25509;&#21475;&#26041;&#27861; int CompareTo(object obj)</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">IComparable&lt;T&gt; &#23450;&#20041;&#30340;&#25509;&#21475;&#26041;&#27861; int CompareTo(T other);</span>
<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Employee</span>:<span style="color: #98fb98;">IComparable</span>&lt;<span style="color: #98fb98;">Employee</span>&gt;
{
    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">empID</span>;
    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">yearsOfSvr</span> = 1;

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">EmpID</span> {
        <span style="color: #00ffff;">get</span>{ <span style="color: #00ffff;">return</span> empID; }
        <span style="color: #00ffff;">set</span>{ empID = value; }
    }

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">YearsOfSvr</span> {
        <span style="color: #00ffff;">get</span>{ <span style="color: #00ffff;">return</span> yearsOfSvr; }
        <span style="color: #00ffff;">set</span>{ yearsOfSvr = value; }
    }

    <span style="color: #00ffff;">public</span> Employee (<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">empID</span>)
    {
        <span style="color: #00ffff;">this</span>.empID = empID;
    }

    <span style="color: #00ffff;">public</span> Employee (<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">empID</span>, <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">yearsOfSvr</span>)
    {
        <span style="color: #00ffff;">this</span>.empID = empID;
        <span style="color: #00ffff;">this</span>.yearsOfSvr = yearsOfSvr;
    }

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">EmployeeComparer</span> <span style="color: #87cefa;">GetComparer</span> ()
    {
        <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">EmployeeComparer</span> ();
    }

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #87cefa;">CompareTo</span> (<span style="color: #98fb98;">Employee</span> <span style="color: #eedd82;">rhs</span>)
    {
        <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">this</span>.empID.CompareTo (rhs.EmpID);
    }

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #87cefa;">CompareTo</span> (<span style="color: #98fb98;">Employee</span> <span style="color: #eedd82;">rhs</span>, EmployeeComparer.<span style="color: #98fb98;">ComparerType</span> <span style="color: #eedd82;">cmpType</span>)
    {
        <span style="color: #00ffff;">switch</span> (cmpType) {
            <span style="color: #00ffff;">case</span> EmployeeComparer.ComparerType.EmpID:
                <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">this</span>.empID.CompareTo (rhs.EmpID);
            <span style="color: #00ffff;">case</span> EmployeeComparer.ComparerType.YearOfSvr:
                <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">this</span>.yearsOfSvr.CompareTo (rhs.yearsOfSvr);
        }
        <span style="color: #00ffff;">return</span> 0;
    }

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">override</span> <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">ToString</span> ()
    {
        <span style="color: #00ffff;">return</span> <span style="color: #98fb98;">string</span>.Format (<span style="color: #ffa07a;">"EmpID={0}, SvrYears={1}"</span>, empID, yearsOfSvr);
    }

    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">EmployeeComparer</span>:<span style="color: #98fb98;">IComparer</span>&lt;<span style="color: #98fb98;">Employee</span>&gt;
    {
        <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">enum</span> <span style="color: #98fb98;">ComparerType</span>
        {
            <span style="color: #eedd82;">EmpID</span>,
            <span style="color: #eedd82;">YearOfSvr</span>
        }

        <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">ComparerType</span> <span style="color: #eedd82;">compType</span>;

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">ComparerType</span> <span style="color: #eedd82;">CompType</span> {
            <span style="color: #00ffff;">get</span>{ <span style="color: #00ffff;">return</span> compType; }
            <span style="color: #00ffff;">set</span>{ compType = value; }
        }

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">bool</span> <span style="color: #87cefa;">Equals</span> (<span style="color: #98fb98;">Employee</span> <span style="color: #eedd82;">lhs</span>, <span style="color: #98fb98;">Employee</span> <span style="color: #eedd82;">rhs</span>)
        {
            <span style="color: #00ffff;">return</span> lhs.CompareTo (rhs) == 0;
        }

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #87cefa;">GetHashCode</span> (<span style="color: #98fb98;">Employee</span> <span style="color: #eedd82;">e</span>)
        {
            <span style="color: #00ffff;">return</span> e.GetHashCode ();
        }

        <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #87cefa;">Compare</span> (<span style="color: #98fb98;">Employee</span> <span style="color: #eedd82;">lhs</span>, <span style="color: #98fb98;">Employee</span> <span style="color: #eedd82;">rhs</span>)
        {
            <span style="color: #00ffff;">return</span> lhs.CompareTo (rhs, compType);
        }
    }
}
</pre>
</div>
</div></li>
<li><a id="orgheadline78"></a>实现 IEnumerable&lt;T&gt;<br><div class="outline-text-5" id="text-1-7-3-3">
<p>
由于 IEnumerable&lt;T&gt;扩展（继承）了旧的 IEnumerable 接口，所以实现 IEnumerable&lt;T&gt;时，要实现两个不同的方法：<br>
IEnumerator&lt;T&gt; GetEnumerator();<br>
IEnumerator GetEnumerator();      // 由于和泛型版本的方法同名，所以该方法的实现需要使用显式接口实现<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">//</span><span style="color: #ff0000;">IEnumerator    &#23450;&#20041;&#30340;&#25509;&#21475;&#26041;&#27861;&#20026; IEnumerator GetEnumerator()</span>
<span style="color: #ff0000;">//</span><span style="color: #ff0000;">IEnumerator&lt;T&gt; &#23450;&#20041;&#30340;&#25509;&#21475;&#26041;&#27861;&#20026; IEnumerator&lt;T&gt; GetEnumerator();</span>

<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">IEnumerator</span>&lt;T&gt; <span style="color: #87cefa;">GetEnumerator</span> ()
{
    <span style="color: #98fb98;">bool</span> <span style="color: #eedd82;">isUseType1</span> = <span style="color: #7fffd4;">false</span>;
    <span style="color: #00ffff;">if</span> (isUseType1) {
        <span style="color: #00ffff;">for</span> (<span style="color: #98fb98;">GListNode</span>&lt;T&gt; <span style="color: #eedd82;">iter</span> = first; iter != <span style="color: #7fffd4;">null</span>; iter = iter.Next) {
            <span style="color: #00ffff;">yield</span> <span style="color: #00ffff;">return</span> iter.Value;
        }
    } 
    <span style="color: #00ffff;">else</span> {
        <span style="color: #98fb98;">GListNode</span>&lt;T&gt; <span style="color: #eedd82;">iter</span> = first;
        <span style="color: #00ffff;">while</span> (iter != <span style="color: #7fffd4;">null</span>) {
            <span style="color: #00ffff;">yield</span> <span style="color: #00ffff;">return</span> iter.Value;
            iter = iter.Next;
        }
    }
}
System.Collections.<span style="color: #98fb98;">IEnumerator</span> System.Collections.IEnumerable.<span style="color: #87cefa;">GetEnumerator</span> ()
{  
    <span style="color: #00ffff;">return</span> GetEnumerator ();  
}
</pre>
</div>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline86" class="outline-3">
<h3 id="orgheadline86"><span class="section-number-3">1.8</span> 字符串与正则表达式</h3>
<div class="outline-text-3" id="text-1-8">
</div><div id="outline-container-orgheadline81" class="outline-4">
<h4 id="orgheadline81"><span class="section-number-4">1.8.1</span> string</h4>
<div class="outline-text-4" id="text-1-8-1">
<p>
C#中 string 是一种正常的类型，而不是字符数组。string 为引用类型。<br>
string 类的声明为：<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">sealed</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">String</span>:<span style="color: #98fb98;">IComparable</span>&lt;T&gt;,<span style="color: #98fb98;">ICloneable</span>,<span style="color: #98fb98;">IConvertible</span>,<span style="color: #98fb98;">IEnumerable</span>&lt;T&gt;
</pre>
</div>
<p>
每个 string 对象都是一个不变的 unicode 字符序列。默认情况下每个字符都采用 UTF16 编码，string 不变这一事实意味着看似要改变字符串的方法实际上返回的是一个修改后的副本，原字符串在内存中是不变的，直至被垃圾回收。这可能会带来性能问题，所以如果需要频繁修改字符串，应该使用 StringBuilder。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">ChangeStr</span> (<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">str</span>)
{
    str = <span style="color: #ffa07a;">"after changed\n"</span>;
}
<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">str</span> = <span style="color: #ffa07a;">"before changed\n"</span>;
ChangeStr(str);
Console.WriteLine (str); <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#36755;&#20986;: before changed</span>

<span style="color: #ff0000;">//</span><span style="color: #ff0000;">&#20462;&#25913; string</span>
<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">line</span> = <span style="color: #ffa07a;">"My name is God!"</span>;
<span style="color: #98fb98;">char</span>[] <span style="color: #eedd82;">lineCharArr</span> = line.ToCharArray ();
lineCharArr [0] = <span style="color: #ffa07a;">'m'</span>;
line = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">string</span> (lineCharArr);

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">@ &#31526;&#21495;&#20250;&#21578;&#30693;&#23383;&#31526;&#20018;&#26500;&#36896;&#20989;&#25968;&#24573;&#30053;&#36716;&#20041;&#31526;&#21644;&#20998;&#34892;&#31526;&#12290;&#22240;&#27492;&#65292;&#20197;&#19979;&#20004;&#20010;&#23383;&#31526;&#20018;&#26159;&#23436;&#20840;&#30456;&#21516;&#30340;&#65306;</span>
<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">p1</span> = <span style="color: #ffa07a;">"\\\\My Documents\\My Files\\"</span>;
<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">p2</span> = @<span style="color: #ffa07a;">"\\My Documents\My Files\"</span>;
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline82" class="outline-4">
<h4 id="orgheadline82"><span class="section-number-4">1.8.2</span> StringBuilder</h4>
<div class="outline-text-4" id="text-1-8-2">
<p>
System.Text.StringBuilder 的作用是用来创建和修改字符串的。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">StringBuilder</span> <span style="color: #eedd82;">mutableStr</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">StringBuilder</span> (<span style="color: #ffa07a;">"My name is God!"</span>);
mutableStr [0] = <span style="color: #ffa07a;">'m'</span>;
mutableStr.Append(<span style="color: #ffa07a;">"This is a sentence."</span>);
Console.WriteLine (mutableStr);
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline85" class="outline-4">
<h4 id="orgheadline85"><span class="section-number-4">1.8.3</span> <span class="todo TODO">TODO</span> 正则表达式</h4>
<div class="outline-text-4" id="text-1-8-3">
<p>
名字空间 System.Text.RegularExpressions 是所以与正则表达式相关的.NET 框架对象的大本营。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline83"></a>正则表达式匹配 ftp list directory detial<br><div class="outline-text-5" id="text-1-8-3-1">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">//</span><span style="color: #ff0000;">drwxr-xr-x  3 user00  staff  102 Aug  9 12:00 testdir</span>
<span style="color: #ff0000;">//</span><span style="color: #ff0000;">-rw-r--r--  1 user00 staff   42 Aug  9 12:00 test.txt</span>
<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">ftpDirOrFileInfoUnixRegex</span> =
    @<span style="color: #ffa07a;">"^"</span> +
    @<span style="color: #ffa07a;">"(?&lt;dir&gt;[\-ld])"</span> +
    @<span style="color: #ffa07a;">"(?&lt;permission&gt;[\-rwx]{9})"</span> +
    @<span style="color: #ffa07a;">"\s+"</span> +
    @<span style="color: #ffa07a;">"(?&lt;filecode&gt;\d+)"</span> +
    @<span style="color: #ffa07a;">"\s+"</span> +
    @<span style="color: #ffa07a;">"(?&lt;owner&gt;\w+)"</span> +
    @<span style="color: #ffa07a;">"\s+"</span> +
    @<span style="color: #ffa07a;">"(?&lt;group&gt;\w+)"</span> +
    @<span style="color: #ffa07a;">"\s+"</span> +
    @<span style="color: #ffa07a;">"(?&lt;size&gt;\d+)"</span> +
    @<span style="color: #ffa07a;">"\s+"</span> +
    @<span style="color: #ffa07a;">"(?&lt;month&gt;\w{3})"</span> +
    @<span style="color: #ffa07a;">"\s+"</span> +
    @<span style="color: #ffa07a;">"(?&lt;day&gt;\d{1,2})"</span> +
    @<span style="color: #ffa07a;">"\s+"</span> +
    @<span style="color: #ffa07a;">"(?&lt;timeyear&gt;[\d:]{4,5})"</span> +
    @<span style="color: #ffa07a;">"\s+"</span> +
    @<span style="color: #ffa07a;">"(?&lt;name&gt;(.*))$"</span>;

<span style="color: #ff0000;">//</span><span style="color: #ff0000;">07-25-17 03:49PM &lt;DIR&gt; HDX</span>
<span style="color: #ff0000;">//</span><span style="color: #ff0000;">02-08-17  01:24AM 31605 index.html</span>
<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">ftpDirOrFileInfoWinRegex</span> =
    @<span style="color: #ffa07a;">"^"</span> +
    @<span style="color: #ffa07a;">"(?&lt;month&gt;\d{1,2})-(?&lt;day&gt;\d{1,2})-(?&lt;year&gt;\d{1,2})"</span> +
    @<span style="color: #ffa07a;">"\s+"</span> +
    @<span style="color: #ffa07a;">"(?&lt;hour&gt;\d{1,2}):(?&lt;minutes&gt;\d{1,2})(?&lt;ampm&gt;am|pm)"</span> +
    @<span style="color: #ffa07a;">"\s+"</span> +
    @<span style="color: #ffa07a;">"(?&lt;dir&gt;[&lt;]dir[&gt;]\s+)?"</span> +
    @<span style="color: #ffa07a;">"(?&lt;size&gt;\d+\s+)?"</span> +
    @<span style="color: #ffa07a;">"(?&lt;name&gt;.*)$"</span>;

<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">split</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Regex</span>(ftpDirOrFileInfoWinRegex, RegexOptions.IgnoreCase).Match(line);
<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">dir</span> = split.Groups[<span style="color: #ffa07a;">"dir"</span>].ToString().Trim();
<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">filename</span> = split.Groups[<span style="color: #ffa07a;">"name"</span>].ToString();
Debug.Log(<span style="color: #ffa07a;">"dir = "</span>+ dir + <span style="color: #ffa07a;">" filename = "</span> + filename);
</pre>
</div>
</div></li>
<li><a id="orgheadline84"></a>参考资料<br><div class="outline-text-5" id="text-1-8-3-2">
<ol class="org-ol">
<li>C#正则表达式语言 <a href="https://msdn.microsoft.com/zh-cn/library/az24scfc" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/az24scfc</a>(v=vs.110).aspx<br></li>
</ol>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline87" class="outline-3">
<h3 id="orgheadline87"><span class="section-number-3">1.9</span> <span class="todo TODO">TODO</span> 异常处理</h3>
</div>
<div id="outline-container-orgheadline93" class="outline-3">
<h3 id="orgheadline93"><span class="section-number-3">1.10</span> 委托和事件</h3>
<div class="outline-text-3" id="text-1-10">
</div><div id="outline-container-orgheadline88" class="outline-4">
<h4 id="orgheadline88"><span class="section-number-4">1.10.1</span> 委托</h4>
<div class="outline-text-4" id="text-1-10-1">
<p>
委托是一种引用类型，用来封装带有特定签名和返回类型的方法。委托可用来封装静态成员方法、实例方法、匿名方法等。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline89" class="outline-4">
<h4 id="orgheadline89"><span class="section-number-4">1.10.2</span> 多重委托</h4>
<div class="outline-text-4" id="text-1-10-2">
<p>
委托可以通过+、+=形成多重委托，委托也可以通过-、-=移除多重委托中的委托.<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp">MultiDelegate.MyClassWithDelegate.<span style="color: #98fb98;">StringDelegate</span> <span style="color: #eedd82;">writer</span>, <span style="color: #eedd82;">logger</span>, <span style="color: #eedd82;">transmiter</span>;
writer = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">MultiDelegate.MyClassWithDelegate.StringDelegate</span> (MultiDelegate.MyImplClass.WriteStr);
logger = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">MultiDelegate.MyClassWithDelegate.StringDelegate</span> (MultiDelegate.MyImplClass.LogStr);
transmiter = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">MultiDelegate.MyClassWithDelegate.StringDelegate</span> (MultiDelegate.MyImplClass.TransmitStr);

writer (<span style="color: #ffa07a;">"str pass to writer"</span>);
logger (<span style="color: #ffa07a;">"str pass to logger"</span>);

MultiDelegate.MyClassWithDelegate.<span style="color: #98fb98;">StringDelegate</span> <span style="color: #eedd82;">multiDelegate</span> = writer + transmiter;
multiDelegate (<span style="color: #ffa07a;">"str pass to writer+transmiter"</span>);
multiDelegate += logger; 
multiDelegate (<span style="color: #ffa07a;">"str pass to writer+transmiter+loger"</span>);
multiDelegate -= transmiter; 
multiDelegate (<span style="color: #ffa07a;">"str pass to writer+transmiter+loger-transmiter"</span>);
multiDelegate += logger; 
multiDelegate (<span style="color: #ffa07a;">"str pass to writer+loger+loger"</span>);
<span style="color: #ff0000;">///////////////////////////////////</span>
<span style="color: #ff0000;">//</span><span style="color: #ff0000;">&#19979;&#38754;&#20026;&#36755;&#20986;</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Write String     -- str pass to writer</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Log String       -- str pass to logger</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Write String     -- str pass to writer+transmiter</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Transimit String -- str pass to writer+transmiter</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Write String     -- str pass to writer+transmiter+loger</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Transimit String -- str pass to writer+transmiter+loger</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Log String       -- str pass to writer+transmiter+loger</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Write String     -- str pass to writer+transmiter+loger-transmiter</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Log String       -- str pass to writer+transmiter+loger-transmiter</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Write String     -- str pass to writer+loger+loger</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Log String       -- str pass to writer+loger+loger</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Log String       -- str pass to writer+loger+loger</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline90" class="outline-4">
<h4 id="orgheadline90"><span class="section-number-4">1.10.3</span> 事件</h4>
<div class="outline-text-4" id="text-1-10-3">
<p>
可以通过多重委托来实现事件。<br>
event 关键字能够告诉编译器委托只能由定义类调用，其他类只能分别使用相应的+=和-=操作符订阅和退订委托。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline91" class="outline-4">
<h4 id="orgheadline91"><span class="section-number-4">1.10.4</span> 事件和接口</h4>
<div class="outline-text-4" id="text-1-10-4">
<p>
事件可以放在接口中，表示需要实现对应委托的 add,remove 方法。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">public</span> <span style="color: #00ffff;">interface</span> <span style="color: #98fb98;">IDrawingObject</span>
{
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Raise this event before drawing</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">the object.</span>
    <span style="color: #00ffff;">event</span> <span style="color: #98fb98;">EventHandler</span> OnDraw;
}

<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">interface</span> <span style="color: #98fb98;">IShape</span>
{
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Raise this event after drawing</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">the shape.</span>
    <span style="color: #00ffff;">event</span> <span style="color: #98fb98;">EventHandler</span> OnDraw;
}


<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Base class event publisher inherits two</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">interfaces, each with an OnDraw event</span>
<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Shape</span> : <span style="color: #98fb98;">IDrawingObject</span>, <span style="color: #98fb98;">IShape</span>
{
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Create an event for each interface event</span>
    <span style="color: #00ffff;">event</span> <span style="color: #98fb98;">EventHandler</span> PreDrawEvent;
    <span style="color: #00ffff;">event</span> <span style="color: #98fb98;">EventHandler</span> PostDrawEvent;

    <span style="color: #98fb98;">object</span> <span style="color: #eedd82;">objectLock</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Object</span> ();

    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Explicit interface implementation required.</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Associate IDrawingObject's event with</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">PreDrawEvent</span>
    <span style="color: #00ffff;">event</span> <span style="color: #98fb98;">EventHandler</span> IDrawingObject.OnDraw {
        <span style="color: #00ffff;">add</span> {
            <span style="color: #00ffff;">lock</span> (objectLock) {
                PreDrawEvent += value;
            }
        }
        <span style="color: #00ffff;">remove</span> {
            <span style="color: #00ffff;">lock</span> (objectLock) {
                PreDrawEvent -= value;
            }
        }
    }
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Explicit interface implementation required.</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Associate IShape's event with</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">PostDrawEvent</span>
    <span style="color: #00ffff;">event</span> <span style="color: #98fb98;">EventHandler</span> IShape.OnDraw {
        <span style="color: #00ffff;">add</span> {
            <span style="color: #00ffff;">lock</span> (objectLock) {
                PostDrawEvent += value;
            }
        }
        <span style="color: #00ffff;">remove</span> {
            <span style="color: #00ffff;">lock</span> (objectLock) {
                PostDrawEvent -= value;
            }
        }


    }

    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">For the sake of simplicity this one method</span>
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">implements both interfaces.</span>
    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Draw</span> ()
    {
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Raise IDrawingObject's event before the object is drawn.</span>
        <span style="color: #98fb98;">EventHandler</span> <span style="color: #eedd82;">handler</span> = PreDrawEvent;
        <span style="color: #00ffff;">if</span> (handler != <span style="color: #7fffd4;">null</span>) {
            handler (<span style="color: #00ffff;">this</span>, <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">EventArgs</span> ());
        }
        Console.WriteLine (<span style="color: #ffa07a;">"Drawing a shape."</span>);

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">RaiseIShape's event after the object is drawn.</span>
        handler = PostDrawEvent;
        <span style="color: #00ffff;">if</span> (handler != <span style="color: #7fffd4;">null</span>) {
            handler (<span style="color: #00ffff;">this</span>, <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">EventArgs</span> ());
        }
    }
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline92" class="outline-4">
<h4 id="orgheadline92"><span class="section-number-4">1.10.5</span> 异步调用委托</h4>
<div class="outline-text-4" id="text-1-10-5">
<div class="org-src-container">

<pre class="src src-csharp">subDelegate.BeginInvoke (<span style="color: #00ffff;">new</span> <span style="color: #98fb98;">AsyncCallback</span> (<span style="color: #98fb98;">ResultsReturned</span>), subDelegate);
<span style="color: #00ffff;">private</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">ResultsReturned</span> (<span style="color: #98fb98;">IAsyncResult</span> <span style="color: #eedd82;">iar</span>)
{
    <span style="color: #98fb98;">DelegateReturnInt</span> <span style="color: #eedd82;">subDelegate</span> = (DelegateReturnInt)iar.AsyncState;
    <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">result</span> = subDelegate.EndInvoke (iar);
    Console.WriteLine (<span style="color: #ffa07a;">"result = {0}"</span>, result);
}
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline112" class="outline-2">
<h2 id="orgheadline112"><span class="section-number-2">2</span> The CLR and .NET framework</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-orgheadline98" class="outline-3">
<h3 id="orgheadline98"><span class="section-number-3">2.1</span> 程序集和版本控制</h3>
<div class="outline-text-3" id="text-2-1">
<ol class="org-ol">
<li>程序集是一种 Portable Executable 可移植可执行文件。物理上，程序集可以包括一个或多个模块。一个程序集的全部内容会被作为一个部署和重用的单元。一个程序集只会在被调用的时候才会被导入，不被需要时就暂时不会被导入。<br></li>
<li>元数据是一种二进制信息，它被存储在程序集中，用来对程序集中的类型和方法进行描述，并提供其他的一些关于程序集的有用信息。<br></li>
<li>程序集形成安全边界及类型边界。即一个程序集构成了它其中类型定义的作用域范围，类型定义的作用域不能跨越多个程序集。每一类型的标识均包括该类型所驻留的程序集的名称。<br></li>
<li>作为元数据的一部分，每个程序集都有一个清单。它描述着程序集的内容：程序集的标识信息（名称、版本号等），程序集包含的类型和资源列表，程序集包含的模块的列表，描述如何在引用公共类型时映射到包含其声明和实现的代码的信息，以及程序集所依赖的其他程序集的列表。清单就像描述着程序集内容的一份自述地图。<br></li>
</ol>
</div>
<div id="outline-container-orgheadline95" class="outline-4">
<h4 id="orgheadline95"><span class="section-number-4">2.1.1</span> 多模块程序集</h4>
<div class="outline-text-4" id="text-2-1-1">
<ol class="org-ol">
<li>一个包含单一模块的程序集只有一个文件，或者是 EXE 或者是 DLL 文件。这个单一模块包含着程序的所有类型说明和实现代码。程序集的清单也内嵌在这个模块中。<br></li>
<li>一个多模块程序集可能包含多个文件（零个或一个 EXE 文件及零个或多个 DLL 文件，至少一个 EXE 或 DLL 文件）。程序集清单这时可以作为单独的一个文件出现，也可以嵌在某一个模块中。当多模块程序集被引用的时候，运行环境将会先导入包含程序集清单的文件，然后根据清单导入需要的模块。<br></li>
<li>每个模块都有自己的清单，该清单独立于程序集的清单。模块的清单列着这个模块自身对其他程序集的引用。并且任何在这个模块中声明的类型，都会被列在这个和现实代码一道存放的清单中。一个模块还可能包含资源，如一些该模块需要的图片。<br></li>
</ol>
</div>
</div>
<div id="outline-container-orgheadline96" class="outline-4">
<h4 id="orgheadline96"><span class="section-number-4">2.1.2</span> 共享程序集</h4>
<div class="outline-text-4" id="text-2-1-2">
<p>
共享程序集必须满足一些严格的要求：<br>
</p>
<ol class="org-ol">
<li>程序集必须有一个强名称。强名称是全局唯一的。任何人都不会生成和你相同的程序集名称，这是由于用一个私钥生成的程序集的名称和用其他私钥生成的程序集名称不相同。<br></li>
<li>共享程序集必须防止比它更新的版本被错误地当做这个程序集被引用，因此共享程序集的每个新版本在发布的时候都要带一个新的版本号。<br></li>
<li>为了共享该程序集，需要将它放入全局程序集缓存(Global Assembly Cache)中。这是通用语言运行时在文件系统中指定的一块区域，专门用来保存共享程序集。<br></li>
</ol>
</div>
</div>
<div id="outline-container-orgheadline97" class="outline-4">
<h4 id="orgheadline97"><span class="section-number-4">2.1.3</span> 最终解决 DLL 冲突 - 版本控制</h4>
<div class="outline-text-4" id="text-2-1-3">
<p>
在.NET 编程环境中的共享程序集可以由名称和版本号唯一地标识。GAC 允许同一程序集的不同版本“并行执行”，即同一程序集的较老版本和较新版本在 GAC 中可以同时存在。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline102" class="outline-3">
<h3 id="orgheadline102"><span class="section-number-3">2.2</span> 性质</h3>
<div class="outline-text-3" id="text-2-2">
<p>
性质是一种生成元数据的机制。性质是一个对象，它代表着与你的程序中的一个元素相关的数据。而这个有性质的元素被称为性质的目标元素。<br>
</p>
<div class="org-src-container">

<pre class="src src-c#">// 下面是一个类或者一个接口的性质，表示目标类在被导出给 COM 时应该继承自 IUnknown 类而不是 IDispatch 类。(类或接口为目标元素)
[NoIDispatch]

// 下面的性质将元数据插入到程序集中，指定该程序的强名称.(程序集为目标元素)
[assembly: AssemblyKeyFile("c:\\myStrongName.key")]
</pre>
</div>
</div>
<div id="outline-container-orgheadline99" class="outline-4">
<h4 id="orgheadline99"><span class="section-number-4">2.2.1</span> 性质目标</h4>
<div class="outline-text-4" id="text-2-2-1">
<p>
性质的目标可以是程序集、类、接口、类成员等等。<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">名称</th>
<th scope="col" class="org-left">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">All</td>
<td class="org-left">适用于以下任意中元素：程序集、类、构造函数、委托、枚举、事件、域、接口、方法、模块、参数、特性、返回值或者结构</td>
</tr>

<tr>
<td class="org-left">Assembly</td>
<td class="org-left">适用于程序集自身</td>
</tr>

<tr>
<td class="org-left">Class</td>
<td class="org-left">适用于类</td>
</tr>

<tr>
<td class="org-left">Constructor</td>
<td class="org-left">适用于给定的构造函数</td>
</tr>

<tr>
<td class="org-left">Delegate</td>
<td class="org-left">适用于委托</td>
</tr>

<tr>
<td class="org-left">Enum</td>
<td class="org-left">适用于枚举类型</td>
</tr>

<tr>
<td class="org-left">Event</td>
<td class="org-left">适用于事件</td>
</tr>

<tr>
<td class="org-left">Field</td>
<td class="org-left">适用于域</td>
</tr>

<tr>
<td class="org-left">Interface</td>
<td class="org-left">适用于接口</td>
</tr>

<tr>
<td class="org-left">Method</td>
<td class="org-left">适用于方法</td>
</tr>

<tr>
<td class="org-left">Module</td>
<td class="org-left">适用于单个模块</td>
</tr>

<tr>
<td class="org-left">Parameter</td>
<td class="org-left">适用于方法的参数</td>
</tr>

<tr>
<td class="org-left">Property</td>
<td class="org-left">适用于属性</td>
</tr>

<tr>
<td class="org-left">ReturnValue</td>
<td class="org-left">适用于返回值</td>
</tr>

<tr>
<td class="org-left">Struct</td>
<td class="org-left">适用于结构</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-orgheadline100" class="outline-4">
<h4 id="orgheadline100"><span class="section-number-4">2.2.2</span> 性质的使用</h4>
<div class="outline-text-4" id="text-2-2-2">
<p>
性质的使用是通过把它们放在方括号里并且紧放在它们的目标元素之前。（目标是程序集的情况除外，在这种情况下需要把它们放在文件的最头部。）<br>
Tips: 必须把程序集属性放在所有 using 语句之后并且在其他任意代码之前。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline101" class="outline-4">
<h4 id="orgheadline101"><span class="section-number-4">2.2.3</span> 自定义性质</h4>
<div class="outline-text-4" id="text-2-2-3">
<p>
通过继承 System.Attribute 来实现自定义性质。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp">[AttributeUsage (AttributeTargets.Class |
                 AttributeTargets.Constructor |
                 AttributeTargets.Delegate |
                 AttributeTargets.Field |
                 AttributeTargets.Method |
                 AttributeTargets.Property,
                 AllowMultiple = <span style="color: #7fffd4;">true</span>)]
<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">BugFixAttribute</span> : System.<span style="color: #98fb98;">Attribute</span>
{
    <span style="color: #00ffff;">public</span> BugFixAttribute (<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">bugID</span>, <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">programmer</span>, <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">date</span>)
    {
        <span style="color: #00ffff;">this</span>.bugID = bugID;
        <span style="color: #00ffff;">this</span>.programmer = programmer;
        <span style="color: #00ffff;">this</span>.date = date;
    }

    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">comment</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">Comment</span> {
        <span style="color: #00ffff;">get</span>{ <span style="color: #00ffff;">return</span> comment; }
        <span style="color: #00ffff;">set</span>{ comment = value; }
    }

    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">bugID</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">BugID</span>{ <span style="color: #00ffff;">get</span> { <span style="color: #00ffff;">return</span> bugID; } }

    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">programmer</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">Programmer</span>{ <span style="color: #00ffff;">get</span> { <span style="color: #00ffff;">return</span> programmer; } }

    <span style="color: #00ffff;">private</span> <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">date</span>;

    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">Date</span>{ <span style="color: #00ffff;">get</span> { <span style="color: #00ffff;">return</span> date; } }
}

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#19979;&#38754;&#26159;&#20351;&#29992;&#33258;&#23450;&#20041;&#24615;&#36136;&#30340;&#24773;&#20917;</span>
[<span style="color: #98fb98;">BugFix</span> (101, <span style="color: #ffa07a;">"GuoDong"</span>, <span style="color: #ffa07a;">"2016-07-09"</span>)]
[<span style="color: #98fb98;">BugFix</span> (102, <span style="color: #ffa07a;">"GuoDong"</span>, <span style="color: #ffa07a;">"2016-07-10"</span>, Comment = <span style="color: #ffa07a;">"comment 1"</span>)]
<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">MyMath</span>
{
    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">double</span> <span style="color: #87cefa;">DoFunc1</span> (<span style="color: #98fb98;">double</span> <span style="color: #eedd82;">param</span>)
    {
        <span style="color: #00ffff;">return</span> param + <span style="color: #00ffff;">this</span>.DoFunc2 (param);
    }

    [<span style="color: #98fb98;">BugFix</span> (103, <span style="color: #ffa07a;">"GuoDong"</span>, <span style="color: #ffa07a;">"2016-07-11"</span>, Comment = <span style="color: #ffa07a;">"comment x"</span>)]
    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">double</span> DoFunc2 (<span style="color: #98fb98;">double</span> <span style="color: #eedd82;">param</span>)
    {
        <span style="color: #00ffff;">return</span> param / 3;
    }
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline111" class="outline-3">
<h3 id="orgheadline111"><span class="section-number-3">2.3</span> 反射</h3>
<div class="outline-text-3" id="text-2-3">
<p>
反射是指一个程序读取其自身的或其他程序的元数据的过程。一个程序被称为在反射它自身或另一个程序，是指该程序提取被反射程序集的元数据用来提交给用户或改变自身程序行为的过程。<br>
在 Reflection 命名空间的类，以及 System.Type 中的类，提供了对元数据进行检查和交互的支持。<br>
反射一般用于以下四种任务：<br>
</p>
</div>
<div id="outline-container-orgheadline103" class="outline-4">
<h4 id="orgheadline103"><span class="section-number-4">2.3.1</span> 查看元数据</h4>
<div class="outline-text-4" id="text-2-3-1">
<p>
工具或使用程序可以使用它来显示元数据。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp">System.Reflection.<span style="color: #98fb98;">MemberInfo</span> <span style="color: #eedd82;">info</span> = <span style="color: #00ffff;">typeof</span>(MyMath);
<span style="color: #98fb98;">object</span>[] <span style="color: #eedd82;">attri_arr</span> = info.GetCustomAttributes (<span style="color: #00ffff;">typeof</span>(BugFixAttribute), <span style="color: #7fffd4;">false</span>);
<span style="color: #00ffff;">foreach</span> (<span style="color: #98fb98;">object</span> <span style="color: #eedd82;">attri</span> <span style="color: #00ffff;">in</span> attri_arr) {
    <span style="color: #98fb98;">BugFixAttribute</span> <span style="color: #eedd82;">pAttri</span> = (BugFixAttribute)attri;
    Console.WriteLine (<span style="color: #ffa07a;">"\nBugID:      {0}"</span>, pAttri.BugID);
    Console.WriteLine (<span style="color: #ffa07a;">"Programmer: {0}"</span>, pAttri.Programmer);
    Console.WriteLine (<span style="color: #ffa07a;">"Date:       {0}"</span>, pAttri.Date);
    Console.WriteLine (<span style="color: #ffa07a;">"Comment:    {0}"</span>, pAttri.Comment);
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline104" class="outline-4">
<h4 id="orgheadline104"><span class="section-number-4">2.3.2</span> 进行类型发现</h4>
<div class="outline-text-4" id="text-2-3-2">
<p>
这允许你检查程序集中的类型，以及跟这些类型交互或对类型进行实例化。这在创建自定义脚本的时候有用，例如你可能希望允许你的用户使用脚本语言和你的程序<br>
交互。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">Assembly</span> <span style="color: #eedd82;">a</span> = Assembly.Load (<span style="color: #ffa07a;">"mscorlib"</span>);
<span style="color: #98fb98;">Type</span>[] <span style="color: #eedd82;">types</span> = a.GetTypes ();
<span style="color: #00ffff;">foreach</span> (<span style="color: #98fb98;">Type</span> <span style="color: #eedd82;">t</span> <span style="color: #00ffff;">in</span> types)
{
     Console.WriteLine (<span style="color: #ffa07a;">"Type is {0}"</span>, t);
}
Console.WriteLine (<span style="color: #ffa07a;">"{0} types found"</span>, types.Length);
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline105" class="outline-4">
<h4 id="orgheadline105"><span class="section-number-4">2.3.3</span> 对方法和特性的迟绑定</h4>
<div class="outline-text-4" id="text-2-3-3">
<p>
这允许程序员可以调用动态实例化的对象的特性和方法，这也称为动态激活。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline106" class="outline-4">
<h4 id="orgheadline106"><span class="section-number-4">2.3.4</span> 运行期创建类型（反射输出）</h4>
<div class="outline-text-4" id="text-2-3-4">
<p>
对反射的终极使用是在运行期创建新的类型，然后使用这些类型执行任务。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline110" class="outline-4">
<h4 id="orgheadline110"><span class="section-number-4">2.3.5</span> 反射应用实例</h4>
<div class="outline-text-4" id="text-2-3-5">
</div><ol class="org-ol"><li><a id="orgheadline107"></a>反射序列化泛型 Array List Dictionary<br><div class="outline-text-5" id="text-2-3-5-1">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">Type</span> <span style="color: #eedd82;">objType</span> = obj.GetType();
<span style="color: #00ffff;">if</span>(objType.FullName.StartsWith(<span style="color: #ffa07a;">"System.Collections.Generic.List"</span>))
{
    jsonObj = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">JSONArray</span>();
    <span style="color: #98fb98;">Type</span>[] <span style="color: #eedd82;">eType</span> = objType.GetGenericArguments();
    <span style="color: #00ffff;">foreach</span>(<span style="color: #98fb98;">object</span> <span style="color: #eedd82;">temp</span> <span style="color: #00ffff;">in</span> obj <span style="color: #00ffff;">as</span> <span style="color: #98fb98;">IEnumerable</span>)
    {
        jsonObj.Add(SerializeToJSON(temp));
    }
}
<span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span>(objType.FullName.StartsWith(<span style="color: #ffa07a;">"System.Collections.Generic.Dictionary"</span>))
{
    jsonObj = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">JSONObject</span>();
    <span style="color: #98fb98;">Type</span>[] <span style="color: #eedd82;">kvType</span> = objType.GetGenericArguments();
    jsonObj.Add(_JSON_DictKType_Key, kvType[0].FullName);
    jsonObj.Add(_JSON_DictVType_Key, kvType[1].FullName);
    <span style="color: #00ffff;">foreach</span>(<span style="color: #98fb98;">DictionaryEntry</span> <span style="color: #eedd82;">kv</span> <span style="color: #00ffff;">in</span> obj <span style="color: #00ffff;">as</span> <span style="color: #98fb98;">IDictionary</span>)
    {
        jsonObj.Add(kv.Key <span style="color: #00ffff;">as</span> <span style="color: #98fb98;">string</span>, <span style="color: #98fb98;">SerializeToJSON</span>(kv.Value));
    }
}
<span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span>(objType.FullName.EndsWith(<span style="color: #ffa07a;">"[]"</span>))
{
    jsonObj = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">JSONObject</span>();
    <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">arrJsonObj</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">JSONArray</span>();
    <span style="color: #98fb98;">Type</span>[] <span style="color: #eedd82;">eType</span> = objType.GetGenericArguments();
    <span style="color: #00ffff;">foreach</span> (<span style="color: #98fb98;">object</span> <span style="color: #eedd82;">temp</span> <span style="color: #00ffff;">in</span> obj <span style="color: #00ffff;">as</span> <span style="color: #98fb98;">IEnumerable</span>)
    {
        arrJsonObj.Add(SerializeToJSON(temp));
    }
    jsonObj.Add(_JSON_ArrType_Key, arrJsonObj);
}
<span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span>(objType.FullName.StartsWith(<span style="color: #ffa07a;">"System"</span>))
{
    <span style="color: #00ffff;">if</span>(objType == <span style="color: #00ffff;">typeof</span>(<span style="color: #98fb98;">string</span>))
    {
        jsonObj = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">JSONString</span>(obj <span style="color: #00ffff;">as</span> <span style="color: #98fb98;">string</span>);
    }
    <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span>(objType == <span style="color: #00ffff;">typeof</span>(<span style="color: #98fb98;">bool</span>))
    {
        jsonObj = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">JSONBool</span>((<span style="color: #98fb98;">bool</span>)obj);
    }
    <span style="color: #00ffff;">else</span>
    {
        jsonObj = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">JSONNumber</span>(obj.ToString());
    }
}
</pre>
</div>
</div></li>
<li><a id="orgheadline108"></a>反射创建泛型 Array List Dictionary<br><div class="outline-text-5" id="text-2-3-5-2">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">if</span>(jsonObj.Tag == JSONNodeType.Object)
 {
     <span style="color: #98fb98;">JSONObject</span> <span style="color: #eedd82;">tJsonObj</span> = jsonObj <span style="color: #00ffff;">as</span> <span style="color: #98fb98;">JSONObject</span>;
     <span style="color: #00ffff;">if</span>(tJsonObj[_JSON_DictKType_Key]!=<span style="color: #7fffd4;">null</span> &amp;&amp; tJsonObj[_JSON_DictVType_Key]!=<span style="color: #7fffd4;">null</span>)
     {
         <span style="color: #98fb98;">Type</span> <span style="color: #eedd82;">kType</span> = Type.GetType(tJsonObj[_JSON_DictKType_Key]);
         <span style="color: #98fb98;">Type</span> <span style="color: #eedd82;">vType</span> = Type.GetType(tJsonObj[_JSON_DictVType_Key]);
         <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">dictType</span> = <span style="color: #00ffff;">typeof</span>(Dictionary&lt;,&gt;).MakeGenericType(kType, vType);
         obj = Activator.CreateInstance(dictType);
         <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">dictAddFunc</span> = dictType.GetMethod(<span style="color: #ffa07a;">"Add"</span>, <span style="color: #00ffff;">new</span>[] { kType, vType });
         <span style="color: #00ffff;">foreach</span>(KeyValuePair&lt;<span style="color: #98fb98;">string</span>, JSONNode&gt; kv <span style="color: #00ffff;">in</span> tJsonObj)
         {
             <span style="color: #00ffff;">if</span>(kv.Key != _JSON_DictKType_Key &amp;&amp; kv.Key!=_JSON_DictVType_Key)
             {
                 <span style="color: #98fb98;">object</span> <span style="color: #eedd82;">dictK</span> = <span style="color: #7fffd4;">null</span>;
                 <span style="color: #00ffff;">if</span>(kType != <span style="color: #00ffff;">typeof</span>(<span style="color: #98fb98;">string</span>))
                 {
                     dictK = Convert.ChangeType(kv.Value, kType);
                 }
                 <span style="color: #00ffff;">else</span>
                 {
                     dictK = kv.Key;
                 }
                 <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">dictV</span> = DeserializeFromJSON(kv.Value);
                 dictAddFunc.Invoke(obj, <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">object</span>[] {dictK, dictV});
             }
         }
     }
     <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span>(tJsonObj[_JSON_CustomType_Key]!=<span style="color: #7fffd4;">null</span>)
     {
         <span style="color: #98fb98;">Type</span> <span style="color: #eedd82;">objType</span> = Type.GetType(tJsonObj[_JSON_CustomType_Key]);
         obj = Activator.CreateInstance(objType);
         <span style="color: #00ffff;">foreach</span> (KeyValuePair&lt;<span style="color: #98fb98;">string</span>, JSONNode&gt; kv <span style="color: #00ffff;">in</span> tJsonObj)
         {
             <span style="color: #00ffff;">if</span> (kv.Key != _JSON_CustomType_Key)
             {
                 <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">objV</span> = DeserializeFromJSON(kv.Value);
                 <span style="color: #98fb98;">FieldInfo</span> <span style="color: #eedd82;">fieldInfo</span> = objType.GetField(kv.Key, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                 <span style="color: #00ffff;">if</span>(fieldInfo != <span style="color: #7fffd4;">null</span>)
                 {
                     objV = Convert.ChangeType(objV, fieldInfo.FieldType);
                     fieldInfo.SetValue(obj, objV);
                 }
                 <span style="color: #00ffff;">else</span>
                 {
                     <span style="color: #98fb98;">PropertyInfo</span> <span style="color: #eedd82;">propInfo</span> = objType.GetProperty(kv.Key, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                     <span style="color: #00ffff;">if</span>(propInfo!=<span style="color: #7fffd4;">null</span>)
                     {
                         propInfo.SetValue(obj, objV, <span style="color: #7fffd4;">null</span>);
                     }
                     <span style="color: #00ffff;">else</span>
                     {
                         Debug.LogError(objType.FullName + <span style="color: #ffa07a;">"not exist property "</span> + kv.Key);
                     }
                 }
             }
         }
     }
     <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span>(tJsonObj[_JSON_ArrType_Key]!=<span style="color: #7fffd4;">null</span>)
     {
         <span style="color: #98fb98;">Array</span> <span style="color: #eedd82;">arrObj</span> = <span style="color: #7fffd4;">null</span>;
         <span style="color: #98fb98;">JSONArray</span> <span style="color: #eedd82;">arrJsonObj</span> = tJsonObj[_JSON_ArrType_Key] <span style="color: #00ffff;">as</span> <span style="color: #98fb98;">JSONArray</span>;
         <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">idx</span> = 0;
         <span style="color: #00ffff;">foreach</span>(<span style="color: #98fb98;">JSONNode</span> <span style="color: #eedd82;">v</span> <span style="color: #00ffff;">in</span> arrJsonObj)
         {
             <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">elem</span> = DeserializeFromJSON(v);
             <span style="color: #00ffff;">if</span>(arrObj == <span style="color: #7fffd4;">null</span>)
             {
                 <span style="color: #98fb98;">Type</span> <span style="color: #eedd82;">elemType</span> = elem.GetType();
                 arrObj = Array.CreateInstance(elemType,arrJsonObj.Count);
             }
             arrObj.SetValue(elem, idx++);
         }
         obj = arrObj;
     }
     <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span>(tJsonObj[_JSON_ListType_Key]!=<span style="color: #7fffd4;">null</span>)
     {
         <span style="color: #98fb98;">JSONArray</span> <span style="color: #eedd82;">arrJsonObj</span> = tJsonObj[_JSON_ListType_Key] <span style="color: #00ffff;">as</span> <span style="color: #98fb98;">JSONArray</span>;
         <span style="color: #98fb98;">MethodInfo</span> <span style="color: #eedd82;">listAddFunc</span> = <span style="color: #7fffd4;">null</span>;
         <span style="color: #00ffff;">foreach</span>(<span style="color: #98fb98;">JSONNode</span> <span style="color: #eedd82;">v</span> <span style="color: #00ffff;">in</span> arrJsonObj)
         {
             <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">elem</span> = DeserializeFromJSON(v);
             <span style="color: #00ffff;">if</span>(obj==<span style="color: #7fffd4;">null</span>)
             {
                 <span style="color: #98fb98;">Type</span> <span style="color: #eedd82;">elemType</span> = elem.GetType();
                 <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">listType</span> = <span style="color: #00ffff;">typeof</span>(<span style="color: #98fb98;">List</span>&lt;&gt;).MakeGenericType(elemType);
                 listAddFunc = listType.GetMethod(<span style="color: #ffa07a;">"Add"</span>, <span style="color: #00ffff;">new</span>[] {elemType});
                 obj = Activator.CreateInstance(listType);
             }
             listAddFunc.Invoke(obj, <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">object</span>[] {elem});
         }
     }
 }
</pre>
</div>
</div></li>
<li><a id="orgheadline109"></a>反射序列化 其他程序集类<br><div class="outline-text-5" id="text-2-3-5-3">
<div class="org-src-container">

<pre class="src src-csharp">jsonObj = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">JSONObject</span>();
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#27880;&#24847;&#65306;&#24517;&#39035;&#20351;&#29992; AssemblyQualifiedName &#26080;&#27861;&#26681;&#25454; FullName &#33719;&#21462;&#21040;&#20854;&#20182;&#31243;&#24207;&#38598;&#30340;&#31867;</span>
jsonObj.Add(_JSON_CustomType_Key, objType.AssemblyQualifiedName);
</pre>
</div>
</div></li></ol>
</div>
</div>
</div>

<div id="outline-container-orgheadline128" class="outline-2">
<h2 id="orgheadline128"><span class="section-number-2">3</span> Tips</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-orgheadline113" class="outline-3">
<h3 id="orgheadline113"><span class="section-number-3">3.1</span> 类型转换</h3>
<div class="outline-text-3" id="text-3-1">
<p>
类型 <a href="https://msdn.microsoft.com/zh-cn/library/ms173104.aspx" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/ms173104.aspx</a><br>
如何将字符串转换为数字 <a href="https://msdn.microsoft.com/zh-cn/library/bb397679.aspx" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/bb397679.aspx</a><br>
类型转换相关文档 <a href="https://msdn.microsoft.com/zh-cn/library/ms173105.aspx" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/ms173105.aspx</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline114" class="outline-3">
<h3 id="orgheadline114"><span class="section-number-3">3.2</span> static const readonly</h3>
<div class="outline-text-3" id="text-3-2">
<p>
static 修饰符可用于类、字段、方法、属性、运算符、事件和构造函数，但不能用于索引器、析构函数或类以外的类型。<br>
const 指定字段或局部变量的值是常数，不能被修改。被指定为 const 的变量，其初始值是在编译期计算的。<br>
readonly 指定字段或局部变量的值为常数，不能被修改。被指定为 readonly 的变量，其初始值是在运行时计算的。<br>
Tips：<br>
static 不支持局部变量，只能用类的静态字段来代替 c++中的局部静态变量。<br>
const 字段只能在该字段的声明中初始化。<br>
readonly 字段可以在声明或构造函数中初始化。因此，根据所使用的构造函数，readonly 字段可能具有不同的值。<br>
const 字段会被当做静态成员变量，所以不必要也不允许为该字段添加 static 修饰符。<br>
</p>

<p>
数组的初始化器是在运行时执行的，所以无法定义一个 const 数组并用指定的值初始化它。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">GStaticMember</span>
{
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">const_imember_0</span> = 10;
    <span style="color: #00ffff;">public</span> <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">int</span>[] <span style="color: #eedd82;">int_arr</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">int</span>[3]{1,2,3}; <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#32534;&#35793;&#38169;&#35823;&#25552;&#31034;&#21482;&#33021;&#29992; null &#21021;&#22987;&#21270;&#12290;</span>
}
<span style="color: #eedd82;">GStaticMember</span> member = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">GStaticMember</span> ();
<span style="color: #ff0000;">//</span><span style="color: #ff0000;">Console.WriteLine ("const_imember_0 = {0}", member.const_imember_0);       // &#32534;&#35793;&#38169;&#35823;&#65292;&#19981;&#20801;&#35768;&#36890;&#36807;&#23545;&#35937;&#35775;&#38382;&#38745;&#24577;&#23383;&#27573;</span>
Console.WriteLine (<span style="color: #ffa07a;">"const_imember_0 = {0}"</span>, GStaticMember.const_imember_0);
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline118" class="outline-3">
<h3 id="orgheadline118"><span class="section-number-3">3.3</span> 装箱和拆箱</h3>
<div class="outline-text-3" id="text-3-3">
</div><div id="outline-container-orgheadline115" class="outline-4">
<h4 id="orgheadline115"><span class="section-number-4">3.3.1</span> 装箱过程</h4>
<div class="outline-text-4" id="text-3-3-1">
<ol class="org-ol">
<li>在堆中申请内存，内存大小为值类型的大小，再加上额外固定空间（引用类型的标配：TypeHandle 和同步索引块）；<br></li>
<li>将值类型的字段值（x=1023）拷贝新分配的内存中；<br></li>
<li>返回新引用对象的地址（给引用变量 object o）<br></li>
</ol>
</div>
</div>
<div id="outline-container-orgheadline116" class="outline-4">
<h4 id="orgheadline116"><span class="section-number-4">3.3.2</span> 拆箱过程</h4>
<div class="outline-text-4" id="text-3-3-2">
<ol class="org-ol">
<li>检查实例对象（object o）是否有效，如是否为 null，其装箱的类型与拆箱的类型（int）是否一致，如检测不合法，抛出异常；<br></li>
<li>指针返回，就是获取装箱对象（object o）中值类型字段值的地址；<br></li>
<li>字段拷贝，把装箱对象（object o）中值类型字段值拷贝到栈上，意思就是创建一个新的值类型变量来存储拆箱后的值；<br></li>
</ol>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">iValue</span> = 10;
<span style="color: #ff0000;">//</span><span style="color: #ff0000;">Boxing int value</span>
<span style="color: #98fb98;">object</span> <span style="color: #eedd82;">oValue</span> = iValue;
Console.WriteLine(<span style="color: #ffa07a;">"Unboxing oValue result = "</span> + (<span style="color: #98fb98;">int</span>)oValue);
<span style="color: #ff0000;">//</span><span style="color: #ff0000;">ERROR &#22312;&#25191;&#34892;&#21040;&#19979;&#38754;&#36825;&#21477;&#20195;&#30721;&#26102;&#65292;&#20250;&#25253;&#38169;&#65292;&#25552;&#31034;&#38750;&#27861;&#30340;&#31867;&#22411;&#36716;&#25442;</span>
<span style="color: #98fb98;">float</span> <span style="color: #eedd82;">fValue</span> = (<span style="color: #98fb98;">float</span>)oValue;
Console.WriteLine(<span style="color: #ffa07a;">"Unboxing oValue result = "</span> + fValue);
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline117" class="outline-4">
<h4 id="orgheadline117"><span class="section-number-4">3.3.3</span> 优化</h4>
<div class="outline-text-4" id="text-3-3-3">
<p>
使用显式的装箱操作来减少多余的装箱操作<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> = 100;
<span style="color: #98fb98;">ArrayList</span> <span style="color: #eedd82;">arr</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ArrayList</span>(3);
arr.Add(x);
arr.Add(x);
arr.Add(x);

<span style="color: #ff0000;">//</span><span style="color: #ff0000;">&#19978;&#38754;&#30340;&#20195;&#30721;&#21487;&#20197;&#20248;&#21270;&#20026;</span>
<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> = 100;
<span style="color: #98fb98;">ArrayList</span> <span style="color: #eedd82;">arr</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ArrayList</span>(3);
<span style="color: #98fb98;">object</span> <span style="color: #eedd82;">o</span> = x;
arr.Add(o);
arr.Add(o);
arr.Add(o);
</pre>
</div>
<p>
使用泛型集合类可以避免装箱操作<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline119" class="outline-3">
<h3 id="orgheadline119"><span class="section-number-3">3.4</span> 编码规范</h3>
<div class="outline-text-3" id="text-3-4">
<p>
<a href="https://msdn.microsoft.com/zh-cn/library/ff926074" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/ff926074</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline120" class="outline-3">
<h3 id="orgheadline120"><span class="section-number-3">3.5</span> override overload overwrite</h3>
<div class="outline-text-3" id="text-3-5">
<p>
override  在 C#中实现多态时需要使用 override 关键字来覆盖父类的方法<br>
overload  表示类中同名函数，不同参数，c#重载中不需要关键字，c#中没有 overload 关键字<br>
overwrite 表示重新实现从父类派生而来的方法，需要关键字 new。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline121" class="outline-3">
<h3 id="orgheadline121"><span class="section-number-3">3.6</span> Dictionary 遍历删除</h3>
<div class="outline-text-3" id="text-3-6">
<p>
不能直接遍历 Keys 进行删除,删除元素会修改 Keys 内容，导致 foreach 出错<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#38169;&#35823;&#30340;&#26041;&#27861; &#36816;&#34892;&#26102;&#20250;&#25243;&#20986;&#24322;&#24120;</span>
<span style="color: #00ffff;">foreach</span> (<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">key</span> <span style="color: #00ffff;">in</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">int</span>&gt;(dict.Keys)) {
    <span style="color: #00ffff;">if</span> (key == 1 || key==2) dict.Remove(key);
}

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#27491;&#30830;&#30340;&#26041;&#27861;</span>
<span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">int</span>&gt; <span style="color: #eedd82;">needRemoveKeys</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">int</span>&gt;();
<span style="color: #00ffff;">foreach</span> (<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">key</span> <span style="color: #00ffff;">in</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">List</span>&lt;<span style="color: #98fb98;">int</span>&gt;(dict.Keys)) {
    <span style="color: #00ffff;">if</span> (key == 1 || key==2) needRemoveKeys.Add(key);
}
<span style="color: #00ffff;">foreach</span> (<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">key</span> <span style="color: #00ffff;">in</span> needRemoveKeys) {
    dict.Remove(key);
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline123" class="outline-3">
<h3 id="orgheadline123"><span class="section-number-3">3.7</span> Tools</h3>
<div class="outline-text-3" id="text-3-7">
</div><div id="outline-container-orgheadline122" class="outline-4">
<h4 id="orgheadline122"><span class="section-number-4">3.7.1</span> mono 版 ILDASM 为 monodis</h4>
<div class="outline-text-4" id="text-3-7-1">
<p>
<a href="http://stackoverflow.com/questions/1655767/does-mono-have-the-equivalent-of-ildasm" target="_blank" rel="external">http://stackoverflow.com/questions/1655767/does-mono-have-the-equivalent-of-ildasm</a><br>
<a href="http://www.mono-project.com/docs/tools+libraries/tools/monodis/" target="_blank" rel="external">http://www.mono-project.com/docs/tools+libraries/tools/monodis/</a><br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline127" class="outline-3">
<h3 id="orgheadline127"><span class="section-number-3">3.8</span> GetMethod 无法获取父类中定义的方法</h3>
<div class="outline-text-3" id="text-3-8">
</div><div id="outline-container-orgheadline124" class="outline-4">
<h4 id="orgheadline124"><span class="section-number-4">3.8.1</span> 情况 1</h4>
<div class="outline-text-4" id="text-3-8-1">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">BindingFlags.FlattenHierarchy &#34920;&#31034;&#36820;&#22238;&#32487;&#25215;&#32780;&#26469;&#30340;&#26041;&#27861; - &#21482;&#36820;&#22238;&#29238;&#31867;&#20013;&#30340; public &#21644; protected &#26041;&#27861;</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">BindingFlags.Instance &#34920;&#31034;&#36820;&#22238;&#23454;&#20363;&#26041;&#27861;</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">BindingFlags.Static &#34920;&#31034;&#36820;&#22238;&#38745;&#24577;&#26041;&#27861;</span>
<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">flags</span> = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy | BindingFlags.Instance;
<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">deserializeMethod</span> = type.GetMethod(<span style="color: #ffa07a;">"DeserializeTable"</span>, flags);
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline125" class="outline-4">
<h4 id="orgheadline125"><span class="section-number-4">3.8.2</span> 情况 2</h4>
<div class="outline-text-4" id="text-3-8-2">
<p>
检查 DeserializeTable 是否为 public 或 protected 方法<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline126" class="outline-4">
<h4 id="orgheadline126"><span class="section-number-4">3.8.3</span> 情况 3</h4>
<div class="outline-text-4" id="text-3-8-3">
<p>
函数名相同，参数不同时，获取特定函数需要指定该函数的参数类型。<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp">deserializeMethod = tblMgrType.GetMethod(<span style="color: #ffa07a;">"DeserializeTable"</span>, flags, <span style="color: #7fffd4;">null</span>, <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Type</span>[] { <span style="color: #00ffff;">typeof</span>(<span style="color: #98fb98;">byte</span>[]) }, <span style="color: #7fffd4;">null</span>);
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline129" class="outline-2">
<h2 id="orgheadline129"><span class="section-number-2">4</span> 参考资料</h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="http://www.cnblogs.com/anding/p/5226343.html" target="_blank" rel="external">http://www.cnblogs.com/anding/p/5226343.html</a><br>
</p>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> language </category>
            
        </categories>
        
        
        <tags>
            
            <tag> language </tag>
            
            <tag> csharp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Special Folders]]></title>
      <url>http://wolfand11.coding.me/2016/09/23/unity/UnityDoc-SpecialFolders/</url>
      <content type="html"><![CDATA[

<p>
这是一篇译文，原文地址：<br>
(1) <a href="https://docs.unity3d.com/Manual/SpecialFolders.html" target="_blank" rel="external">https://docs.unity3d.com/Manual/SpecialFolders.html</a><br>
(2) <a href="https://docs.unity3d.com/Manual/ScriptCompileOrderFolders.html" target="_blank" rel="external">https://docs.unity3d.com/Manual/ScriptCompileOrderFolders.html</a><br>
(3) <a href="https://docs.unity3d.com/Manual/StreamingAssets.html" target="_blank" rel="external">https://docs.unity3d.com/Manual/StreamingAssets.html</a><br>
</p>

<a id="more"></a>

<div id="outline-container-orgheadline10" class="outline-2">
<h2 id="orgheadline10"><span class="section-number-2">1</span> Special folder names</h2>
<div class="outline-text-2" id="text-1">
<p>
在大多数情况下你可以为你创建的文件夹选择任何你喜欢的名称来组织你的项目。然而，有一些文件夹名称会被 Unity 解析为一种指示，这些文件中的内容应该以特殊的方式被对待。例如，编辑器脚本必须放置在名为“Editor”的文件夹中从而才能正常工作。Unity 所使用的特殊的文件夹名称列表在下面给出。<br>
</p>
</div>
<div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> Assets</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Assets 文件夹是主文件夹，其包含了可以被 Unity 项目使用的资源。项目视图中的内容直接和 Assets 文件夹下的内容对应。大多数 API 函数假定一切懂在 Assets 文件夹中，所以他们不需要显示地提及。然而，一些函数则需要 Assets 目录作为 pathname 的一部分被包含（例如，AssetDatabase 类中的特定函数）<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2"><span class="section-number-3">1.2</span> Editor</h3>
<div class="outline-text-3" id="text-1-2">
<p>
Editor 目录（或者其子目录）下的所有脚本都被当作编辑器脚本而不是运行时脚本。在开发过程中，这些脚本被设计出来为 Unity 本身添加功能，而在最终完成的游戏中是不可用的。在项目中可以使用多个 Editor 文件夹，但是需要注意的是，给定 Editor 文件夹的确切位置会影响其中脚本相对于其他脚本的编译时机。在文档 <a href="#orgtarget1">2</a> 中对此有详细描述。<br>
注意：Unity 将不允许从 MonoBehaviour 派生的组件被赋予 GameObjects，如果该脚本在 Editor 文件夹中。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3"><span class="section-number-3">1.3</span> Editor default resources</h3>
<div class="outline-text-3" id="text-1-3">
<p>
编辑器脚本可以在使用资源文件时，用 EditorGUIUtility.Load 函数来按需加载。这个函数将会在一个名为 Editor Default Resources 的文件夹中查找资源文件。Editor Default Resources 文件夹应该被直接放在 Assets 文件夹中。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4"><span class="section-number-3">1.4</span> Gizmos</h3>
<div class="outline-text-3" id="text-1-4">
<p>
Unity 的 Gizmos 允许你加图形到场景视图中来帮助可视化设计,否则其将是不可见的（例如，灯光图标、摄像机图标等）。Gizmos.DrawIcon 函数会将一个图标放置到场景中来表示一个特殊对象或位置的标记。画这个图标使用的图片文件必须放置在一个叫做 Gizmos 的文件夹中，为了让 DrawIcon 函数可以定位。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5"><span class="section-number-3">1.5</span> Plugins</h3>
<div class="outline-text-3" id="text-1-5">
<p>
Unity 允许你添加插件到项目来扩充可使用的特性。插件通常是用 C/C++写的本机 DLLs。他们可以访问第三方代码库，系统调用以及其他的在 Unity 中没有提供的东西。Plugins 必须被放在一个叫做 Plugins 的目录下，这样才能被 Unity 检测到，并且就像 Editor 文件夹，这影响了其中脚本的编译。在文档 <a href="#orgtarget1">2</a> 中对此有详细描述。在文档 <a href="https://docs.unity3d.com/Manual/PluginInspector.html" target="_blank" rel="external">Plugin Inspector</a> 中包含了关于插件的平台控制。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline6" class="outline-3">
<h3 id="orgheadline6"><span class="section-number-3">1.6</span> Resources</h3>
<div class="outline-text-3" id="text-1-6">
<p>
通常，你在场景中创建资源的实例用于在游戏中使用，但是 Unity 也支持让你在需要的时候通过脚本来加载资源。为了这样做需要将资源放在 Resources 或其子目录下（你可以有任何数量的 Resources 文件夹并且可以放在项目的任何地方）。这些资源就可以通过 Resources.Load 函数来加载了。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline7" class="outline-3">
<h3 id="orgheadline7"><span class="section-number-3">1.7</span> Standard Assets</h3>
<div class="outline-text-3" id="text-1-7">
<p>
当你导入一个标准资源包（Menu:Assets-&gt;Import Package）时，资源会被放置在一个叫做“Standard Assets”的目录下。除了包含这些资源，这些文件夹也会对脚本编译顺序造成影响；在文档 <a href="#orgtarget1">Special Folders and Script Compilation Order</a> 中对此有详细描述。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline8" class="outline-3">
<h3 id="orgheadline8"><span class="section-number-3">1.8</span> StreamingAssets</h3>
<div class="outline-text-3" id="text-1-8">
<p>
大多数游戏资源都会直接合并到内置 player 中，但是有些情况下，你希望资源可以是原始格式的一个分离的文件。例如，在 iOS 上播放一个视频，你必须从文件系统访问视频文件，而不是将它当作一个 MovieTexture 来使用。如果你将一个文件放到名称为 StreamingAssets 的文件夹中，它将被原样复制到目标机器，在那儿可以从一个特定的文件夹访问。在文档 <a href="#orgtarget2">Streaming Assets</a> 中有进一步说明。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline9" class="outline-3">
<h3 id="orgheadline9"><span class="section-number-3">1.9</span> Hidden Assets</h3>
<div class="outline-text-3" id="text-1-9">
<p>
在导入处理过程中 Unity 完全忽略 Assets 文件夹(或其子目录)中的下列文件和文件夹:<br>
</p>
<ul class="org-ul">
<li>以 ‘.’ 开始的文件和文件夹<br></li>
<li>以 ‘~’ 结尾的文件和文件夹<br></li>
<li>名为 ‘cvs’ 的文件和文件夹<br></li>
<li>包含 ‘tmp’ 后缀的文件和文件<br></li>
</ul>
<p>
这是为了防止导入特定的由操作系统创建的或其他应用创建的临时文件<br>
</p>
</div>
</div>
</div>

<div id="outline-container-orgheadline11" class="outline-2">
<h2 id="orgheadline11"><span class="section-number-2">2</span> Special Folders and Script Compilation Order</h2>
<div class="outline-text-2" id="text-2">
<p>
<a id="orgtarget1"></a><br>
</p>

<p>
在大多数情况下你可以为你项目中的文件夹选择任何你喜欢的名称，但是 Unity 保留了一些文件夹名称来指示其内容有特殊目的。这些文件夹中的一些会对脚本的编译有影响。从本质上讲，脚本的编译一共有 4 个分开的阶段，脚本将在那个阶段被编译是由它的父文件夹所决定的。<br>
</p>

<p>
这在一个脚本必须引用其他脚本定义的类的情况下很显著。基本的规则是任何当前不能被引用的将在随后的阶段被编译。任何在当前阶段或更早阶段编译的是完全可用的。<br>
</p>

<p>
另一种情况发生在，当使用一种语言写的脚本必须引用使用另一种语言写的类时（例如，一个 UnityScript 文件声明了一个 C#脚本定义的类的变量）。这里的规则是被引用的类必须在更早的阶段被编译。<br>
</p>

<p>
编译的所有阶段如下：<br>
</p>

<ul class="org-ul">
<li>阶段 1: Standard Assets/Pro Standard Assets/Plugins 文件夹下的运行时脚本被编译<br></li>
<li>阶段 2: 在顶层文件夹 Standard Assets/Pro Standard Assets/Plugins 下的 Editor 文件夹中的编辑器脚本被编译<br></li>
<li>阶段 3: 所有不在 Editor 文件夹下的脚本被编译<br></li>
<li>阶段 4: 所有剩余的脚本（例如，在 Editor 文件夹下的脚本）被编译<br></li>
</ul>
<p>
一个常见的例子是 UnityScript 文件需要引用一个定义在 C#文件中的类。你可以通过下面方法到底这个目的，将 C#文件放置到 Plugins 文件夹中并且将 UnityScript 放置在一个非特殊的文件夹中。如果你不这么做，你讲会获得一个错误，提示 C#类不能被找到.<br>
</p>

<p>
Note:<br>
Standard Assets 文件夹只在 Assets 根目录下才可用。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline13" class="outline-2">
<h2 id="orgheadline13"><span class="section-number-2">3</span> Streaming Assets</h2>
<div class="outline-text-2" id="text-3">
<p>
<a id="orgtarget2"></a><br>
大多数游戏资源都会直接合并到项目当其被构建的时候。然而，有时候将文件放到目标机器的普通的文件系统上从而可以通过路径名来访问它将非常有用。这种情况的一个例子是部署一个视频文件到 iOS 设备上。通过 PlayMovie 函数播放的原始视频文件必须可以在文件系统的一个地方可用。<br>
</p>

<p>
任何被放到 Unity 项目中 StreamingAssets（大小写敏感）文件夹下的文件将被一字不差地复制到目标机器。你可以使用 Application.streamingAssetsPath 属性来获取该文件夹。最好是通过 Application.streamingAssetsPath 来获取 SteamingAssets 文件夹，因为它将总是指向应用程序运行平台上的正确路径。<br>
</p>

<p>
在每个平台上该文件夹的路径都是不同的。请注意这些路径都是大小写敏感的：<br>
</p>
<ul class="org-ul">
<li>在桌面电脑（Mac OS 或 Windows）上文件的路径可以通过下面的代码来获取<br></li>
</ul>
<pre class="example">
path = Application.dataPath + "/StreamingAssets";
</pre>
<ul class="org-ul">
<li>在 iOS 平台上使用<br></li>
</ul>
<pre class="example">
path = Application.dataPath + "/Raw";
</pre>
<ul class="org-ul">
<li>在 Android 平台上使用<br></li>
</ul>
<pre class="example">
path = "jar:file://" + Application.dataPath + "!/assets/";
</pre>
<p>
在 Android 平台上，文件都被包含在一个.jar 压缩文件中（该文件本质上讲和标准的 zip 压缩文件格式相同）。这意味着如果你不使用 Unity 的 WWW 类来获取文件，你需要额外的软件来查看.jar 文档的内部并获取这个文件。<br>
</p>
</div>

<div id="outline-container-orgheadline12" class="outline-3">
<h3 id="orgheadline12"><span class="section-number-3">3.1</span> 注意：</h3>
<div class="outline-text-3" id="text-3-1">
<ol class="org-ol">
<li>StreamingAssets 文件夹下的.dll 文件不参与编译。<br></li>
<li>文件夹名称为“StreamingAssets”中间没有空格。<br></li>
</ol>
</div>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> unity </category>
            
        </categories>
        
        
        <tags>
            
            <tag> unity </tag>
            
            <tag> unity-doc </tag>
            
            <tag> working-in-unity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Init My Core]]></title>
      <url>http://wolfand11.coding.me/2016/09/08/tools/InitMyCore/</url>
      <content type="html"><![CDATA[

<div id="outline-container-orgheadline49" class="outline-2">
<h2 id="orgheadline49"><span class="section-number-2">1</span> InitEmacs</h2>
<div class="outline-text-2" id="text-1">
<a id="more"></a>
</div>
<div id="outline-container-orgheadline31" class="outline-3">
<h3 id="orgheadline31"><span class="section-number-3">1.1</span> 准备工作</h3>
<div class="outline-text-3" id="text-1-1">
</div><div id="outline-container-orgheadline1" class="outline-4">
<h4 id="orgheadline1"><span class="section-number-4">1.1.1</span> 安装 emacs</h4>
<div class="outline-text-4" id="text-1-1-1">
<p>
emacs 安装参考: <a href="http://emacs.sexy/" target="_blank" rel="external">http://emacs.sexy/</a><br>
</p>
<ul class="org-ul">
<li>windows<br></li>
</ul>
<p>
<a href="http://emacsbinw64.sourceforge.net/" target="_blank" rel="external">http://emacsbinw64.sourceforge.net/</a><br>
</p>
<ul class="org-ul">
<li>osx<br></li>
</ul>
<p>
<a href="https://emacsformacosx.com/" target="_blank" rel="external">https://emacsformacosx.com/</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-4">
<h4 id="orgheadline2"><span class="section-number-4">1.1.2</span> 安装字体</h4>
<div class="outline-text-4" id="text-1-1-2">
<p>
SourceCodePro<br>
微软雅黑<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-4">
<h4 id="orgheadline3"><span class="section-number-4">1.1.3</span> Windows 设置 HOME 环境变量</h4>
<div class="outline-text-4" id="text-1-1-3">
<p>
设置 HOME 环境变量为 D:\<br>
emacs 配置会放置到 D:/Documents/MyCore 下面<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline5" class="outline-4">
<h4 id="orgheadline5"><span class="section-number-4">1.1.4</span> Windows 安装 cgwin</h4>
<div class="outline-text-4" id="text-1-1-4">
<p>
安装 cgwin 到 d:/Applications/cygwin 目录下.<br>
安装 cgwin 时选择安装 apt-cyg，apt-cyg 类似 apt-get 可用于安装其他软件<br>
<a href="https://github.com/transcode-open/apt-cyg" target="_blank" rel="external">https://github.com/transcode-open/apt-cyg</a><br>
安装 cgwin 时选择安装 git find grep lua 插件<br>
</p>
<pre class="example">
spacemacs 会用到 git
emacs 的完整功能会用到 find grep
</pre>
</div>
<ol class="org-ol"><li><a id="orgheadline4"></a>cgwin 安装<br><div class="outline-text-5" id="text-1-1-4-1">
<p>
网易 cgwin 源<br>
<a href="http://mirrors.163.com/cygwin/" target="_blank" rel="external">http://mirrors.163.com/cygwin/</a><br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline6" class="outline-4">
<h4 id="orgheadline6"><span class="section-number-4">1.1.5</span> pip 安装</h4>
<div class="outline-text-4" id="text-1-1-5">
<p>
使用 python layer 需要安装 pip<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline23" class="outline-4">
<h4 id="orgheadline23"><span class="section-number-4">1.1.6</span> TAGS 支持</h4>
<div class="outline-text-4" id="text-1-1-6">
</div><ol class="org-ol"><li><a id="orgheadline12"></a>ctags 支持<br><ol class="org-ol"><li><a id="orgheadline8"></a>Universal Ctags<br><div class="outline-text-6" id="text-1-1-6-1-1">
<p>
<a href="https://github.com/universal-ctags/ctags" target="_blank" rel="external">https://github.com/universal-ctags/ctags</a><br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline7"></a>windows<br><div class="outline-text-7" id="text-1-1-6-1-1-1">
<p>
下面地址可以在线编译 universal-ctags 并下载编译好的文件。<br>
<a href="https://ci.appveyor.com/project/masatake/ctags/branch/master/job/yjgxuou78st55ik4/artifacts" target="_blank" rel="external">https://ci.appveyor.com/project/masatake/ctags/branch/master/job/yjgxuou78st55ik4/artifacts</a><br>
</p>
</div></li></ol></li>
<li><a id="orgheadline11"></a>Exuberant Ctags<br><div class="outline-text-6" id="text-1-1-6-1-2">
<p>
以后可以考虑放弃 Exuberant Ctags 了<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline9"></a>osx 配置<br><div class="outline-text-7" id="text-1-1-6-1-2-1">
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">Exuberant Ctags </span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">step 1 install Exuberant Ctags </span>
brew install ctags
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">step 2 check ctags version</span>
ctags --version
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">==&gt; Exuberant Ctags 5.8, Copyright (C) 1996-2009 Darren Hiebert</span>
which ctags
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">==&gt; /opt/local/bin/ctags</span>
</pre>
</div>
</div></li>
<li><a id="orgheadline10"></a>windows<br><div class="outline-text-7" id="text-1-1-6-1-2-2">
<p>
百度云里面去找 ctags58.zip<br>
</p>
</div></li></ol></li></ol></li>
<li><a id="orgheadline15"></a>etags 支持<br><div class="outline-text-5" id="text-1-1-6-2">
<p>
etags 比较弱可以放弃不用<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline13"></a>osx 配置<br><div class="outline-text-6" id="text-1-1-6-2-1">
<p>
使用 brew 进行安装<br>
使用 which/where 查看 etags 路径<br>
</p>
</div></li>
<li><a id="orgheadline14"></a>windows<br><div class="outline-text-6" id="text-1-1-6-2-2">
<p>
windows 下 ctags 放置在 D:\Applications\emacs\bin,在 PATH 环境变量中添加该路径即可,需要注意的是该配置要放到自己安装的 ctags 路径之后，否则会默认使用 emacs 目录下的 ctags。<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline22"></a>gtags 支持<br><ol class="org-ol"><li><a id="orgheadline20"></a>global<br><ol class="org-ol"><li><a id="orgheadline16"></a>安装<br><div class="outline-text-7" id="text-1-1-6-3-1-1">
<p>
osx 下安装<br>
</p>
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">step 1 install GNU GLOBAL</span>
brew install global
<span style="color: #ff0000;">#</span><span style="color: #ff0000;">&#19979;&#38754;&#30340;&#21629;&#20196;&#25351;&#23450;&#23433;&#35013;&#25903;&#25345; pygments &#21644; ctags &#30340; global</span>
<span style="color: #ff0000;">#</span><span style="color: #ff0000;">brew install global --with-pygments --with-ctags </span>

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">step 2 check global version</span>
global --version
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">==&gt; global (GNU GLOBAL) 6.5.4</span>
which global
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">==&gt; /usr/local/bin/global</span>
</pre>
</div>
<p>
windows 下安装<br>
下载地址 <a href="http://adoxa.altervista.org/global/" target="_blank" rel="external">http://adoxa.altervista.org/global/</a><br>
安装 GLOBAL 到 D:\Applications\GLOBAL 目录下<br>
环境变量 PATH 中添加 D:\Applications\GLOBAL\bin<br>
</p>
</div></li>
<li><a id="orgheadline18"></a>配置<br><div class="outline-text-7" id="text-1-1-6-3-1-2">
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">windows config</span>
cp dot.win.globalrc ~/.globalrc
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">osx or linux config</span>
cp dot.globalrc ~/.globalrc
</pre>
</div>
</div>
<ol class="org-ol"><li><a id="orgheadline17"></a>globalrc 配置说明<br><div class="outline-text-8" id="text-1-1-6-3-1-2-1">
<p>
<a href="https://www.gnu.org/software/global/globaldoc_toc.html" target="_blank" rel="external">https://www.gnu.org/software/global/globaldoc_toc.html</a><br>
以‘#’开头的行为注释，一个记录由一个或多个字段组成，字段之间通过‘:’分割，以换行为结束。第一个字段必须为一个标签名称，剩余的字段为变量定义.<br>
有三种类型的变量：<br>
</p>
<ul class="org-ul">
<li>Boolean: This type has no value; existence of variable means true else false.<br></li>
<li>Number: This type has a number value after ’#’.<br></li>
<li>String: This type has a string value after ’=’.<br></li>
</ul>
<p>
Tips:<br>
如果数据中包含‘:’或者是换行，你应该通过\\来引用它。<br>
当包含多个定义时，前面的定义被采纳。langmap gtags_parser 属于例外,他们的定义会被连接在一起。<br>
</p>
<pre class="example">
下面的代码指定了 exuberant-ctags 程序的路径
:ctagscom=$HOME/Applications/ctags/exuberant-ctags/ctags:\
</pre>
</div></li></ol></li>
<li><a id="orgheadline19"></a>global 使用<br><div class="outline-text-7" id="text-1-1-6-3-1-3">
<p>
global 教程<br>
<a href="https://www.gnu.org/software/global/globaldoc_toc.html" target="_blank" rel="external">https://www.gnu.org/software/global/globaldoc_toc.html</a><br>
</p>
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#29983;&#25104; TAGS</span>
gtags
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#26597;&#35810; Print1_y &#30340;&#23450;&#20041;</span>
global -x Print1_y
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">==&gt; Print1_y            1 y.cpp            void Print1_y()</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#26597;&#35810; Print1_y &#30340;&#24341;&#29992;</span>
global -xr Print1_x
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">==&gt; Print1_y           10 x.cpp            Print1_y();</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20351;&#29992;&#27491;&#21017;&#34920;&#36798;&#24335;&#36827;&#34892;&#26597;&#35810;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">The &#8216;-s&#8217; command locates symbols which are not defined in &#8216;GTAGS&#8217;.</span>
global -sx <span style="color: #ffa07a;">'Print[12].*'</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">==&gt; Print1_a            1 a.lua            function Print1_a()</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">==&gt; Print1_b            1 b.lua            function Print1_b()</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">==&gt; Print2_a            4 a.lua            function Print2_a()</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">==&gt; Print2_a            9 b.lua            Print2_a()</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">==&gt; Print2_b            9 a.lua            Print2_b()</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">==&gt; Print2_b            4 b.lua            function Print2_b()</span>
</pre>
</div>
</div></li></ol></li>
<li><a id="orgheadline21"></a>pygments<br><div class="outline-text-6" id="text-1-1-6-3-2">
<p>
osx 下安装<br>
</p>
<div class="org-src-container">

<pre class="src src-shell">sudo pip install Pygments
pygmentize --version
where pygmentize
</pre>
</div>
<p>
windows 下安装<br>
easy_install Pygments<br>
</p>
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline30" class="outline-4">
<h4 id="orgheadline30"><span class="section-number-4">1.1.7</span> plantuml 支持</h4>
<div class="outline-text-4" id="text-1-1-7">
</div><ol class="org-ol"><li><a id="orgheadline24"></a>安装 java runtime environment<br><div class="outline-text-5" id="text-1-1-7-1">
<p>
<a id="orgtarget1"></a><br>
</p>
<ul class="org-ul">
<li>windows<br></li>
</ul>
<p>
直接在软件中心搜索安装<br>
</p>
</div></li>
<li><a id="orgheadline25"></a>安装 graphviz<br><div class="outline-text-5" id="text-1-1-7-2">
<p>
<a id="orgtarget2"></a><br>
</p>
<ul class="org-ul">
<li>osx<br></li>
</ul>
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23433;&#35013; graphviz</span>
brew install graphviz
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#26597;&#30475; graphviz &#23433;&#35013;&#36335;&#24452;</span>
brew info graphviz
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#35774;&#32622;&#29615;&#22659;&#21464;&#37327;</span>
<span style="color: #b0c4de;">export</span> <span style="color: #eedd82;">GRAPHVIZ_DOT</span>=/usr/local/bin/dot
</pre>
</div>
<ul class="org-ul">
<li>windows<br></li>
</ul>
<pre class="example">
安装 graphviz
http://www.graphviz.org/Download_windows.php
设置环境变量
My Computer/Properties/Advanced/Environment Variables
Create GRAPHVIZ_DOT User Variables 
GRAPHVIZ_DOT = D:\Applications\Graphviz\bin\dot.exe
</pre>
</div></li>
<li><a id="orgheadline26"></a>安装 plantuml<br><div class="outline-text-5" id="text-1-1-7-3">
<ul class="org-ul">
<li>下载 plantuml.jar 到 ~/Documents/MyCore/Config/EmacsConfig/Resource 目录下<br></li>
</ul>
<p>
<a href="http://plantuml.com/download" target="_blank" rel="external">http://plantuml.com/download</a><br>
</p>
</div></li>
<li><a id="orgheadline27"></a>测试<br><div class="outline-text-5" id="text-1-1-7-4">
<div class="org-src-container">

<pre class="src src-shell">java -jar plantuml.jar -version
</pre>
</div>
</div></li>
<li><a id="orgheadline29"></a>问题修复<br><div class="outline-text-5" id="text-1-1-7-5">
<ul class="org-ul">
<li>Error: unable to access jarfile<br></li>
</ul>
<p>
windows 下选中 plantuml.jar 鼠标右键-&gt;属性-&gt;解除锁定<br>
修改 puml-mode.el 文件中 puml-preview 函数内容如下：<br>
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #ff0000;">;; </span><span style="color: #ff0000;">old</span>
 (<span style="color: #00ffff;">let</span> ((ps (start-process <span style="color: #ffa07a;">"PUML"</span> buf
                             <span style="color: #ffa07a;">"java"</span> <span style="color: #ffa07a;">"-jar"</span> (shell-quote-argument puml-plantuml-jar-path)
                             (puml-output-type-opt) <span style="color: #ffa07a;">"-p"</span>)))
<span style="color: #ff0000;">;; </span><span style="color: #ff0000;">new</span>
 (<span style="color: #00ffff;">let</span> ((ps (start-process <span style="color: #ffa07a;">"PUML"</span> buf
                             <span style="color: #ffa07a;">"java"</span> <span style="color: #ffa07a;">"-jar"</span> (convert-standard-filename puml-plantuml-jar-path)
                             (puml-output-type-opt) <span style="color: #ffa07a;">"-p"</span>)))
</pre>
</div>
</div>
<ol class="org-ol"><li><a id="orgheadline28"></a>参考<br><div class="outline-text-6" id="text-1-1-7-5-1">
<p>
<a href="https://github.com/skuro/puml-mode/issues/10" target="_blank" rel="external">https://github.com/skuro/puml-mode/issues/10</a><br>
</p>
</div></li></ol></li></ol>
</div>
</div>

<div id="outline-container-orgheadline32" class="outline-3">
<h3 id="orgheadline32"><span class="section-number-3">1.2</span> 安装 spacemacs</h3>
<div class="outline-text-3" id="text-1-2">
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">step0 &#23433;&#35013; emacs</span>
emacs &#23433;&#35013;&#21442;&#32771;:http://emacs.sexy/
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">step1 &#20811;&#38534; spacemacs &#21040;~/.emacs.d</span>
mv ~/.emacs.d ~/.emacs.d.bak
git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">step2 &#20811;&#38534;&#25554;&#20214;&#21040;~/.emacs.d/elpa</span>
git clone https://github.com/wolfand11/_spacemacs_elpa.git ~/.emacs.d/elpa
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline35" class="outline-3">
<h3 id="orgheadline35"><span class="section-number-3">1.3</span> 初始化配置</h3>
<div class="outline-text-3" id="text-1-3">
</div><div id="outline-container-orgheadline33" class="outline-4">
<h4 id="orgheadline33"><span class="section-number-4">1.3.1</span> 配置说明</h4>
<div class="outline-text-4" id="text-1-3-1">
<pre class="example">
~\DOCUMENTS\MYCORE\CONFIG\EMACSCONFIG
|   custom_init.el                        // 自定义初始化  用于调用 Config 目录下的配置脚本
|   dot.emacs.el                          // 跨平台的.emacs 文件
|   dot.emacs.local.el                    // 本地特化的 emacs 配置
|   dot.globalrc                          // global 的配置文件
|   dot.spacemacs.el                      // spacemacs 配置
|   main.el                               // emacs 配置入口
|   
+---Config
|       init-environment-variable.el      // emacs 的环境变量
|       init-plug-org.el                  // org 插件配置 -- 目前已经移到 wolfand11 spacemacs 插件中
|       init-utility-function.el          // 功能函数     -- 目前已经移到 wolfand11 spacemacs 插件中
|       
+---Plugin
|   \---wolfand11      // wolfand11 spacemacs 插件
|           config.el
|           funcs.el
|           packages.el
|           
\---Resource
    \---snippets       // snippets
        \---org-mode
                blog.snippet
                eg.snippet
</pre>
</div>
</div>
<div id="outline-container-orgheadline34" class="outline-4">
<h4 id="orgheadline34"><span class="section-number-4">1.3.2</span> 安装配置</h4>
<div class="outline-text-4" id="text-1-3-2">
<div class="org-src-container">

<pre class="src src-shell">cp dot.emacs.el ~/.emacs.el
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">you can change .emacs.local context for local</span>
cp dot.emacs.local.el ~/.emacs.local.el
cp dot.spacemacs.el ~/.spacemacs
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#37197;&#32622; global</span>
cp dot.globalrc ~/.globalrc
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline36" class="outline-3">
<h3 id="orgheadline36"><span class="section-number-3">1.4</span> Emacs Debug 开启</h3>
<div class="outline-text-3" id="text-1-4">
<div class="org-src-container">

<pre class="src src-shell">emacs --debug-init
</pre>
</div>
<p>
在 emacs 中执行以下命令，开启出错 Debug.<br>
M-x toggle-debug-on-error<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline48" class="outline-3">
<h3 id="orgheadline48"><span class="section-number-3">1.5</span> 问题修复</h3>
<div class="outline-text-3" id="text-1-5">
</div><div id="outline-container-orgheadline37" class="outline-4">
<h4 id="orgheadline37"><span class="section-number-4">1.5.1</span> emacs 中命令找不到</h4>
<div class="outline-text-4" id="text-1-5-1">
<p>
查看 exec-path 变量，是否包含了指定命令的路径.<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline38" class="outline-4">
<h4 id="orgheadline38"><span class="section-number-4">1.5.2</span> emacs 命令调用不正确</h4>
<div class="outline-text-4" id="text-1-5-2">
<p>
查看 exec-path 变量中，指定命令是否比同名的另一个命令靠前。<br>
例如：window linux osx 下都有 find 命令，但是他们参数并不同，在 windows 下，要确保 cgwin 的 find 命令要靠前。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline39" class="outline-4">
<h4 id="orgheadline39"><span class="section-number-4">1.5.3</span> spacemacs 自动安装插件失败</h4>
<div class="outline-text-4" id="text-1-5-3">
<p>
在.emacs.el 文件中注释或者添加下面的代码<br>
</p>
<div class="org-src-container">

<pre class="src src-elisp">(package-initialize)
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline40" class="outline-4">
<h4 id="orgheadline40"><span class="section-number-4">1.5.4</span> lua 模式下代码缩进始终为 2 个空格</h4>
<div class="outline-text-4" id="text-1-5-4">
<p>
这是因为 spacemacs 中特写了 lua-indent-level<br>
直接修改/layers/+lang/lua/packages.el 中 lua-indent-level 的值为 4<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline44" class="outline-4">
<h4 id="orgheadline44"><span class="section-number-4">1.5.5</span> 自动补全支持</h4>
<div class="outline-text-4" id="text-1-5-5">
</div><ol class="org-ol"><li><a id="orgheadline41"></a>c/c++自动补全支持<br><div class="outline-text-5" id="text-1-5-5-1">
<div class="org-src-container">

<pre class="src src-elisp">(c-c++ <span style="color: #b0c4de;">:variables</span> c-c++-enable-clang-support t)
</pre>
</div>
</div></li>
<li><a id="orgheadline42"></a>lua 自动补全支持<br><div class="outline-text-5" id="text-1-5-5-2">
<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #ff0000;">;; </span><span style="color: #ff0000;">config.el &#20013;&#23450;&#20041;</span>
(spacemacs|defvar-company-backends lua-mode)
<span style="color: #ff0000;">;; </span><span style="color: #ff0000;">package.el &#20013;&#28155;&#21152;</span>
(<span style="color: #00ffff;">defun</span> <span style="color: #87cefa;">wolfand11/post-init-company</span> ()
  (<span style="color: #00ffff;">progn</span>
    (<span style="color: #00ffff;">setq</span> company-minimum-prefix-length 1
          company-idle-delay 0.08)

    (<span style="color: #00ffff;">when</span> (configuration-layer/package-usedp 'company)
      (spacemacs|add-company-hook shell-script-mode)
      (spacemacs|add-company-hook makefile-bsdmake-mode)
      (spacemacs|add-company-hook sh-mode)
      (spacemacs|add-company-hook lua-mode)
      (spacemacs|add-company-hook nxml-mode)
      (spacemacs|add-company-hook conf-unix-mode)
      (spacemacs|add-company-hook json-mode)
      (spacemacs|add-company-hook graphviz-dot-mode)
      )
    ))

(<span style="color: #00ffff;">defun</span> <span style="color: #87cefa;">wolfand11/post-init-lua-mode</span> ()
  (<span style="color: #00ffff;">progn</span>
    (add-hook 'lua-mode-hook 'evil-matchit-mode)
    (add-hook 'lua-mode-hook 'smartparens-mode)
    (<span style="color: #00ffff;">setq</span> lua-indent-level 4)
    <span style="color: #ff0000;">;;; </span><span style="color: #ff0000;">add lua language, basic, string and table keywords.</span>
    (<span style="color: #00ffff;">with-eval-after-load</span> 'lua-mode
      (<span style="color: #00ffff;">require</span> '<span style="color: #7fffd4;">company-keywords</span>)
      (<span style="color: #00ffff;">push</span> '(lua-mode  <span style="color: #ffa07a;">"setmetatable"</span> <span style="color: #ffa07a;">"local"</span> <span style="color: #ffa07a;">"function"</span> <span style="color: #ffa07a;">"and"</span> <span style="color: #ffa07a;">"break"</span> <span style="color: #ffa07a;">"do"</span> <span style="color: #ffa07a;">"else"</span> <span style="color: #ffa07a;">"elseif"</span> <span style="color: #ffa07a;">"self"</span> <span style="color: #ffa07a;">"resume"</span> <span style="color: #ffa07a;">"yield"</span>
                        <span style="color: #ffa07a;">"end"</span> <span style="color: #ffa07a;">"false"</span> <span style="color: #ffa07a;">"for"</span> <span style="color: #ffa07a;">"function"</span> <span style="color: #ffa07a;">"goto"</span> <span style="color: #ffa07a;">"if"</span> <span style="color: #ffa07a;">"nil"</span> <span style="color: #ffa07a;">"not"</span> <span style="color: #ffa07a;">"or"</span> <span style="color: #ffa07a;">"repeat"</span> <span style="color: #ffa07a;">"return"</span> <span style="color: #ffa07a;">"then"</span> <span style="color: #ffa07a;">"true"</span>
                        <span style="color: #ffa07a;">"until"</span> <span style="color: #ffa07a;">"while"</span> <span style="color: #ffa07a;">"__index"</span> <span style="color: #ffa07a;">"dofile"</span> <span style="color: #ffa07a;">"getmetatable"</span> <span style="color: #ffa07a;">"ipairs"</span> <span style="color: #ffa07a;">"pairs"</span> <span style="color: #ffa07a;">"print"</span> <span style="color: #ffa07a;">"rawget"</span> <span style="color: #ffa07a;">"status"</span>
                        <span style="color: #ffa07a;">"rawset"</span> <span style="color: #ffa07a;">"select"</span> <span style="color: #ffa07a;">"_G"</span> <span style="color: #ffa07a;">"assert"</span> <span style="color: #ffa07a;">"collectgarbage"</span> <span style="color: #ffa07a;">"error"</span> <span style="color: #ffa07a;">"pcall"</span> <span style="color: #ffa07a;">"coroutine"</span>
                        <span style="color: #ffa07a;">"rawequal"</span> <span style="color: #ffa07a;">"require"</span> <span style="color: #ffa07a;">"load"</span> <span style="color: #ffa07a;">"tostring"</span> <span style="color: #ffa07a;">"tonumber"</span> <span style="color: #ffa07a;">"xpcall"</span> <span style="color: #ffa07a;">"gmatch"</span> <span style="color: #ffa07a;">"gsub"</span>
                        <span style="color: #ffa07a;">"rep"</span> <span style="color: #ffa07a;">"reverse"</span> <span style="color: #ffa07a;">"sub"</span> <span style="color: #ffa07a;">"upper"</span> <span style="color: #ffa07a;">"concat"</span> <span style="color: #ffa07a;">"pack"</span> <span style="color: #ffa07a;">"insert"</span> <span style="color: #ffa07a;">"remove"</span> <span style="color: #ffa07a;">"unpack"</span> <span style="color: #ffa07a;">"sort"</span>
                        <span style="color: #ffa07a;">"lower"</span>) <span style="color: #ffc0cb; font-weight: bold;">company-keywords-alist))</span>

    ))
</pre>
</div>
</div></li>
<li><a id="orgheadline43"></a>elisp 自动补全错误<br><div class="outline-text-5" id="text-1-5-5-3">
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #00ffff;">defun</span> <span style="color: #87cefa;">wolfand11/post-init-emacs-lisp</span> ()
  (remove-hook 'emacs-lisp-mode-hook 'auto-compile-mode))
</pre>
</div>
</div></li></ol>
</div>
<div id="outline-container-orgheadline45" class="outline-4">
<h4 id="orgheadline45"><span class="section-number-4">1.5.6</span> 修改 tab 显示</h4>
<div class="outline-text-4" id="text-1-5-6">
<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #ff0000;">;; </span><span style="color: #ff0000;">&#25511;&#21046; tab &#23545;&#24212;&#30340;&#31354;&#26684;&#25968;&#30446;</span>
(<span style="color: #00ffff;">setq</span> tab-width 4)
(<span style="color: #00ffff;">setq</span> default-tab-width 4)
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline46" class="outline-4">
<h4 id="orgheadline46"><span class="section-number-4">1.5.7</span> Symbol’s value as variable is void: company-backends-xxxx</h4>
<div class="outline-text-4" id="text-1-5-7">
<p>
导出 org 文件为 html 时，会提示这个错误。这是因为 company 配置错误。修改方法如下：<br>
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #ff0000;">;; </span><span style="color: #ff0000;">&#20462;&#25913; company &#37197;&#32622;</span>
(<span style="color: #00ffff;">defun</span> <span style="color: #87cefa;">wolfand11/post-init-company</span> ()
  (<span style="color: #00ffff;">progn</span>
    (<span style="color: #00ffff;">when</span> (configuration-layer/package-usedp 'company)
      (spacemacs|add-company-backends : modes lua-mode nxml-mode json-mode ))
    ))
</pre>
</div>
<p>
参考链接：<a href="https://github.com/syl20bnr/spacemacs/issues/8496" target="_blank" rel="external">https://github.com/syl20bnr/spacemacs/issues/8496</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline47" class="outline-4">
<h4 id="orgheadline47"><span class="section-number-4">1.5.8</span> MELPA 的包不可见</h4>
<div class="outline-text-4" id="text-1-5-8">
<p>
spacemacs 默认设置是支持 MELPA 和 marmalade 的。请检查.emacs.el 中是不是添加了下面的代码，导致默认设置出错。<br>
</p>
<div class="org-src-container">

<pre class="src src-elisp">(package-initialize)
</pre>
</div>
<p>
参考链接：<a href="https://github.com/syl20bnr/spacemacs/issues/4402" target="_blank" rel="external">https://github.com/syl20bnr/spacemacs/issues/4402</a><br>
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline50" class="outline-2">
<h2 id="orgheadline50"><span class="section-number-2">2</span> Init AutoHotKey</h2>
<div class="outline-text-2" id="text-2">
<p>
执行 init.ahk 脚本 (点击打开脚本，就会自动执行)<br>
开机自动执行 init.akh 脚本<br>
</p>
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23558; init.ahk &#30340;&#24555;&#25463;&#26041;&#24335;&#22797;&#21046;&#21040;&#19979;&#38754;&#36335;&#24452;</span>
cp init-shortcut.ahk.lnk <span style="color: #ffa07a;">"C:\Users\guodong\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#26597;&#30475;&#33258;&#21160;&#36816;&#34892;&#36335;&#24452;&#19979;&#30340;&#25991;&#20214;</span>
ls -al <span style="color: #ffa07a;">'C:\Users\guodong\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup'</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline53" class="outline-2">
<h2 id="orgheadline53"><span class="section-number-2">3</span> InitVim</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-orgheadline51" class="outline-3">
<h3 id="orgheadline51"><span class="section-number-3">3.1</span> 安装 vim</h3>
<div class="outline-text-3" id="text-3-1">
<p>
osx<br>
<a href="https://github.com/macvim-dev/macvim/releases" target="_blank" rel="external">https://github.com/macvim-dev/macvim/releases</a><br>
windows<br>
直接在软件中心搜索安装<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline52" class="outline-3">
<h3 id="orgheadline52"><span class="section-number-3">3.2</span> 初始化配置</h3>
<div class="outline-text-3" id="text-3-2">
<div class="org-src-container">

<pre class="src src-shell">cp dot.vimrc ~/.vimrc
:: &#22312; windows &#19979; vim &#30340;&#37197;&#32622;&#20026;_vimrc
cp dot.vimrc ~/_vimrc
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline65" class="outline-2">
<h2 id="orgheadline65"><span class="section-number-2">4</span> InitVisualStuido</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-orgheadline56" class="outline-3">
<h3 id="orgheadline56"><span class="section-number-3">4.1</span> 配置</h3>
<div class="outline-text-3" id="text-4-1">
</div><div id="outline-container-orgheadline54" class="outline-4">
<h4 id="orgheadline54"><span class="section-number-4">4.1.1</span> 设置代码格式</h4>
<div class="outline-text-4" id="text-4-1-1">
<p>
工具-选项-文本编辑器-C#-格式设置<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline55" class="outline-4">
<h4 id="orgheadline55"><span class="section-number-4">4.1.2</span> 导入配置文件</h4>
<div class="outline-text-4" id="text-4-1-2">
<ol class="org-ol">
<li>Go to Tools &gt; Options<br></li>
<li>Go to Environment &gt; "Import and Export Settings"<br></li>
<li>Change the path to existing one<br></li>
</ol>
</div>
</div>
</div>
<div id="outline-container-orgheadline64" class="outline-3">
<h3 id="orgheadline64"><span class="section-number-3">4.2</span> 安装各种插件</h3>
<div class="outline-text-3" id="text-4-2">
</div><div id="outline-container-orgheadline57" class="outline-4">
<h4 id="orgheadline57"><span class="section-number-4">4.2.1</span> VsVim</h4>
<div class="outline-text-4" id="text-4-2-1">
<p>
在 Extension 中搜索 VsVim 进行安装<br>
重启 VisualStudio<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline58" class="outline-4">
<h4 id="orgheadline58"><span class="section-number-4">4.2.2</span> Visual Assist</h4>
<div class="outline-text-4" id="text-4-2-2">
<p>
<a href="http://www.wholetomato.com/" target="_blank" rel="external">http://www.wholetomato.com/</a><br>
C:盘根目录下搜索 VA_X.dll 可以找到该插件的安装目录<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline59" class="outline-4">
<h4 id="orgheadline59"><span class="section-number-4">4.2.3</span> C# Outline 2015</h4>
<div class="outline-text-4" id="text-4-2-3">
<p>
在 Extension 中搜索 C# Outline 进行安装<br>
该插件可以让 VS 支持函数内语句的折叠<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline61" class="outline-4">
<h4 id="orgheadline61"><span class="section-number-4">4.2.4</span> Nuget</h4>
<div class="outline-text-4" id="text-4-2-4">
<p>
windows 包管理软件。<br>
<a href="http://www.nuget.org/" target="_blank" rel="external">http://www.nuget.org/</a><br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline60"></a>使用方法<br><div class="outline-text-5" id="text-4-2-4-1">
<ul class="org-ul">
<li>为 VisualStudio 安装 NuGet.Tools.vsix 插件. （或者在 Extension 中搜索 NuGet 进行安装）<br></li>
<li>VisualStudio 中 Quick Launch 中输入 package manager,选择打开 package mangager 窗口.<br></li>
<li>搜索 Autofac，选择合适的版本。进行安装。<br></li>
</ul>
</div></li></ol>
</div>
<div id="outline-container-orgheadline62" class="outline-4">
<h4 id="orgheadline62"><span class="section-number-4">4.2.5</span> LicenseHeaderManager</h4>
<div class="outline-text-4" id="text-4-2-5">
<p>
在 Extension 中搜索 LicenseHeaderManager 进行安装<br>
使用说明文档: <a href="https://github.com/rubicon-oss/LicenseHeaderManager/wiki" target="_blank" rel="external">https://github.com/rubicon-oss/LicenseHeaderManager/wiki</a><br>
插入 LicenseHeader 的快捷键 Alt+l<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline63" class="outline-4">
<h4 id="orgheadline63"><span class="section-number-4">4.2.6</span> ReSharper</h4>
<div class="outline-text-4" id="text-4-2-6">
<p>
<a href="https://www.jetbrains.com/resharper/" target="_blank" rel="external">https://www.jetbrains.com/resharper/</a><br>
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline71" class="outline-2">
<h2 id="orgheadline71"><span class="section-number-2">5</span> InitJetBrainsIDE</h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-orgheadline70" class="outline-3">
<h3 id="orgheadline70"><span class="section-number-3">5.1</span> ideavim</h3>
<div class="outline-text-3" id="text-5-1">
<p>
<a href="https://github.com/JetBrains/ideavim" target="_blank" rel="external">https://github.com/JetBrains/ideavim</a><br>
</p>
</div>
<div id="outline-container-orgheadline66" class="outline-4">
<h4 id="orgheadline66"><span class="section-number-4">5.1.1</span> 初始化配置</h4>
<div class="outline-text-4" id="text-5-1-1">
<div class="org-src-container">

<pre class="src src-shell">:: window7 &#19979;&#37197;&#32622;&#26041;&#27861;
cp dot.ideavimrc /cygdrive/c/Users/Administrator/.ideavimrc
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline67" class="outline-4">
<h4 id="orgheadline67"><span class="section-number-4">5.1.2</span> IDEA 配置 Lua 开发环境</h4>
<div class="outline-text-4" id="text-5-1-2">
<ul class="org-ul">
<li>安装 Lua 插件就可以啦<br></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline69" class="outline-4">
<h4 id="orgheadline69"><span class="section-number-4">5.1.3</span> 问题解决</h4>
<div class="outline-text-4" id="text-5-1-3">
</div><ol class="org-ol"><li><a id="orgheadline68"></a>ideavim 屏蔽了 AutoHotKey 中键盘的设置<br><div class="outline-text-5" id="text-5-1-3-1">
<p>
不要使用 AutoHotKey 来实现 Alt 和 Ctrl 按键的重新绑定，使用 HotkeyControl 绑定按键，就不会有该问题。<br>
</p>
</div></li></ol>
</div>
</div>
</div>

<div id="outline-container-orgheadline74" class="outline-2">
<h2 id="orgheadline74"><span class="section-number-2">6</span> Shell Tools</h2>
<div class="outline-text-2" id="text-6">
</div><div id="outline-container-orgheadline72" class="outline-3">
<h3 id="orgheadline72"><span class="section-number-3">6.1</span> windows babun</h3>
<div class="outline-text-3" id="text-6-1">
<p>
<a href="http://babun.github.io/" target="_blank" rel="external">http://babun.github.io/</a><br>
</p>
<div class="org-src-container">

<pre class="src src-cmd">::在 cmd 中运行 install 脚本
install /target D:\Applications\babun
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline73" class="outline-3">
<h3 id="orgheadline73"><span class="section-number-3">6.2</span> oh-my-zsh 配置</h3>
<div class="outline-text-3" id="text-6-2">
<pre class="example">
基本安装配置参考 oh-my-zsh 官网:http://ohmyz.sh/

配置文件列表:
dot_zshrc
dot_zshrc.custom
dot_zshrc.local
Soliah.zsh-theme（主题配置）

配置说明:
通用的自定义配置放在 dot_zshrc.custom 中，本地的自定义配置放在 dot_zshrc.local 中，
dot_zshrc 会加载 dot_zshrc.custom 和 dot_zshrc.local
调用下面的命令进行配置:
cp dot_zshrc ~/.zshrc
cp dot_zshrc.local ~/.zshrc.local
cp Soliah.zsh-theme ~/.oh-my-zsh/themes/Soliah.zsh-theme
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline75" class="outline-2">
<h2 id="orgheadline75"><span class="section-number-2">7</span> SSH Config</h2>
<div class="outline-text-2" id="text-7">
<div class="org-src-container">

<pre class="src src-sh">rm -R ~/.ssh
cp -R SSHConfig ~/.ssh
chmod 600  ~/.ssh/id_rsa
password:******gh

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#37197;&#32622;.ssh &#36335;&#24452;&#65292; &#23545; /etc/passwd &#25991;&#20214;&#20869;&#23481;&#20570;&#22914;&#19979;&#20462;&#25913;&#65306;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#26087;&#20869;&#23481; - Administrator:unused:500:513:Dong Guo,U-WIN-10\Administrator,S-1-5-21-2357673517-1225067227-1474234480-500:/cygdrive/c/Users/Administrator:/bin/zsh</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#26032;&#20869;&#23481; - Administrator:unused:500:513:Dong Guo,U-WIN-10\Administrator,S-1-5-21-2357673517-1225067227-1474234480-500:/cygdrive/d                    :/bin/zsh</span>

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#21487;&#20197;&#20351;&#29992;&#19979;&#38754;&#26041;&#27861;&#35843;&#35797; ssh &#23545; private key &#30340;&#36873;&#25321;</span>
ssh -vT git@github.com
ssh -vT git@git.coding.net
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline76" class="outline-2">
<h2 id="orgheadline76"><span class="section-number-2">8</span> InitZeroBrane</h2>
<div class="outline-text-2" id="text-8">
<p>
在菜单栏中选择 Edit/Preference/Settings: User 会打开配置文件 user.lua，将自己的配置内容 copy 到打开的配置文件中就可以了。<br>
</p>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> InitPC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Loading Resources at Runtime]]></title>
      <url>http://wolfand11.coding.me/2016/08/23/unity/UnityDoc-LoadingResourcesatRuntime/</url>
      <content type="html"><![CDATA[

<p>
这是一篇译文，原文地址：<a href="http://docs.unity3d.com/Manual/LoadingResourcesatRuntime.html" target="_blank" rel="external">http://docs.unity3d.com/Manual/LoadingResourcesatRuntime.html</a><br>
</p>

<a id="more"></a>
<p>
在有些情况下，对于项目来讲将一个资源不作为场景的一部分进行加载是很有用的。例如，一个角色或其他对象它可以出现在游戏中的任何场景中，但是它不会被经常使用（它可能是一个秘密特性，一个错误消息或一个高分弹窗）。更进一步，你可能想从另一个文件或 URL 来加载资源，从而减低初始化下载时间或允许更换游戏内容。<br>
</p>

<p>
Unity 在项目中支持 Resource 文件夹来允许未被加载的内容在主游戏文件中被应用，直到请求的时候才加载该游戏内容。你也可以创建自己的资源打包(Asset Bundles)。这些是完全和主游戏文件分开的，它们包含的资源会被游戏从一个文件或 URL 按需访问。<br>
</p>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2"><span class="section-number-2">1</span> Asset Bundles</h2>
<div class="outline-text-2" id="text-1">
<p>
一个资源打包（Asset Bundle）是一个外部的资源集合。你可以有很多个资源打包因此有多个不同的外部资源集合。这些文件存在于内置 Unity player 之外，通常放置在一个 web 服务器上，用于让终端用户动态地访问。<br>
</p>

<p>
为了创建一个资源打包，你可以在编辑器脚本中调用 BuildPipeline.BuildAssetBundle()。在参数中你指定了一个对象数组，他们将被包含在创建的文件中，另外还有一些其他的参数选项。这样创建的文件，你可以通过调用 AssetBundle.LoadAsset(),在随后运行时来动态加载。<br>
</p>

<p>
<a id="orgtarget1"></a><br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#19979;&#38754;&#26159; BuildPipeline.BuildAssetBundle() </span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#20381;&#25454;&#22312; Editor &#20013;&#37197;&#32622;&#26500;&#24314;&#25152;&#26377;&#36164;&#28304;&#21253;</span>
<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">AssetBundleManifest</span> <span style="color: #87cefa;">BuildAssetBundles</span>(
        <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">outputPath</span>,                           <span style="color: #ff0000;">// </span><span style="color: #ff0000;">AssetBundles &#36755;&#20986;&#36335;&#24452;</span>
  <span style="color: #98fb98;">BuildAssetBundleOptions</span> <span style="color: #eedd82;">assetBundleOptions</span>,  <span style="color: #ff0000;">// </span><span style="color: #ff0000;">AssetBundle &#25171;&#21253;&#36873;&#39033;</span>
  BuildTarget targetPlatform                   <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#36873;&#25321;&#37096;&#32626;&#30340;&#30446;&#26631;&#24179;&#21488;(Windows Standalone, Android, iOS, etc));</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#20381;&#25454;&#19968;&#20010;&#36164;&#28304;&#22320;&#22270;&#26469;&#26500;&#24314;&#36164;&#28304;&#21253;</span>
<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">AssetBundleManifest</span> <span style="color: #87cefa;">BuildAssetBundles</span>(
        <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">outputPath</span>, 
  <span style="color: #98fb98;">AssetBundleBuild</span>[] <span style="color: #eedd82;">builds</span>,                   <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#36164;&#28304;&#25171;&#21253;&#22320;&#22270;</span>
  <span style="color: #98fb98;">BuildAssetBundleOptions</span> <span style="color: #eedd82;">assetBundleOptions</span>, 
  <span style="color: #98fb98;">BuildTarget</span> <span style="color: #eedd82;">targetPlatform</span>
);

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Create an AssetBundle for Windows.</span>
[<span style="color: #98fb98;">MenuItem</span>( <span style="color: #ffa07a;">"Example/Build Asset Bundles"</span> )]
<span style="color: #00ffff;">static</span> <span style="color: #98fb98;">void</span> BuildABs( )
{
  <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Put the bundles in a folder called "ABs" within the Assets folder.</span>
  BuildPipeline.BuildAssetBundles( <span style="color: #ffa07a;">"Assets/ABs"</span>, BuildAssetBundleOptions.None, BuildTarget.StandaloneWindows );
}

[<span style="color: #98fb98;">MenuItem</span>( <span style="color: #ffa07a;">"Example/Build Asset Bundles Using BuildMap"</span> )]
<span style="color: #00ffff;">static</span> <span style="color: #98fb98;">void</span> BuildMapABs( )
{
  <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Create the array of bundle build details.</span>
  <span style="color: #98fb98;">AssetBundleBuild</span>[] <span style="color: #eedd82;">buildMap</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">AssetBundleBuild</span>[2];

  buildMap[0].assetBundleName = <span style="color: #ffa07a;">"enemybundle"</span>;
  <span style="color: #98fb98;">string</span>[] <span style="color: #eedd82;">enemyAssets</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">string</span>[2];
  enemyAssets[0] = <span style="color: #ffa07a;">"Assets/Textures/char_enemy_alienShip.jpg"</span>;
  enemyAssets[1] = <span style="color: #ffa07a;">"Assets/Textures/char_enemy_alienShip-damaged.jpg"</span>;
  buildMap[0].assetNames = enemyAssets;

  buildMap[1].assetBundleName = <span style="color: #ffa07a;">"herobundle"</span>;
  <span style="color: #98fb98;">string</span>[] <span style="color: #eedd82;">heroAssets</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">string</span>[1];
  heroAssets[0] = <span style="color: #ffa07a;">"char_hero_beanMan"</span>;
  buildMap[1].assetNames = heroAssets;

  BuildPipeline.BuildAssetBundles( <span style="color: #ffa07a;">"Assets/ABs"</span>, buildMap, BuildAssetBundleOptions.None, BuildTarget.StandaloneWindows );
}
</pre>
</div>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#19979;&#38754;&#26159; AssetBundle.LoadAsset()</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#20174;&#36164;&#28304;&#21253;&#20013;&#21152;&#36733;&#21517;&#31216;&#20026; name &#30340;&#36164;&#28304;</span>
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Object</span> <span style="color: #87cefa;">LoadAsset</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span>);
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#20174;&#36164;&#28304;&#21253;&#20013;&#21152;&#36733;&#21517;&#31216;&#20026; name &#31867;&#22411;&#20026; type &#30340;&#36164;&#28304;</span>
<span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Object</span> <span style="color: #87cefa;">LoadAsset</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span>, <span style="color: #98fb98;">Type</span> <span style="color: #eedd82;">type</span>);
</pre>
</div>
</div>
<div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> Tips:</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>Resources.Load 方法传入的资源路径需是从 Resources 文件夹下一级开始的相对路径且不能包含扩展名；<br></li>
<li>AssetBundle.LoadAsset 方法传入的资源名需是从 Assets 文件开始的全路径且要包含扩展名。<br>
路径不区分大小写，建议全用小写，因为 AssetBundle.GetAllAssetNames 方法返回的资源名都是小写的。<br></li>
<li>Unity 中的所有资源名称和路径都使用正斜杠，反斜杠会出错。<br></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4"><span class="section-number-2">2</span> Resource Folders</h2>
<div class="outline-text-2" id="text-2">
<p>
Resource Folders 是很多个资源集合，在内置 Unity Player 中会包含他们。但是却不需要在 Inspector 中将他们和任何 GameObject 连接。<br>
</p>

<p>
为了将任何东西放入 Resource Folder，你只需要在项目视图中创建一个新的文件夹，并且将其命名为“Resources”。在你的项目中，你可以有多个组织不同的资源文件夹。当你想从其中一个文件夹中加载资源时，可以调用 Resources.Load().<br>
</p>
<div class="org-src-container">

<pre class="src src-c#">// 加载指定目录下的内容
public static Object Load(string path);
public static Object Load(string path, Type systemTypeInstance);
// path 为目标文件夹。 当使用空字符串“”时，会加载 Resources 目录下的所有内容。
// systemTypeInstance 指定返回对象的类型

mainTexture = Resources.Load("glass") as Texture;
gameObj = Resources.Load("enemy", typeof(GameObject));

// 加载指定目录下类型为 T 的内容
public static T Load(string path);
</pre>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3"><span class="section-number-3">2.1</span> 注意：</h3>
<div class="outline-text-3" id="text-2-1">
<p>
所有 Resources 目录下的资源，以及他们之间的依赖关系被存储在一个叫做 resources.assets 的文件中。如果一个资源已经被另一个关卡使用，会为该关卡将其保存在.sharedAssets 文件中。Player Setting（Edit-&gt;Project Settings-&gt;Player） 下，First Streamed Level 的设置决定了 resources.assets 会在哪个关卡中收集资源，并将其在构建中包含在内。<br>
</p>

<p>
如果一个关卡在“First streamed Level”之前包含了一个在 Resource 文件夹中的资源，这个资源将被存储在那个关卡的资源中。如果这个资源是在“First streamed Level”之后被包含的，那么那个关卡将从 resources.assets 文件中引用该资源。<br>
</p>

<p>
只有在 Resources 文件夹下的资源可以通过 Resources.Load()来访问。然而，因为他们的依赖关系，更多的资源可能最终被包含在 resources.assets 文件中。（例如：一个 Resources 目录下的材质可以引用一个 Resources 文件夹外的 Texture）<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5"><span class="section-number-2">3</span> Resource Unloading</h2>
<div class="outline-text-2" id="text-3">
<p>
你可以通过调用 AssetBundle.Unload()来卸载一个 AssetBundle 的资源。如果你为 unloadAllLoadedObjects 参数传递 true，AssetBundle 内部保持的对象和使用 AssetBundle.LoadAsset()从 AssetBundle 加载的对象都会被销毁并且资源包使用的内存会被释放。<br>
</p>

<p>
有时候你更喜欢加载 AssetBundle，实例化需要的对象并且释放打包用过的内存同时保持实例化的对象。这样做的好处是可以释放更多的内存为其他任务使用，例如：加载另一个 AssetBundle。在这种情况下你应该传递 false 作为参数值。当 bundle 被销毁后，你将不能再从其中加载对象。<br>
</p>

<p>
如果你想在加载另一个关卡之前，销毁一个使用 Resources.Load()方式加载的场景对象，在这些对象上调用 Object.Destory()。为了释放资源，使用 Resources.UnloadUnusedAssets().<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline43" class="outline-2">
<h2 id="orgheadline43"><span class="section-number-2">4</span> Scripts</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-orgheadline24" class="outline-3">
<h3 id="orgheadline24"><span class="section-number-3">4.1</span> UnityEngine Class</h3>
<div class="outline-text-3" id="text-4-1">
</div><div id="outline-container-orgheadline14" class="outline-4">
<h4 id="orgheadline14"><span class="section-number-4">4.1.1</span> AssetBundle</h4>
<div class="outline-text-4" id="text-4-1-1">
<p>
<a href="https://docs.unity3d.com/ScriptReference/AssetBundle.html" target="_blank" rel="external">https://docs.unity3d.com/ScriptReference/AssetBundle.html</a><br>
AssetBundle 继承自 Object 类<br>
AssetBundles 让你可以通过 WWW 类来以流化额外的资源，并且在运行时实例化他们。AssetBundles 是通过 BuildPipeline.BuildAssetBundle 来创建的。<br>
需要注意的是包在不同平台是不兼容的。为 windows 创建的包只能在 windows 上被加载，而不能在其他平台使用。因为不同平台的 shader 不同，贴图也不同。<br>
</p>

<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">IEnumerator</span> <span style="color: #87cefa;">Start</span> () {
        <span style="color: #98fb98;">WWW</span> <span style="color: #eedd82;">www</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">WWW</span>(<span style="color: #ffa07a;">"http://myserver/myBundle.unity3d"</span>);
        <span style="color: #00ffff;">yield</span> <span style="color: #00ffff;">return</span> www;

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Get the designated main asset and instantiate it.</span>
        Instantiate(www.assetBundle.mainAsset);
}
</pre>
</div>
</div>

<ol class="org-ol"><li><a id="orgheadline6"></a>Variables<br><div class="outline-text-5" id="text-4-1-1-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">isStreamedSceneAssetBundle</td>
<td class="org-left">Return true if the AssetBundle is a streamed scene AssetBundle.</td>
<td class="org-left">如果该 AssetBundle 是一个流化的场景则返回 true</td>
</tr>

<tr>
<td class="org-left">mainAsset</td>
<td class="org-left">Main asset that was supplied when building the asset bundle (Read Only).</td>
<td class="org-left">创建该资源包时提供的主资源</td>
</tr>
</tbody>
</table>
</div></li>

<li><a id="orgheadline7"></a>Public Functions<br><div class="outline-text-5" id="text-4-1-1-2">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">Contains</td>
<td class="org-left">Check if an AssetBundle contains a specific object.</td>
<td class="org-left">判断 AssetBundle 是否包含一个特定的对象</td>
</tr>

<tr>
<td class="org-left">GetAllAssetNames</td>
<td class="org-left">Return all asset names in the AssetBundle.</td>
<td class="org-left">获取 AssetBundle 中的所有资源名称</td>
</tr>

<tr>
<td class="org-left">GetAllScenePaths</td>
<td class="org-left">Return all the scene asset paths (paths to *.unity assets) in the AssetBundle.</td>
<td class="org-left">获取 AssetBundle 中所有场景资源的路径（~*~.unity 资源文件的路径）</td>
</tr>

<tr>
<td class="org-left">LoadAllAssets</td>
<td class="org-left">Loads all assets contained in the asset bundle that inherit from type.</td>
<td class="org-left">加载 AssetBundle 中包含的所有资源</td>
</tr>

<tr>
<td class="org-left">LoadAllAssetsAsync</td>
<td class="org-left">Loads all assets contained in the asset bundle asynchronously.</td>
<td class="org-left">异步加载 AssetBundle 中包含的所有资源</td>
</tr>

<tr>
<td class="org-left">LoadAsset</td>
<td class="org-left">Loads asset with name from the bundle.</td>
<td class="org-left">从 AssetBundle 中加载指定名称的资源</td>
</tr>

<tr>
<td class="org-left">LoadAssetAsync</td>
<td class="org-left">Asynchronously loads asset with name from the bundle.</td>
<td class="org-left">从 AssetBundle 中异步加载指定名称的资源</td>
</tr>

<tr>
<td class="org-left">LoadAssetWithSubAssets</td>
<td class="org-left">Loads asset and sub assets with name from the bundle.</td>
<td class="org-left">从 AssetBundle 中加载指定名称的资源和子资源</td>
</tr>

<tr>
<td class="org-left">LoadAssetWithSubAssetsAsync</td>
<td class="org-left">Loads asset with sub assets with name from the bundle asynchronously.</td>
<td class="org-left">从 AssetBundle 中异步加载指定名称的资源和子资源</td>
</tr>

<tr>
<td class="org-left">Unload</td>
<td class="org-left">Unloads all assets in the bundle.</td>
<td class="org-left">卸载 AssetBundle 中的所有资源</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline8"></a>Static Functions<br><div class="outline-text-5" id="text-4-1-1-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">LoadFromFile</td>
<td class="org-left">Synchronously loads an AssetBundle from a file on disk.</td>
<td class="org-left">从磁盘同步加载一个 AssetBundle</td>
</tr>

<tr>
<td class="org-left">LoadFromFileAsync</td>
<td class="org-left">Asynchronously loads an AssetBundle from a file on disk.</td>
<td class="org-left">从磁盘异步加载一个 AssetBundle</td>
</tr>

<tr>
<td class="org-left">LoadFromMemory</td>
<td class="org-left">Synchronously create an AssetBundle from a memory region.</td>
<td class="org-left">同步从内存中创建一个 AssetBundle</td>
</tr>

<tr>
<td class="org-left">LoadFromMemoryAsync</td>
<td class="org-left">Asynchronously create an AssetBundle from a memory region.</td>
<td class="org-left">异步从内存中创建一个 AssetBundle</td>
</tr>
</tbody>
</table>
</div></li>

<li><a id="orgheadline13"></a>Usage<br><ol class="org-ol"><li><a id="orgheadline9"></a>从文件创建 AssetBundle<br><div class="outline-text-6" id="text-4-1-1-4-1">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">------- &#21516;&#27493;&#21152;&#36733;</span>
<span style="color: #00ffff;">using</span> <span style="color: #7fffd4;">UnityEngine</span>;
<span style="color: #00ffff;">using</span> <span style="color: #7fffd4;">System.Collections</span>;
<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">LoadFromFileExample</span> : <span style="color: #98fb98;">MonoBehaviour</span>
{
    <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Start</span> ()
    {
        <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">myLoadedAssetBundle</span> = AssetBundle.LoadFromFile(Path.Combine(Application.streamingAssetsPath, <span style="color: #ffa07a;">"myassetBundle"</span>));
        <span style="color: #00ffff;">if</span> (myLoadedAssetBundle == <span style="color: #7fffd4;">null</span>)
        {
            Debug.Log(<span style="color: #ffa07a;">"Failed to load AssetBundle!"</span>);
            <span style="color: #00ffff;">return</span>;
        }

        <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">prefab</span> = myLoadedAssetBundle.LoadAsset&lt;GameObject&gt;(<span style="color: #ffa07a;">"MyObject"</span>);
        Instantiate(prefab);

        myLoadedAssetBundle.Unload(<span style="color: #7fffd4;">false</span>);
    }
}

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">------- &#24322;&#27493;&#21152;&#36733;</span>
<span style="color: #00ffff;">using</span> <span style="color: #7fffd4;">UnityEngine</span>;
<span style="color: #00ffff;">using</span> <span style="color: #7fffd4;">System.Collections</span>;
<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">LoadFromFileAsyncExample</span> : <span style="color: #98fb98;">MonoBehaviour</span>
{
    <span style="color: #98fb98;">IEnumerator</span> <span style="color: #87cefa;">Start</span> ()
    {
        <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">bundleLoadRequest</span> = AssetBundle.LoadFromFileAsync(Path.Combine(Application.streamingAssetsPath, <span style="color: #ffa07a;">"myassetBundle"</span>));
        <span style="color: #00ffff;">yield</span> <span style="color: #00ffff;">return</span> bundleLoadRequest;
        <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">myLoadedAssetBundle</span> = bundleLoadRequest.assetBundle;
        <span style="color: #00ffff;">if</span> (myLoadedAssetBundle == <span style="color: #7fffd4;">null</span>)
        {
            Debug.Log(<span style="color: #ffa07a;">"Failed to load AssetBundle!"</span>);
            <span style="color: #00ffff;">yield</span> <span style="color: #00ffff;">break</span>;
        }

        <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">assetLoadRequest</span> = myLoadedAssetBundle.LoadAssetAsync&lt;GameObject&gt;(<span style="color: #ffa07a;">"MyObject"</span>);
        <span style="color: #00ffff;">yield</span> <span style="color: #00ffff;">return</span> assetLoadRequest;

        <span style="color: #98fb98;">GameObject</span> <span style="color: #eedd82;">prefab</span> = assetLoadRequest.asset <span style="color: #00ffff;">as</span> <span style="color: #98fb98;">GameObject</span>;
        Instantiate(prefab);

        myLoadedAssetBundle.Unload(<span style="color: #7fffd4;">false</span>);
    }
}
</pre>
</div>
</div></li>
<li><a id="orgheadline10"></a>从内存数据创建 AssetBundle<br><div class="outline-text-6" id="text-4-1-1-4-2">
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">using</span> <span style="color: #7fffd4;">UnityEngine</span>;
<span style="color: #00ffff;">using</span> <span style="color: #7fffd4;">System.Collections</span>;

<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ExampleClass</span> : <span style="color: #98fb98;">MonoBehaviour</span> {
    <span style="color: #98fb98;">byte</span>[] <span style="color: #87cefa;">MyDecription</span>(<span style="color: #98fb98;">byte</span>[] <span style="color: #eedd82;">binary</span>) {
        <span style="color: #98fb98;">byte</span>[] <span style="color: #eedd82;">decrypted</span>;
        <span style="color: #00ffff;">return</span> decrypted;
    }
    <span style="color: #98fb98;">IEnumerator</span> <span style="color: #87cefa;">Start</span>() {
        <span style="color: #98fb98;">WWW</span> <span style="color: #eedd82;">www</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">WWW</span>(<span style="color: #ffa07a;">"http://myserver/myBundle.unity3d"</span>);
        <span style="color: #00ffff;">yield</span> <span style="color: #00ffff;">return</span> www;
        <span style="color: #98fb98;">byte</span>[] <span style="color: #eedd82;">decryptedBytes</span> = MyDecription(www.bytes);
        <span style="color: #98fb98;">AssetBundle</span> <span style="color: #eedd82;">assetBundle</span> = AssetBundle.LoadFromMemory(decryptedBytes);
    }
}
</pre>
</div>
</div></li>
<li><a id="orgheadline11"></a>AssetBundle 图解<br><div class="outline-text-6" id="text-4-1-1-4-3">
<p>
<img src="AssetBundle_Illustration.jpg"><br>
<img src="AssetBundleMemery.png"><br>
</p>
</div></li>
<li><a id="orgheadline12"></a>参考文章<br><div class="outline-text-6" id="text-4-1-1-4-4">
<ul class="org-ul">
<li>AssetBundle 系列文章总目录<br>
<ul class="org-ul">
<li>英文 <a href="https://unity3d.com/cn/learn/tutorials/topics/best-practices/guide-assetbundles-and-resources" target="_blank" rel="external">https://unity3d.com/cn/learn/tutorials/topics/best-practices/guide-assetbundles-and-resources</a><br></li>
<li>中文 <a href="http://blog.shuiguzi.com/2016/12/15/GuideToABAndRes/" target="_blank" rel="external">http://blog.shuiguzi.com/2016/12/15/GuideToABAndRes/</a><br></li>
<li>AssetBundle 管理机制 <a href="https://blog.uwa4d.com/archives/ABTheory.html" target="_blank" rel="external">https://blog.uwa4d.com/archives/ABTheory.html</a><br></li>
</ul></li>
</ul>
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline16" class="outline-4">
<h4 id="orgheadline16"><span class="section-number-4">4.1.2</span> Resources</h4>
<div class="outline-text-4" id="text-4-1-2">
<p>
class in UnityEngine<br>
<a href="https://docs.unity3d.com/ScriptReference/Resources.html" target="_blank" rel="external">https://docs.unity3d.com/ScriptReference/Resources.html</a><br>
Resources 类允许你查找和访问其中包含的资源。<br>
在编辑器中，Resources.FindObjectsOfTypeAll 可以用来定位资源和场景对象。<br>
Assets 目录下的 Resources 文件夹下的所有资源都可以通过 Resources.Load 函数来访问。可能存在多个“Resources”文件夹，当加载多个对象时，每个 Resources 都会被检查。<br>
在 Unity 中你通常不需要使用路径名称来访问资源，你可以声明一个成员变量来暴露一个到资源的引用，然后在 Inspector 界面给这个引用赋值。当使用了这项技术后，Unity 可以自动计算哪个资源被使用了。这从根本上将你的播放器尺寸减低为你在创建游戏中实际使用资源的尺寸。当你将资源放到 Resources 目录下时，自动计算将不会被使用，这样的话，Resources 文件夹中的所有资源都会在构建中被包含。<br>
使用路径名称的另一个确定时，它降低了代码的复用性，因为脚本对于资源放置在何处有特定的硬编码需求。另一方面使用暴露的引用也时一种自描述文档，可以让脚本的使用者立刻明白。<br>
但是，有很多时候通过资源名称来获取资源比在 Inspector 连接资源更方便。更重要的是有时候无法通过 Inspector 来给一个引用赋值。例如，当你从脚本中以程序的方式创建一个对象，又比如你想将一个贴图赋值为一个程序生成的 mesh。<br>
一些加载的资源，最需要注意的是纹理资源，即使是场景中没有实例存在也会占用着内存。可以通过调用 Resources.UnloadUnusedAssets 来回收这部分内存。<br>
</p>

<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #00ffff;">using</span> <span style="color: #7fffd4;">UnityEngine</span>;
<span style="color: #00ffff;">using</span> <span style="color: #7fffd4;">System.Collections</span>;

<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ExampleClass</span> : <span style="color: #98fb98;">MonoBehaviour</span> {
        <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Start</span>() {
                <span style="color: #98fb98;">GameObject</span> <span style="color: #eedd82;">go</span> = GameObject.CreatePrimitive(PrimitiveType.Plane);
                <span style="color: #98fb98;">Renderer</span> <span style="color: #eedd82;">rend</span> = go.GetComponent&lt;<span style="color: #98fb98;">Renderer</span>&gt;();
                rend.material.mainTexture = Resources.Load(<span style="color: #ffa07a;">"glass"</span>) <span style="color: #00ffff;">as</span> <span style="color: #98fb98;">Texture</span>;
        }
}
</pre>
</div>
</div>

<ol class="org-ol"><li><a id="orgheadline15"></a>Static Functions<br><div class="outline-text-5" id="text-4-1-2-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">FindObjectsOfTypeAll</td>
<td class="org-left">Returns a list of all objects of Type type.</td>
<td class="org-left">返回一个列表包含所有 type 类型的对象</td>
</tr>

<tr>
<td class="org-left">Load</td>
<td class="org-left">Loads an asset stored at path in a Resources folder.</td>
<td class="org-left">加载一个 Resources 文件夹下路径为 path 的资源</td>
</tr>

<tr>
<td class="org-left">LoadAll</td>
<td class="org-left">Loads all assets in a folder or file at path in a Resources folder.</td>
<td class="org-left">加载所有 Resources 文件下路径在 path 下的资源</td>
</tr>

<tr>
<td class="org-left">LoadAsync</td>
<td class="org-left">Asynchronously loads an asset stored at path in a Resources folder.</td>
<td class="org-left">异步加载一个 Resources 文件夹下路径为 path 的资源</td>
</tr>

<tr>
<td class="org-left">UnloadAsset</td>
<td class="org-left">Unloads assetToUnload from memory.</td>
<td class="org-left">从内存中卸载某个资源</td>
</tr>

<tr>
<td class="org-left">UnloadUnusedAssets</td>
<td class="org-left">Unloads assets that are not used.</td>
<td class="org-left">卸载所有不在被使用的资源</td>
</tr>
</tbody>
</table>
</div></li></ol>
</div>
<div id="outline-container-orgheadline23" class="outline-4">
<h4 id="orgheadline23"><span class="section-number-4">4.1.3</span> WWW</h4>
<div class="outline-text-4" id="text-4-1-3">
<p>
class in UnityEngine<br>
Description<br>
</p>

<p>
被用来简单地访问网页。<br>
</p>

<p>
这是一个小的功能模块用来获取 URLs 的内容。<br>
</p>

<p>
你可以通过调用 WWW(url) 在后台开启一个下载，它会返回一个新的 WWW 对象。<br>
</p>

<p>
你可以通过检查 isDone 属性来看下载是否完成，或者 yield 下载对象来自动等待它完成（这样不会阻塞游戏的其他部分）。<br>
</p>

<p>
如果你想从一个 web 服务器获取数据来集成到游戏中，例如获取一个高分列表或调用主页。也可以使用从 web 上下载下来的图片创建纹理，或者是流化并加载新的 web 播放器数据文件。<br>
</p>

<p>
WWW 类可以用于向服务器发送 GET 和 POST 请求。默认情况下使用 GET 方式，如果你提供了一个 postData 参数则使用 POST 方式。<br>
</p>

<p>
WWWForm 用于为 postData 参数创建可用表单数据。<br>
</p>
</div>

<ol class="org-ol"><li><a id="orgheadline17"></a>Tips<br><div class="outline-text-5" id="text-4-1-3-1">
<ol class="org-ol">
<li>传递给 WWW 类的 URLs 必须被"%"转义。<br></li>
<li><a href="http://" target="_blank" rel="external">http://</a>, <a href="https://" target="_blank" rel="external">https://</a> 以及 <a href="file:" target="_blank" rel="external">file:</a> 协议在 iPhone 上是支持的。<a href="ftp://" target="_blank" rel="external">ftp://</a> 协议的支持限定在匿名下载中。其他协议都是不可用的。<br></li>
<li>当在 Windows 和 Windows 应用商店中使用文件协议访问本地文件时，你必须指定使用 <a href="file:d:" target="_blank" rel="external">file:d:<a> (必须使用三个斜杠)<br></a></a></li>
</ol>

<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">Get the latest webcam shot from outside "Friday's" in Times Square</span>
<span style="color: #00ffff;">using</span> <span style="color: #7fffd4;">UnityEngine</span>;
<span style="color: #00ffff;">using</span> <span style="color: #7fffd4;">System.Collections</span>;

<span style="color: #00ffff;">public</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ExampleClass</span> : <span style="color: #98fb98;">MonoBehaviour</span> {
    <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">url</span> = <span style="color: #ffa07a;">"http://images.earthcam.com/ec_metros/ourcams/fridays.jpg"</span>;
    <span style="color: #98fb98;">IEnumerator</span> <span style="color: #87cefa;">Start</span>() {
        <span style="color: #98fb98;">WWW</span> <span style="color: #eedd82;">www</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">WWW</span>(url);
        <span style="color: #00ffff;">yield</span> <span style="color: #00ffff;">return</span> www;
        <span style="color: #00ffff;">if</span>(<span style="color: #98fb98;">string</span>.IsNullOrEmpty(www.error) == <span style="color: #7fffd4;">false</span>)
        {
            Debug.Log (url + <span style="color: #ffa07a;">"  "</span> + www.error);
            result(<span style="color: #7fffd4;">null</span>);
            <span style="color: #00ffff;">yield</span> <span style="color: #00ffff;">break</span>;
        }
        <span style="color: #98fb98;">Renderer</span> <span style="color: #eedd82;">renderer</span> = GetComponent&lt;<span style="color: #98fb98;">Renderer</span>&gt;();
        renderer.material.mainTexture = www.texture;
    }
}
</pre>
</div>
</div></li>

<li><a id="orgheadline18"></a>Variables<br><div class="outline-text-5" id="text-4-1-3-2">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">assetBundle</td>
<td class="org-left">Streams an AssetBundle that can contain any kind of asset from the project folder.</td>
<td class="org-left">流化一个 AssetBundle，其中可以包含项目文件夹中的任何类型的资源</td>
</tr>

<tr>
<td class="org-left">audioClip</td>
<td class="org-left">Returns a AudioClip generated from the downloaded data (Read Only).</td>
<td class="org-left">返回一个 AudioClip，该 AudioClip 是通过下载得到的数据生成的 （只读）</td>
</tr>

<tr>
<td class="org-left">bytes</td>
<td class="org-left">Returns the contents of the fetched web page as a byte array (Read Only).</td>
<td class="org-left">以字节数组的形式返回获取到的网页内容 （只读）</td>
</tr>

<tr>
<td class="org-left">bytesDownloaded</td>
<td class="org-left">The number of bytes downloaded by this WWW query (read only).</td>
<td class="org-left">通过 WWW 请求已经下载到的字节数 （只读）</td>
</tr>

<tr>
<td class="org-left">error</td>
<td class="org-left">Returns an error message if there was an error during the download (Read Only).</td>
<td class="org-left">返回错误消息，如果在下载过程中出现错误的话。（只读）</td>
</tr>

<tr>
<td class="org-left">isDone</td>
<td class="org-left">Is the download already finished? (Read Only)</td>
<td class="org-left">判断下载是否完成 （只读）</td>
</tr>

<tr>
<td class="org-left">movie</td>
<td class="org-left">Returns a MovieTexture generated from the downloaded data (Read Only).</td>
<td class="org-left">返回一个 MovieTexture，该 MovieTexture 是通过下载得到的数据生成的 （只读）</td>
</tr>

<tr>
<td class="org-left">progress</td>
<td class="org-left">How far has the download progressed (Read Only).</td>
<td class="org-left">下载的进度。 （只读）</td>
</tr>

<tr>
<td class="org-left">responseHeaders</td>
<td class="org-left">Dictionary of headers returned by the request.</td>
<td class="org-left">由请求所返回的头信息字典</td>
</tr>

<tr>
<td class="org-left">text</td>
<td class="org-left">Returns the contents of the fetched web page as a string (Read Only).</td>
<td class="org-left">以字符串形式返回获取到的网页内容 （只读）</td>
</tr>

<tr>
<td class="org-left">texture</td>
<td class="org-left">Returns a Texture2D generated from the downloaded data (Read Only).</td>
<td class="org-left">返回一个 Texture2D，该对象是通过下载得到的数据生成的 （只读）</td>
</tr>

<tr>
<td class="org-left">textureNonReadable</td>
<td class="org-left">Returns a non-readable Texture2D generated from the downloaded data (Read Only).</td>
<td class="org-left">返回一个不可读的 Texture2D， 该对象是通过下载得到的数据生成的 （只读）</td>
</tr>

<tr>
<td class="org-left">threadPriority</td>
<td class="org-left">Priority of AssetBundle decompression thread.</td>
<td class="org-left">AssetBundle 解压缩线程的优先级</td>
</tr>

<tr>
<td class="org-left">uploadProgress</td>
<td class="org-left">How far has the upload progressed (Read Only).</td>
<td class="org-left">上传精度。（只读）</td>
</tr>

<tr>
<td class="org-left">url</td>
<td class="org-left">The URL of this WWW request (Read Only).</td>
<td class="org-left">WWW 请求的 URL（只读）</td>
</tr>
</tbody>
</table>
</div></li>

<li><a id="orgheadline19"></a>Constructors<br><div class="outline-text-5" id="text-4-1-3-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">WWW</td>
<td class="org-left">Creates a WWW request with the given URL.</td>
<td class="org-left">使用给定的 URL 创建一个 WWW 请求</td>
</tr>
</tbody>
</table>
</div></li>

<li><a id="orgheadline20"></a>Public Functions<br><div class="outline-text-5" id="text-4-1-3-4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">Dispose</td>
<td class="org-left">Disposes of an existing WWW object.</td>
<td class="org-left">释放一个已经存在的 WWW 对象</td>
</tr>

<tr>
<td class="org-left">GetAudioClip</td>
<td class="org-left">Returns an AudioClip generated from the downloaded data (Read Only).</td>
<td class="org-left">获取 AudioClip</td>
</tr>

<tr>
<td class="org-left">GetAudioClipCompressed</td>
<td class="org-left">Returns an AudioClip generated from the downloaded data that is compressed in memory (Read Only).</td>
<td class="org-left">获取一个 AudioClip，它是通过下载得到的数据生成的，这些数据在内存中以压缩形式存在</td>
</tr>

<tr>
<td class="org-left">LoadImageIntoTexture</td>
<td class="org-left">Replaces the contents of an existing Texture2D with an image from the downloaded data.</td>
<td class="org-left">使用下载到的图片替换一个 Texture2D 对象的内容</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline21"></a>Static Functions<br><div class="outline-text-5" id="text-4-1-3-5">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">EscapeURL</td>
<td class="org-left">对字符串中的字符进行转码，使他们是 URL 友好的.</td>
</tr>

<tr>
<td class="org-left">LoadFromCacheOrDownload</td>
<td class="org-left">从 cache 中加载指定版本的 AssetBundle。如果 AssetBundle 没有被缓存下来，它将会自动被下载并保存到缓存，以备将来从本地存储中获取</td>
</tr>

<tr>
<td class="org-left">UnEscapeURL</td>
<td class="org-left">将 URL 友好型转换为普通文本</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline22"></a>ERROR Process<br><div class="outline-text-5" id="text-4-1-3-6">
<ul class="org-ul">
<li><p>
Windows 平台 "Could not resolve host: D"<br>
</p>
<div class="org-src-container">

<pre class="src src-csharp"><span style="color: #98fb98;">WWW</span> <span style="color: #eedd82;">loader</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">WWW</span>(Application.streamingAssetsPath + <span style="color: #ffa07a;">"/Table/"</span> + name);
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#35299;&#20915;&#26041;&#27861;&#20026;&#23558;&#19978;&#19968;&#34892;&#20195;&#30721;&#20462;&#25913;&#20026;&#19979;&#19968;&#34892;&#20195;&#30721;</span>
<span style="color: #98fb98;">WWW</span> <span style="color: #eedd82;">loader</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">WWW</span>(<span style="color: #ffa07a;">"file://"</span> + Application.streamingAssetsPath + <span style="color: #ffa07a;">"/Table/"</span> + name);
</pre>
</div></li>
</ul>
</div></li></ol>
</div>
</div>

<div id="outline-container-orgheadline42" class="outline-3">
<h3 id="orgheadline42"><span class="section-number-3">4.2</span> UnityEditor Class</h3>
<div class="outline-text-3" id="text-4-2">
</div><div id="outline-container-orgheadline27" class="outline-4">
<h4 id="orgheadline27"><span class="section-number-4">4.2.1</span> BuildPipeline</h4>
<div class="outline-text-4" id="text-4-2-1">
<p>
class in UnityEditor<br>
</p>

<p>
让你可以通过编程的方式来构建播放器或 AssetBundles，可以从 web 服务器来加载这些元素。<br>
<a href="#orgtarget1">1</a><br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline25"></a>Static Variables<br><div class="outline-text-5" id="text-4-2-1-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">isBuildingPlayer</td>
<td class="org-left">Is a player currently being built?</td>
<td class="org-left">当前是否在构建一个播放器</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline26"></a>Static Functions<br><div class="outline-text-5" id="text-4-2-1-2">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">BuildAssetBundles</td>
<td class="org-left">Build all AssetBundles specified in the editor.</td>
<td class="org-left">构建在 Editor 中指定的所有 AssetBundles</td>
</tr>

<tr>
<td class="org-left">BuildPlayer</td>
<td class="org-left">Builds a player.</td>
<td class="org-left">构建一个播放器</td>
</tr>

<tr>
<td class="org-left">GetCRCForAssetBundle</td>
<td class="org-left">Extract the crc checksum for the given AssetBundle.</td>
<td class="org-left">获取给定 AssetBundle 的校验码</td>
</tr>

<tr>
<td class="org-left">GetHashForAssetBundle</td>
<td class="org-left">Extract the hash for the given AssetBundle.</td>
<td class="org-left">获取给定 AssetBundle 的哈希值</td>
</tr>
</tbody>
</table>
</div></li></ol>
</div>

<div id="outline-container-orgheadline29" class="outline-4">
<h4 id="orgheadline29"><span class="section-number-4">4.2.2</span> AssetBundleBuild</h4>
<div class="outline-text-4" id="text-4-2-2">
<p>
struct in UnityEditor<br>
</p>

<p>
AssetBundle 构建地图的一个条目。<br>
该类和 BuildPipeline.BuildAssetBundles 一起使用来指定一个包的名称，以及该包中所含所有资源的名称。被传递给函数的 AssetBundleBuild 数组被称为构建地图，这是基于编辑器指定包内容方式的另一种选择。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline28"></a>Variables<br><div class="outline-text-5" id="text-4-2-2-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">assetBundleName</td>
<td class="org-left">AssetBundle name.</td>
<td class="org-left">AssetBundle 名称</td>
</tr>

<tr>
<td class="org-left">assetBundleVariant</td>
<td class="org-left">AssetBundle variant.</td>
<td class="org-left">AssetBundle 变量</td>
</tr>

<tr>
<td class="org-left">assetNames</td>
<td class="org-left">Asset names which belong to the given AssetBundle.</td>
<td class="org-left">属于该 AssetBundle 的所有资源的名称</td>
</tr>
</tbody>
</table>
</div></li></ol>
</div>

<div id="outline-container-orgheadline32" class="outline-4">
<h4 id="orgheadline32"><span class="section-number-4">4.2.3</span> AssetDatabase</h4>
<div class="outline-text-4" id="text-4-2-3">
<p>
class in UnityEditor<br>
</p>

<p>
访问资源并对资源进行操作的接口<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline30"></a>Static Functions<br><div class="outline-text-5" id="text-4-2-3-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">AddObjectToAsset</td>
<td class="org-left">将 objectToAdd 添加到一个已经存在的资源路径下</td>
</tr>

<tr>
<td class="org-left">AssetPathToGUID</td>
<td class="org-left">获取指定路径资源的 GUID</td>
</tr>

<tr>
<td class="org-left">ClearLabels</td>
<td class="org-left">移除挂载到资源的所有标签</td>
</tr>

<tr>
<td class="org-left">Contains</td>
<td class="org-left">对象是否是一个资源？</td>
</tr>

<tr>
<td class="org-left">CopyAsset</td>
<td class="org-left">复制 path 路径下的资源到新的路径 newPath 下</td>
</tr>

<tr>
<td class="org-left">CreateAsset</td>
<td class="org-left">在 path 路径下创建一个新的资源</td>
</tr>

<tr>
<td class="org-left">CreateFolder</td>
<td class="org-left">创建一个新的文件夹</td>
</tr>

<tr>
<td class="org-left">DeleteAsset</td>
<td class="org-left">删除 path 目录下的资源文件下</td>
</tr>

<tr>
<td class="org-left">ExportPackage</td>
<td class="org-left">Exports the assets identified by assetPathNames to a unitypackage file in fileName.</td>
</tr>

<tr>
<td class="org-left">FindAssets</td>
<td class="org-left">Search the asset database using a search filter string.</td>
</tr>

<tr>
<td class="org-left">GenerateUniqueAssetPath</td>
<td class="org-left">Creates a new unique path for an asset.</td>
</tr>

<tr>
<td class="org-left">GetAllAssetBundleNames</td>
<td class="org-left">Return all the AssetBundle names in the asset database.</td>
</tr>

<tr>
<td class="org-left">GetAssetBundleDependencies</td>
<td class="org-left">Given an assetBundleName, returns the list of AssetBundles that it depends on.</td>
</tr>

<tr>
<td class="org-left">GetAssetDependencyHash</td>
<td class="org-left">Returns the hash of all the dependencies of an asset.</td>
</tr>

<tr>
<td class="org-left">GetAssetOrScenePath</td>
<td class="org-left">Returns the path name relative to the project folder where the asset is stored.</td>
</tr>

<tr>
<td class="org-left">GetAssetPath</td>
<td class="org-left">Returns the path name relative to the project folder where the asset is stored.</td>
</tr>

<tr>
<td class="org-left">GetAssetPathFromTextMetaFilePath</td>
<td class="org-left">Gets the path to the asset file associated with a text .meta file.</td>
</tr>

<tr>
<td class="org-left">GetAssetPathsFromAssetBundle</td>
<td class="org-left">Get the paths of the assets which have been marked with the given assetBundle name.</td>
</tr>

<tr>
<td class="org-left">GetAssetPathsFromAssetBundleAndAssetName</td>
<td class="org-left">Get the asset paths from the given assetBundle name and asset name.</td>
</tr>

<tr>
<td class="org-left">GetCachedIcon</td>
<td class="org-left">Retrieves an icon for the asset at the given asset path.</td>
</tr>

<tr>
<td class="org-left">GetDependencies</td>
<td class="org-left">Given a pathName, returns the list of all assets that it depends on.</td>
</tr>

<tr>
<td class="org-left">GetLabels</td>
<td class="org-left">Returns all labels attached to a given asset.</td>
</tr>

<tr>
<td class="org-left">GetMainAssetTypeAtPath</td>
<td class="org-left">Returns the type of the main asset object at assetPath.</td>
</tr>

<tr>
<td class="org-left">GetSubFolders</td>
<td class="org-left">Given an absolute path to a directory, this method will return an array of all it's subdirectories.</td>
</tr>

<tr>
<td class="org-left">GetTextMetaFilePathFromAssetPath</td>
<td class="org-left">Gets the path to the text .meta file associated with an asset.</td>
</tr>

<tr>
<td class="org-left">GetUnusedAssetBundleNames</td>
<td class="org-left">Return all the unused assetBundle names in the asset database.</td>
</tr>

<tr>
<td class="org-left">GUIDToAssetPath</td>
<td class="org-left">Translate a GUID to its current asset path.</td>
</tr>

<tr>
<td class="org-left">ImportAsset</td>
<td class="org-left">Import asset at path.</td>
</tr>

<tr>
<td class="org-left">ImportPackage</td>
<td class="org-left">Imports package at packagePath into the current project.</td>
</tr>

<tr>
<td class="org-left">IsForeignAsset</td>
<td class="org-left">Is asset a foreign asset?</td>
</tr>

<tr>
<td class="org-left">IsMainAsset</td>
<td class="org-left">Is asset a main asset in the project window?</td>
</tr>

<tr>
<td class="org-left">IsMainAssetAtPathLoaded</td>
<td class="org-left">Returns true if the main asset object at assetPath is loaded in memory.</td>
</tr>

<tr>
<td class="org-left">IsNativeAsset</td>
<td class="org-left">Is asset a native asset?</td>
</tr>

<tr>
<td class="org-left">IsOpenForEdit</td>
<td class="org-left">Use IsOpenForEdit to determine if the asset is open for edit by the version control.</td>
</tr>

<tr>
<td class="org-left">IsSubAsset</td>
<td class="org-left">Does the asset form part of another asset?</td>
</tr>

<tr>
<td class="org-left">IsValidFolder</td>
<td class="org-left">Given an absolute path to a folder, returns true if it exists, false otherwise.</td>
</tr>

<tr>
<td class="org-left">LoadAllAssetRepresentationsAtPath</td>
<td class="org-left">Returns all asset representations at assetPath.</td>
</tr>

<tr>
<td class="org-left">LoadAllAssetsAtPath</td>
<td class="org-left">Returns an array of all asset objects at assetPath.</td>
</tr>

<tr>
<td class="org-left">LoadAssetAtPath</td>
<td class="org-left">Returns the first asset object of type type at given path assetPath.</td>
</tr>

<tr>
<td class="org-left">LoadMainAssetAtPath</td>
<td class="org-left">Returns the main asset object at assetPath.</td>
</tr>

<tr>
<td class="org-left">MoveAsset</td>
<td class="org-left">Move an asset file from one folder to another.</td>
</tr>

<tr>
<td class="org-left">MoveAssetToTrash</td>
<td class="org-left">Moves the asset at path to the trash.</td>
</tr>

<tr>
<td class="org-left">OpenAsset</td>
<td class="org-left">Opens the asset with associated application.</td>
</tr>

<tr>
<td class="org-left">Refresh</td>
<td class="org-left">Import any changed assets.</td>
</tr>

<tr>
<td class="org-left">RemoveAssetBundleName</td>
<td class="org-left">Remove the assetBundle name from the asset database. The forceRemove flag is used to indicate if you want to remove it even it's in use.</td>
</tr>

<tr>
<td class="org-left">RemoveUnusedAssetBundleNames</td>
<td class="org-left">Remove all the unused assetBundle names in the asset database.</td>
</tr>

<tr>
<td class="org-left">RenameAsset</td>
<td class="org-left">Rename an asset file.</td>
</tr>

<tr>
<td class="org-left">SaveAssets</td>
<td class="org-left">Writes all unsaved asset changes to disk.</td>
</tr>

<tr>
<td class="org-left">SetLabels</td>
<td class="org-left">Replaces that list of labels on an asset.</td>
</tr>

<tr>
<td class="org-left">StartAssetEditing</td>
<td class="org-left">Begin Asset importing. This lets you group several asset imports together into one larger import.</td>
</tr>

<tr>
<td class="org-left">StopAssetEditing</td>
<td class="org-left">Stop Asset importing. This lets you group several asset imports together into one larger import.</td>
</tr>

<tr>
<td class="org-left">ValidateMoveAsset</td>
<td class="org-left">Checks if an asset file can be moved from one folder to another. (Without actually moving the file).</td>
</tr>

<tr>
<td class="org-left">WriteImportSettingsIfDirty</td>
<td class="org-left">Writes the import settings to disk.</td>
</tr>
</tbody>
</table>
</div></li>

<li><a id="orgheadline31"></a>Delegates<br><div class="outline-text-5" id="text-4-2-3-2">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">ImportPackageCallback</td>
<td class="org-left">从 AssetDatabase.ImportPackage 回调函数调用的代理。packageName 是引起回调的 package 的名称</td>
</tr>

<tr>
<td class="org-left">ImportPackageFailedCallback</td>
<td class="org-left">从 AssetDatabase.ImportPackage 回调函数调用的代理。packageName 是引起回调的 package 的名称。errorMessage 是引起失败的原因</td>
</tr>
</tbody>
</table>
</div></li></ol>
</div>
<div id="outline-container-orgheadline41" class="outline-4">
<h4 id="orgheadline41"><span class="section-number-4">4.2.4</span> AssetImporter</h4>
<div class="outline-text-4" id="text-4-2-4">
<p>
class in UnityEditor/Inherits from:Object<br>
</p>

<p>
特地资源类型导入器的父类<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline33"></a>Variables<br><div class="outline-text-5" id="text-4-2-4-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">assetBundleName</td>
<td class="org-left">Get or set the AssetBundle name.</td>
<td class="org-left">获取或设置 AssetBundle 的名称</td>
</tr>

<tr>
<td class="org-left">assetBundleVariant</td>
<td class="org-left">Get or set the AssetBundle variant.</td>
<td class="org-left">获取或设置 AssetBundle 的变量</td>
</tr>

<tr>
<td class="org-left">assetPath</td>
<td class="org-left">The path name of the asset for this importer. (Read Only)</td>
<td class="org-left">该导入器处理的资源的路径名称 （只读）</td>
</tr>

<tr>
<td class="org-left">userData</td>
<td class="org-left">Get or set any user data.</td>
<td class="org-left">获取或设置任何用户数据</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline34"></a>Public Functions<br><div class="outline-text-5" id="text-4-2-4-2">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">SaveAndReimport</td>
<td class="org-left">Save asset importer settings if asset importer is dirty.</td>
<td class="org-left">如果资源导入设置被修改了，保存资源导入设置</td>
</tr>

<tr>
<td class="org-left">SetAssetBundleNameAndVariant</td>
<td class="org-left">Set the AssetBundle name and variant.</td>
<td class="org-left">设置 AssetBundle 的名称和变量</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline35"></a>Static Functions<br><div class="outline-text-5" id="text-4-2-4-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">GetAtPath</td>
<td class="org-left">Retrieves the asset importer for the asset at path.</td>
<td class="org-left">获取 path 路径下资源的导入器</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline40"></a>Inherited members<br><ol class="org-ol"><li><a id="orgheadline36"></a>Variables<br><div class="outline-text-6" id="text-4-2-4-4-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">hideFlags</td>
<td class="org-left">Should the object be hidden, saved with the scene or modifiable by the user?</td>
</tr>

<tr>
<td class="org-left">name</td>
<td class="org-left">The name of the object.</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline37"></a>Public Functions<br><div class="outline-text-6" id="text-4-2-4-4-2">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">GetInstanceID</td>
<td class="org-left">Returns the instance id of the object.</td>
</tr>

<tr>
<td class="org-left">ToString</td>
<td class="org-left">Returns the name of the game object.</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline38"></a>Static Functions<br><div class="outline-text-6" id="text-4-2-4-4-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">Destroy</td>
<td class="org-left">Removes a gameobject, component or asset.</td>
</tr>

<tr>
<td class="org-left">DestroyImmediate</td>
<td class="org-left">Destroys the object obj immediately.</td>
</tr>

<tr>
<td class="org-left">DontDestroyOnLoad</td>
<td class="org-left">Makes the object target not be destroyed automatically when loading a new scene.</td>
</tr>

<tr>
<td class="org-left">FindObjectOfType</td>
<td class="org-left">Returns the first active loaded object of Type type.</td>
</tr>

<tr>
<td class="org-left">FindObjectsOfType</td>
<td class="org-left">Returns a list of all active loaded objects of Type type.</td>
</tr>

<tr>
<td class="org-left">Instantiate</td>
<td class="org-left">Clones the object original and returns the clone.</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline39"></a>Operators<br><div class="outline-text-6" id="text-4-2-4-4-4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">bool</td>
<td class="org-left">Does the object exist?</td>
</tr>

<tr>
<td class="org-left">operator !=</td>
<td class="org-left">Compares if two objects refer to a different object.</td>
</tr>

<tr>
<td class="org-left">operator ==</td>
<td class="org-left">Compares two object references to see if they refer to the same object.</td>
</tr>
</tbody>
</table>
</div></li></ol></li></ol>
</div>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> unity </category>
            
        </categories>
        
        
        <tags>
            
            <tag> unity </tag>
            
            <tag> unity-doc </tag>
            
            <tag> working-in-unity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UnityShaderAndEffectCookbook]]></title>
      <url>http://wolfand11.coding.me/2016/08/20/unity/UnityShaderAndEffectCookbook/</url>
      <content type="html"><![CDATA[

<p>
本来只是一篇读书笔记，后来把 unity shader 相关的东西都加进来了。<br>
</p>
<a id="more"></a>
<div id="outline-container-orgheadline56" class="outline-2">
<h2 id="orgheadline56"><span class="section-number-2">1</span> Basic</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> SurfaceShader 工作流程图</h3>
<div class="outline-text-3" id="text-1-1">

<div class="figure">
<p><img src="SurfaceShaderFlow.jpg"><br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2"><span class="section-number-3">1.2</span> Properties</h3>
<div class="outline-text-3" id="text-1-2">
<p>
通过 Properties，可以将 shader 的一些参数暴露给编辑器进行设置。<br>
</p>
<div class="org-src-container">

<pre class="src src-shader"><span style="color: #00ffff;">Properties</span> {
    <span style="color: #eedd82;">_MyFloatValue</span>(<span style="color: #ffa07a;">"This is a Float"</span>, Float) = 1.5
    <span style="color: #eedd82;">_MyRangeValue</span>(<span style="color: #ffa07a;">"This is a Range"</span>, <span style="color: #00ffff;">Range</span>(0,10)) = 2.5
    <span style="color: #eedd82;">_MyColorValue</span>(<span style="color: #ffa07a;">"This is a ColorAmbient Color"</span>, <span style="color: #00ffff;">Color</span>) = (0.5,1,1,1)
    <span style="color: #eedd82;">_MyVectorValue</span>(<span style="color: #ffa07a;">"This is a Vector"</span>, Vector) = (1,2,3,4)
    <span style="color: #eedd82;">_My2DValue</span>(<span style="color: #ffa07a;">"This is a Texture 2D"</span>, 2D) = <span style="color: #ffa07a;">"white"</span> {}
    <span style="color: #eedd82;">_MyRectValue</span>(<span style="color: #ffa07a;">"This is a Texture Rect"</span>, Rect) = <span style="color: #ffa07a;">"white"</span> {}
    <span style="color: #eedd82;">_MyCubeValue</span>(<span style="color: #ffa07a;">"This is a Texture Cube"</span>, Cube) = <span style="color: #ffa07a;">"white"</span> {}
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3"><span class="section-number-3">1.3</span> SurfaceOutput</h3>
<div class="outline-text-3" id="text-1-3">
<div class="org-src-container">

<pre class="src src-shader"><span style="color: #ff0000;">// unity4</span>
<span style="color: #00ffff;">struct</span> SurfaceOutput { 
    <span style="color: #98fb98;">fixed3</span> Albedo;      <span style="color: #ff0000;">// &#26448;&#36136;&#30340;&#39068;&#33394;</span>
    <span style="color: #98fb98;">fixed3</span> Normal;      <span style="color: #ff0000;">// &#27861;&#32447;</span>
    <span style="color: #98fb98;">fixed3</span> <span style="color: #00ffff;">Emission</span>;    <span style="color: #ff0000;">//The emissive color of the pixel &#21457;&#20986;&#30340;&#39068;&#33394;</span>
    <span style="color: #98fb98;">fixed</span>  Alpha;        <span style="color: #ff0000;">//Alpha value for the pixel     &#29255;&#27573;&#30340;&#36879;&#26126;&#24230;</span>
    <span style="color: #98fb98;">half</span>  <span style="color: #00ffff;">Specular</span>;     <span style="color: #ff0000;">//Specular power of the pixel    &#38236;&#38754;&#39640;&#20809;&#31995;&#25968;</span>
    <span style="color: #98fb98;">fixed</span> Gloss;        <span style="color: #ff0000;">//Gloss intensity of the pixel  &#20809;&#27901;&#24378;&#24230;</span>
};
<span style="color: #ff0000;">// unity5</span>
<span style="color: #00ffff;">struct</span> SurfaceOutputStandard
{
    <span style="color: #98fb98;">fixed3</span> Albedo;
    <span style="color: #98fb98;">fixed3</span> Normal;
    <span style="color: #98fb98;">half3</span>  <span style="color: #00ffff;">Emission</span>;
    <span style="color: #98fb98;">fixed</span>  Alpha;
    <span style="color: #98fb98;">half</span>   Occlusion;
    <span style="color: #98fb98;">half</span>   Smoothness;
    <span style="color: #98fb98;">half</span>   Metallic;
};
<span style="color: #00ffff;">struct</span> SurfaceOutputStandardSpecular
{
    <span style="color: #98fb98;">fixed3</span> Albedo;
    <span style="color: #98fb98;">fixed3</span> Normal;
    <span style="color: #98fb98;">half3</span>  <span style="color: #00ffff;">Emission</span>;
    <span style="color: #98fb98;">fixed</span>  Alpha;
    <span style="color: #98fb98;">half</span>   Occlusion;
    <span style="color: #98fb98;">half</span>   Smoothness;
    <span style="color: #98fb98;">fixed3</span> <span style="color: #00ffff;">Specular</span>;
};
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4"><span class="section-number-3">1.4</span> Input</h3>
<div class="outline-text-3" id="text-1-4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">名称</th>
<th scope="col" class="org-left">类型</th>
<th scope="col" class="org-left">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">uv_XXX</td>
<td class="org-left">float2</td>
<td class="org-left">存放贴图的 uv 坐标</td>
</tr>

<tr>
<td class="org-left">viewDir</td>
<td class="org-left">float3</td>
<td class="org-left">存放视觉方向（也就是眼睛方向，摄像机方向）</td>
</tr>

<tr>
<td class="org-left">COLOR</td>
<td class="org-left">float4</td>
<td class="org-left">存放插值后的顶点颜色</td>
</tr>

<tr>
<td class="org-left">screenPos</td>
<td class="org-left">float4</td>
<td class="org-left">存放屏幕空间的坐标</td>
</tr>

<tr>
<td class="org-left">worldPos</td>
<td class="org-left">float3</td>
<td class="org-left">存放世界坐标</td>
</tr>

<tr>
<td class="org-left">worldRefl</td>
<td class="org-left">float3</td>
<td class="org-left">存放世界空间中的反射向量</td>
</tr>

<tr>
<td class="org-left">worldNormal</td>
<td class="org-left">float3</td>
<td class="org-left">如果 surface shader 没有修改 o.Normal 则存放世界空间的法向量</td>
</tr>

<tr>
<td class="org-left">worldRefl;INTERNAL_DATA</td>
<td class="org-left">float3</td>
<td class="org-left">如果 surface shader 修改了 o.Normal，则存放世界空间的反射向量。</td>
</tr>

<tr>
<td class="org-left">worldNormal;INTERNAL_DATA</td>
<td class="org-left">float3</td>
<td class="org-left">如果 surface shader 修改了 o.Normal，则存放世界空间的法向量。</td>
</tr>
</tbody>
</table>
<pre class="example">
Tips:
使用 worldRefl;INTERNAL_DATA 时， 通过 WorldReflectionVector (IN, o.Normal)来从法线贴图获得反射向量
使用 worldNormal;INTERNAL_DATA 时，通过 WorldNormalVector（IN, o.Normal）来从法线贴图获得法线
</pre>
<p>
<a href="http://docs.unity3d.com/Manual/SL-SurfaceShaders.html" target="_blank" rel="external">Unity 官方文档</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline31" class="outline-3">
<h3 id="orgheadline31"><span class="section-number-3">1.5</span> shader 的代码结构</h3>
<div class="outline-text-3" id="text-1-5">
<div class="org-src-container">

<pre class="src src-shader"><span style="color: #00ffff;">Shader</span> <span style="color: #ffa07a;">"GroupName/SubGroupName/ShaderName"</span>
{
    <span style="color: #00ffff;">Properties</span> {
        <span style="color: #eedd82;">_MyFloatValue</span>(<span style="color: #ffa07a;">"This is a Float"</span>, Float) = 1.5
        <span style="color: #ff0000;">//......</span>
    }
    <span style="color: #00ffff;">SubShader</span> 
    {
        <span style="color: #00ffff;">Tags</span> { <span style="color: #ffa07a;">"Queue"</span> = <span style="color: #ffa07a;">"Transparent"</span> <span style="color: #ffa07a;">"RenderType"</span>=<span style="color: #ffa07a;">"Opaque"</span>}
        <span style="color: #00ffff;">ZWrite</span> Off <span style="color: #00ffff;">ColorMask</span> RGB
        <span style="color: #00ffff;">CGPROGRAM</span>
<span style="color: #b0c4de;">        #pragma</span> surface surf Lambert alpha:fade
        <span style="color: #ff0000;">/** surface shader **/</span>
        <span style="color: #00ffff;">ENDCG</span>
        <span style="color: #00ffff;">Pass</span> {
            <span style="color: #00ffff;">Name</span> <span style="color: #ffa07a;">"FORWARD"</span>
            <span style="color: #00ffff;">Tags</span> { <span style="color: #ffa07a;">"LightMode"</span> = <span style="color: #ffa07a;">"ForwardBase"</span> }
<span style="color: #b0c4de;">            #pragma</span> surface surf Lambert alpha:fade
        }
        <span style="color: #00ffff;">Pass</span> {
            <span style="color: #ff0000;">//......</span>
        }
    }
    <span style="color: #00ffff;">SubShader</span> {
        <span style="color: #ff0000;">//......</span>
    }
    <span style="color: #ff0000;">//....  other subshader</span>
}
</pre>
</div>
</div>
<div id="outline-container-orgheadline5" class="outline-4">
<h4 id="orgheadline5"><span class="section-number-4">1.5.1</span> Properties</h4>
<div class="outline-text-4" id="text-1-5-1">
<p>
Properties 指定了 surface shader 中可供调节的变量，这些变量可以被显示在 Inspector 中。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline24" class="outline-4">
<h4 id="orgheadline24"><span class="section-number-4">1.5.2</span> SubShader</h4>
<div class="outline-text-4" id="text-1-5-2">
<p>
1 每个 Shader 都包含一个 SubShader 列表。SubShader 列表中至少要有一个 SubShader。当加载一个 Shader 时，Unity 会遍历其包含的 SubShader 列表，选择第一个用户机器所支持的 SubShader。如果没有 SubShader 被支持，则 Unity 会尝试使用 fallback shader。<br>
</p>

<p>
2 一个 SubShader 定义了一个 Pass 列表，也就是说一个 SubShader 中包含多个 Pass，在 SubShader 中可以有选择地设置其中包含的所有 Pass 所公用的任何状态。此外 SubShader 还有额外的 Tags 可以被设置。<br>
</p>

<p>
3 Unity 选定了 SubShader 后，当渲染一个物体时，SubShader 中的每个 Pass 会导致对该物体的一次渲染。<br>
</p>

<p>
4 任何在 Pass 中可用的状态都可以放置在 SubShader 中，这样的话 SubShader 中的所有 Pass 都会公用该状态的设置。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline16"></a>SubShader Tags<br><ol class="org-ol"><li><a id="orgheadline12"></a>渲染次序 Queue<br><div class="outline-text-6" id="text-1-5-2-1-1">
<p>
可以通过 Queue tag 来确定物体的渲染顺序。Shader 决定了它的物体所属的渲染队列，这样就可以确保透明物体在不透明物体绘制之后再绘制。Unity 有四个预定义的渲染队列，但是默认的渲染队列之间可以定义更多的渲染队列。<br>
</p>

<p>
每个渲染队列在内部是通过一个整型的索引来表示的。Background 为 1000，Geometry 为 2000，AlphaTest 为 2450，Transparent 为 3000，Overlay 为 4000。<br>
</p>

<p>
小于等于 2500 的渲染队列，被当做不透明物体的渲染队列，并且可以调整物体的渲染顺序来达到最佳性能。更高的渲染队列被认为是透明物体的渲染队列，并且物体依据距离来排序，从最远的物体开始渲染直到最近的物体。Skyboxes 是在所有不透明物体和所有透明物体之间被绘制的。<br>
</p>
<pre class="example">
Tags { "Queue" = "Transparent" }
</pre>
</div>
<ol class="org-ol"><li><a id="orgheadline6"></a>Background<br><div class="outline-text-7" id="text-1-5-2-1-1-1">
<p>
这个渲染队列在任何其他队列之前被渲染。<br>
</p>
</div></li>
<li><a id="orgheadline7"></a>Geometry (默认的渲染队列)<br><div class="outline-text-7" id="text-1-5-2-1-1-2">
<p>
不透明的几何体可以使用这个渲染队列<br>
</p>
</div></li>
<li><a id="orgheadline8"></a>AlphaTest<br><div class="outline-text-7" id="text-1-5-2-1-1-3">
<p>
需要 Alpha 测试的几何体使用该队列。它独立于 Geometry 渲染队列，因为所有固体渲染之后，再渲染需要 alpha-tested 物体会更高效。(因为只对需要 Alpha 测试的物体开启 Alpha 测试，不需要 Alpha 测试的不会放在该队列，所以高效)<br>
</p>
</div></li>
<li><a id="orgheadline9"></a>Transparent<br><div class="outline-text-7" id="text-1-5-2-1-1-4">
<p>
Geometry 和 AlphaTest 之后渲染的队列，该队列以从后到前的顺序渲染。需要 alpha-blended 的物体使用该队列。<br>
</p>
</div></li>
<li><a id="orgheadline10"></a>Overlay<br><div class="outline-text-7" id="text-1-5-2-1-1-5">
<p>
该渲染队列可以实现覆盖效果。任何最终渲染的物体使用该队列。<br>
</p>
</div></li>
<li><a id="orgheadline11"></a>自定义渲染队列<br><div class="outline-text-7" id="text-1-5-2-1-1-6">
<pre class="example">
Tags { "Queue" = "Geometry+1" }
</pre>
</div></li></ol></li>
<li><a id="orgheadline13"></a>渲染类型 RenderType<br><div class="outline-text-6" id="text-1-5-2-1-2">
<p>
RenderType 将 shaders 归类为很多不同的预定义的组。<br>
</p>
<div class="org-src-container">

<pre class="src src-cg">Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }
</pre>
</div>
<p>
Shader Replacement 会用到该设置。/Manual/SL-ShaderReplacement.html<br>
</p>

<p>
有时候通过该设置来制作摄像机的深度贴图。/Manual/SL-CameraDepthTexture.html<br>
</p>
</div></li>
<li><a id="orgheadline14"></a>DisableBatching<br><div class="outline-text-6" id="text-1-5-2-1-3">
<p>
有些 Shader 在 DrawCallBatching 下是不可用的，因为 DrawCallBatching 会将所有的几何体变换到世界空间，因此本地空间信息会丢失。<br>
</p>
<div class="org-src-container">

<pre class="src src-shader"><span style="color: #00ffff;">Tags</span> {<span style="color: #ffa07a;">"DisableBatching"</span> = <span style="color: #ffa07a;">"True"</span>}       <span style="color: #ff0000;">// &#20026;&#35813; shader &#22987;&#32456;&#31105;&#27490; Batching</span>
<span style="color: #00ffff;">Tags</span> {<span style="color: #ffa07a;">"DisableBatching"</span> = <span style="color: #ffa07a;">"False"</span>}      <span style="color: #ff0000;">// &#20026;&#35813; shader &#24320;&#21551; Batching</span>
<span style="color: #00ffff;">Tags</span> {<span style="color: #ffa07a;">"DisableBatching"</span> = <span style="color: #ffa07a;">"LODFading"</span>}  <span style="color: #ff0000;">// LOD Fading &#24320;&#21551;&#26102;&#65292;&#31105;&#27490; Batching</span>
</pre>
</div>
</div></li>
<li><a id="orgheadline15"></a>其他的一些 tag<br><div class="outline-text-6" id="text-1-5-2-1-4">
<pre class="example">
ForceNoShadowCasting
IgnoreProjector
CanUseSpriteAtlas
PreviewType
</pre>
</div></li></ol></li>
<li><a id="orgheadline22"></a>SurfaceShader 编译指令<br><div class="outline-text-5" id="text-1-5-2-2">
<p>
surface shader 被放置在 CGPROGRAM &#x2026; ENDCG 块中。有两点需要注意：<br>
</p>

<p>
1 surface shader 必须放在 SubShader 块中，不能放在 Pass 中。Unity 会通过编译将其放在不同 Pass 中。<br>
</p>

<p>
2 使用下面的指令来指明一个 surface shader<br>
</p>
<div class="org-src-container">

<pre class="src src-shader"><span style="color: #b0c4de;">#pragma</span> surface surfaceFunction lightModel [optionalparams]
</pre>
</div>

<p>
Optional Parameters<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline17"></a>透明和 alpha 测试<br><div class="outline-text-6" id="text-1-5-2-2-1">
<p>
透明和 alpha 测试通过 alpha 和 alphatest 指令来控制。透明通常有两种：传统的 alpha 混合 或者 更物理拟真的预乘混合（这种方式允许半透明表面保持合适的镜面反射）。开启半透明可以使生成的 surface shader 代码包含混合命令；反之开启 alpha cutout 将会在生成的片段着色器中，基于给定的值，执行片段丢弃。<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">alpha 或 alpha:auto</td>
<td class="org-left">为普通光照函数选取透明渐变 并且 为基于物理的光照函数选取预乘混合</td>
</tr>

<tr>
<td class="org-left">alpha:blend</td>
<td class="org-left">开启 alpha 混合</td>
</tr>

<tr>
<td class="org-left">alpha:fade</td>
<td class="org-left">开启传统的透明渐变</td>
</tr>

<tr>
<td class="org-left">alpha:premul</td>
<td class="org-left">开启预乘 alpha 透明</td>
</tr>

<tr>
<td class="org-left">alphatest:VariableName</td>
<td class="org-left">开启 alpha 镂空</td>
</tr>

<tr>
<td class="org-left">keepalpha</td>
<td class="org-left">使用该选项可以允许保持光照函数中的 alpha 值即使是不透明 surface shader</td>
</tr>

<tr>
<td class="org-left">decal:add</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">decal:blend</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>

<p>
关于 keepalpha:<br>
无论从光照计算返回的或从 output 结构体中输入的 alpha 值为多少，默认情况下不透明 surface shader 都会将 1.0 写入 alpha 通道，而 keepalpha 选项可以允许保持光照函数中的 alpha 值。<br>
</p>

<p>
关于预乘混合可以查看以下文档：<br>
<a href="https://developer.nvidia.com/content/alpha-blending-pre-or-not-pre" target="_blank" rel="external">https://developer.nvidia.com/content/alpha-blending-pre-or-not-pre</a><br>
</p>
</div></li>
<li><a id="orgheadline18"></a>用户自定义修改函数<br><div class="outline-text-6" id="text-1-5-2-2-2">
<p>
用户自定义修改函数可以用来修改或计算输入的顶点数据，或者修改最终计算出来的片段颜色<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">vertex:VertexFunction</td>
<td class="org-left">自定义顶点修改函数</td>
</tr>

<tr>
<td class="org-left">finalcolor:ColorFunction</td>
<td class="org-left">自定义最终颜色修改函数</td>
</tr>

<tr>
<td class="org-left">finalgbuffer:ColorFunction</td>
<td class="org-left">自定义延迟渲染来修改 gbuffer 内容</td>
</tr>

<tr>
<td class="org-left">finalprepass:ColorFunction</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline19"></a>阴影和曲面细分<br><div class="outline-text-6" id="text-1-5-2-2-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">addshadow</td>
<td class="org-left">产生一个阴影投射阶段</td>
</tr>

<tr>
<td class="org-left">fullforwadshadows</td>
<td class="org-left">在正向渲染中支持所有类型的阴影</td>
</tr>

<tr>
<td class="org-left">tessellate:TessFunction</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline20"></a>代码生成选项<br><div class="outline-text-6" id="text-1-5-2-2-4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">exclude_path:deferred</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">exclude_path:forward</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">exclude_path:prepass</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">noshadow</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">noambient</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">novertexlights</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">nolightmap</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">nodynlightmap</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">nodirlightmap</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">nofog</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">nometa</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">noforwardadd</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline21"></a>其他选项<br><div class="outline-text-6" id="text-1-5-2-2-5">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">softvegetation</td>
<td class="org-left">只有柔软植物开启才执行该 surface shader</td>
</tr>

<tr>
<td class="org-left">interpolateview</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">halfasview</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">approxview</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">dualforward</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div></li></ol></li>
<li><a id="orgheadline23"></a>LOD<br><div class="outline-text-5" id="text-1-5-2-3">
<p>
LOD 很简单，它是 Level of Detail 的缩写，在这里例子里我们指定了其为 200（其实这是 Unity 的内建 Diffuse 着色器的设定值）。这个数值决定了我们能用什么样的 Shader。在 Unity 的 Quality Settings 中我们可以设定允许的最大 LOD，当设定的 LOD 小于 SubShader 所指定的 LOD 时，这个 SubShader 将不可用。Unity 内建 Shader 定义了一组 LOD 的数值，我们在实现自己的 Shader 的时候可以将其作为参考来设定自己的 LOD 数值，这样在之后调整根据设备图形性能来调整画质时可以进行比较精确的控制。<br>
</p>

<p>
VertexLit 及其系列 = 100<br>
Decal, Reflective VertexLit = 150<br>
Diffuse = 200<br>
Diffuse Detail, Reflective Bumped Unlit, Reflective Bumped VertexLit = 250<br>
Bumped, Specular = 300<br>
Bumped Specular = 400<br>
Parallax = 500<br>
Parallax Specular = 600<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline30" class="outline-4">
<h4 id="orgheadline30"><span class="section-number-4">1.5.3</span> Pass</h4>
<div class="outline-text-4" id="text-1-5-3">
</div><ol class="org-ol"><li><a id="orgheadline25"></a>Name<br><div class="outline-text-5" id="text-1-5-3-1">
<p>
为 Pass 定义一个名称，这样就可以通过 UsePass 来引用它了。<br>
UsePass "VertexLit/SHADOWCASTER"<br>
</p>
</div></li>
<li><a id="orgheadline28"></a>Tags<br><div class="outline-text-5" id="text-1-5-3-2">
<p>
Pass 使用 Tags 来告诉渲染引擎，什么时候、如何被渲染。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline26"></a>LightMode<br><div class="outline-text-6" id="text-1-5-3-2-1">
<p>
LightMode tag 定义了 Pass 在光照管线中的角色。这些 tags 很少手动指定。<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Name</th>
<th scope="col" class="org-left">Detail</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Always</td>
<td class="org-left">总是渲染，没有光照被应用</td>
</tr>

<tr>
<td class="org-left">ForwardBase</td>
<td class="org-left">ForwardRendering 中被应用，环境光、主要的定向光、vertex/SH 光、光照贴图被应用</td>
</tr>

<tr>
<td class="org-left">ForwardAdd</td>
<td class="org-left">ForwardRendering 中附加的基于像素的光照被应用，每个灯光一个 Pass</td>
</tr>

<tr>
<td class="org-left">Deferred</td>
<td class="org-left">DeferredRendring，渲染 g-buffer</td>
</tr>

<tr>
<td class="org-left">ShadowCaster</td>
<td class="org-left">渲染物体的深度到阴影贴图或深度贴图中</td>
</tr>

<tr>
<td class="org-left">PrepassBase</td>
<td class="org-left">legacy Deferred Lighting,渲染法线和镜面指数</td>
</tr>

<tr>
<td class="org-left">PrepassFinal</td>
<td class="org-left">legacy Deferred Lighting,渲染最终颜色</td>
</tr>

<tr>
<td class="org-left">Vertex</td>
<td class="org-left">legacy Vertex Lit rendering,当物体没有光照贴图，所有顶点光照被应用</td>
</tr>

<tr>
<td class="org-left">VertexLMRGBM</td>
<td class="org-left">legacy Vertex Lit rendering,当物体有光照贴图，光照贴图按照 RGBM 编码(PC&amp;console)</td>
</tr>

<tr>
<td class="org-left">VertexLM</td>
<td class="org-left">legacy Vertex Lit rendering,当物体有光照贴图，光照贴图按照 Double-LDR 编码（Mobile）</td>
</tr>
</tbody>
</table>
<div class="org-src-container">

<pre class="src src-cg">Tags { "LightMode" = "ForwardAdd" }
</pre>
</div>
</div></li>
<li><a id="orgheadline27"></a>RequireOptions<br><div class="outline-text-6" id="text-1-5-3-2-2">
<p>
指定 Pass 在满足某些外部条件时才被渲染。<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Name</th>
<th scope="col" class="org-left">Detail</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">SoftVegetation</td>
<td class="org-left">在 Quality Settings 中开启 SoftVegetation 才渲染</td>
</tr>
</tbody>
</table>
</div></li></ol></li>
<li><a id="orgheadline29"></a>Render State Setup<br><div class="outline-text-5" id="text-1-5-3-3">
<p>
Pass 可以设置图形硬件的渲染状态。<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Name</th>
<th scope="col" class="org-left">Detial</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Cull Back / Front / Off</td>
<td class="org-left">剔除</td>
</tr>

<tr>
<td class="org-left">ZTest (Less / Greater / LEqual / GEqual / Equal / NotEqual / Always)</td>
<td class="org-left">深度测试</td>
</tr>

<tr>
<td class="org-left">ZWrite (On / Off)</td>
<td class="org-left">深度缓存区写入</td>
</tr>

<tr>
<td class="org-left">Blend SourceBlendMode DestBlendMode</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">Blend SourceBlendMode DestBlendMode, AlphaSourceBlendMode AlphaDestBlendMode</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">ColorMask RGB / A / 0 / any combination of R, G, B, A</td>
<td class="org-left">ColorMask 0 将关闭颜色缓冲区中所有通道的写入</td>
</tr>

<tr>
<td class="org-left">Offset OffsetFactor, OffsetUnits</td>
<td class="org-left">设置深度值的偏移</td>
</tr>
</tbody>
</table>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline34" class="outline-3">
<h3 id="orgheadline34"><span class="section-number-3">1.6</span> 贴图</h3>
<div class="outline-text-3" id="text-1-6">
</div><div id="outline-container-orgheadline32" class="outline-4">
<h4 id="orgheadline32"><span class="section-number-4">1.6.1</span> 贴图过滤模式</h4>
<div class="outline-text-4" id="text-1-6-1">
<ol class="org-ol">
<li>Bilinear 对于大多数应用，双线性过滤可以耗费不大，而且可以有效平滑贴图。<br></li>
<li>Point    如果你在构建一个 2D 游戏，双线性过滤可能会导致模糊。这种情况下，你可以使用 Point 指定无过滤。<br></li>
</ol>
</div>
</div>
<div id="outline-container-orgheadline33" class="outline-4">
<h4 id="orgheadline33"><span class="section-number-4">1.6.2</span> Aniso Level</h4>
<div class="outline-text-4" id="text-1-6-2">
<p>
当从一个很陡峭的角度看贴图，贴图采样很可能会产生锯齿。你可以将 AnisoLevel 设置的更高来减低锯齿。这通常对于地面和屋顶贴图很有效。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline54" class="outline-3">
<h3 id="orgheadline54"><span class="section-number-3">1.7</span> Unity's Rendering Pipline</h3>
<div class="outline-text-3" id="text-1-7">
<p>
Shaders 定义了一个物体看起来是怎样的，以及这个物体如何和光照交互。因为光照计算必须在 shader 中进行，并且可能有很多种类型的光照和阴影，所以编写高质量的可用的 shaders 将是一个复杂的任务。为了让这项工作变的简单，Unity 提供了 Surface Shaders，其中所有的光照、阴影、光照贴图，正向渲染、延迟渲染等事情都被自动化管理。<br>
</p>
<pre class="example">
本小结内容翻译自 Unity 官方文档：
SL-RenderPipeline.html
RenderTech-ForwardRendering.html
RenderTech-DeferredShading.html
</pre>
</div>
<div id="outline-container-orgheadline35" class="outline-4">
<h4 id="orgheadline35"><span class="section-number-4">1.7.1</span> Rendering Path</h4>
<div class="outline-text-4" id="text-1-7-1">
<p>
光照是如何被应用以及 shader 的哪些 Passes 被使用都依赖于使用了哪种 Rendering Path. shader 中的每个 Pass 通过 Pass Tags 来传达它的光照类型。<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">采用的 Rendering Path</th>
<th scope="col" class="org-left">被使用的 Passes</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Forward Rendering</td>
<td class="org-left">ForwardBase and ForwardAdd</td>
</tr>

<tr>
<td class="org-left">Deferred Shading</td>
<td class="org-left">Deferred</td>
</tr>

<tr>
<td class="org-left">legacy Deferred Lighting</td>
<td class="org-left">PrepassBase and PrepassFinal</td>
</tr>

<tr>
<td class="org-left">legacy Vertex Lit</td>
<td class="org-left">Vertex, VertexLMRGBM and VertexLM</td>
</tr>
</tbody>
</table>
<p>
上面的任何 Rendering Path，用来渲染 Shadows 或深度贴图时，ShadowCaster Pass 会被用到。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline44" class="outline-4">
<h4 id="orgheadline44"><span class="section-number-4">1.7.2</span> Forward Rendering path</h4>
<div class="outline-text-4" id="text-1-7-2">
<p>
ForwardBase pass 用于一次性渲染环境光，光照贴图，主要的定向光以及不重要的光照(Spherical Harmonics)。<br>
</p>

<p>
ForwardAdd pass 用于任何附加的基于像素的光照。被该光照照明的每个物体都会调用一次该 Pass。<br>
</p>

<p>
如果 Forward Rendering 被使用，但是 shader 中没有合适的 Passes（没有 ForwardBase 或 ForwardAdd 存在），则物体会被按照 Vertex Lit path 的方式渲染。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline36"></a>Forward Rendering Detail<br><div class="outline-text-5" id="text-1-7-2-1">
<p>
依据光照对物体的影响，Forward Rendering path 使用一个或多个 Pass 来渲染这个物体。依据每个光照的不同设置和亮度，Forward Rendering 会对光照有不同的处理。<br>
</p>
</div></li>
<li><a id="orgheadline39"></a>Implementation Detail<br><div class="outline-text-5" id="text-1-7-2-2">
<p>
在正向渲染中，一些影响到每个物体的最亮的光照会基于每个像素来计算。然后，最多有 4 个点光照被基于每个顶点来计算。剩余的光照按照 Spherical Harmonics 方式来计算，该方法速度比较快，但是只是一种近似计算。<br>
</p>

<p>
一个光照是否会被基于每个像素来计算依赖于下面几点：<br>
1 光照的 RenderMode 属性被设置为 Not Important 将使用 per-vertex 或 SH 方式计算。<br>
2 最亮的方向光总是使用 per-pixel 方式来计算的。<br>
3 光照的 RenderMode 属性被设置为 Important 将使用 per-pixel 方式计算。<br>
4 按照上面的方式，使用 per-pixel 方式计算的光照数目少于 QualitySetting 中 current Pixel Light Count 所设置的数量时，更多的光照会使用 per-pixel 方式来计算,从而减低明亮度。(光照是按照距离的平方衰减的，而顶点光照是线性插值，所以 per-vertex 会更亮)<br>
</p>

<p>
Tips:<br>
per-vertex 就是光照计算在顶点着色器中进行。<br>
per-pixel 就是光照计算在片段着色器中进行。<br>
SH 方式其实是计算光照的一种方法，这种计算方法是在顶点着色器中进行的。<br>
</p>

<p>
使用 Forward Rendering 时，Unity 中的渲染处理在下面的 Passes 中进行：<br>
Base Pass 应用于 per-pixel 方式的方向光照 和 所有 per-vertex/Spherical Harmonics 方式的光照。<br>
其他的 per-pixel 方式的光照在附加的 Passes 中进行渲染，一个 Pass 对应每个光照。<br>
</p>

<p>
例如，如果有一个物体被很多个光照所影响（下图 1 中的一个圆圈，被 A 到 H 个光照影响）：<br>
我们假设光照 A 到 H 有相同的颜色和亮度，并且它们都设置 RenderMode 为 Auto。最亮的光将会使用 per-pixel 方式来计算（A 到 D）。<br>
然后，最多 4 个光源会使用 per-vertex 方式来计算（D 到 G），最后剩余的光照使用 SH 方式来计算(G 到 H)。<br>
如下图 2 所示，光照分组会有重叠。最后的使用 per-pixel 方式计算的光照会和使用 per-vertex 方式计算的结果混合，这样可以在物体运动或光照移动时减少“light popping”。<br>
<img src="1ForwardLightsExample.png"><br>
<img src="2ForwardLightsClassify.png"><br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline37"></a>Base Pass<br><div class="outline-text-6" id="text-1-7-2-2-1">
<p>
Base pass 使用一个 per-pixel 方式计算的方向光照和所有的 SH 方式计算的光照渲染物体。这个阶段也会添加任何光照贴图，环境光<br>
和发射光到 shader 中。该 Pass 中的方向光可以有阴影。注意光照贴图的物体不会从 SH 方式计算的光照中获得照明。<br>
</p>
</div></li>
<li><a id="orgheadline38"></a>Additional Passes<br><div class="outline-text-6" id="text-1-7-2-2-2">
<p>
Additional Passes 用来渲染影响到物体的每个额外的 per-pixel 方式计算的光照。在该 Pass 计算的光照不能有阴影效果。<br>
（所以 Forward Rendering 只支持一个方向光有阴影）<br>
</p>
</div></li></ol></li>
<li><a id="orgheadline43"></a>Performance Considerations<br><div class="outline-text-5" id="text-1-7-2-3">
<p>
Spherical Harmonics 方式计算的光照渲染速度非常快。他们消耗很少的 CPU 资源，并且对于 GPU 基本是无消耗的（也就是说，Base Passes 总是计算 SH 方式计算的光照，但是，基于 SH 的工作方式，无论有多少光照按照 SH 方式计算，其消耗都是一样的）。<br>
SH 方式计算光照的缺点有：<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline40"></a>SH 是基于物体顶点的，而不是基于片段的。这意味着他们不支持光照的 Cookies 或法线贴图。<br></li>
<li><a id="orgheadline41"></a>SH 是非常低频率的。你不能对 SH 方式计算的光照有有尖锐的光照变换。他们只会影响漫反射光照（对于镜面光来说频率太低了）<br></li>
<li><a id="orgheadline42"></a>SH 是非局部的。点光源、聚光灯使用 SH 方式计算时，若靠近某些表面时看起来会是错误的。<br><div class="outline-text-7" id="text-1-7-2-3-0-3">
<p>
总的来说，SH 方式计算光照对于低动态的物体来说通常是效果很好的。<br>
</p>
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline51" class="outline-4">
<h4 id="orgheadline51"><span class="section-number-4">1.7.3</span> Deferred Shading path</h4>
<div class="outline-text-4" id="text-1-7-3">
<p>
Deferred Pass 用来渲染光照计算需要的所有的信息（在内置 shaders 中会渲染：diffuse color, specular color, smoothness, world space normal, emission）。它还会添加光照贴图，反射探针以及环境光照到 emission 通道。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline45"></a>Overview<br><div class="outline-text-5" id="text-1-7-3-1">
<p>
当使用延迟渲染时，对于可以影响一个物体的光照数量没有限制。所有的光照都是按照 per-pixel 方式计算的,这就意味着他们都可以正确地和法线贴图交互。另外所有的光照都可以有 cookies 和阴影。<br>
</p>

<p>
延迟渲染的优势是光照处理的开销和被照亮的像素数量成正比。这是由场景中的光的体积大小决定的和被照亮的物体的数目无关。所以，保持小体积的光照可以改善性能。延迟渲染还有高度的一致性和可预测性。每个光照的效果是基于每个像素计算的，所以不会有在大的三角形上的光照计算被分解。<br>
</p>

<p>
延迟渲染的缺点是，对于反锯齿没有真正的支持，并且不能够处理半透明的物体（这类物体需要通过 Forward Rendering 来渲染）。不支持 Mesh Render 的 Receive Shadows 标记，对于剔除层 masks 的支持也很有限。你只能使用最多 4 个剔除 masks。也就是说，你的剔除层 mask 必须至少包含所有的层减去任意的 4 个层，所以 32 个层中的 28 个层必须被设置。否则你将会得到变花的图像。<br>
</p>
</div></li>
<li><a id="orgheadline46"></a>Requirements<br><div class="outline-text-5" id="text-1-7-3-2">
<p>
延迟渲染需要图形卡包含 Multiple Render Targets，Shader Model 3.0 或者更高，支持深度贴图以及双面的模板缓冲区。大多数 PC2005 年以后的显卡支持延迟渲染，包括 GeForce6 以及更高，RadeonX1300 以及更高，InterG45+以及更高。在移动设备中，由于 MRT 使用的格式延迟渲染支持很有限（一些支持多个渲染目标的 GPUs 仍然只支持很有限的位数）。<br>
注意：在使用正交投影时，不支持延迟渲染。如果摄像机的投影模式被设置为正交投影，这些数值将被覆盖，并且摄像机将总是使用 Forward Rendering。<br>
</p>
</div></li>
<li><a id="orgheadline47"></a>Performance Considerations<br><div class="outline-text-5" id="text-1-7-3-3">
<p>
在延迟渲染中渲染实时光照的开销和被照明的像素数量成比例，而和场景的复杂程度无关。所以小的点光源或聚光灯开销非常小，如果场景中的物体将它们整个或部分遮挡，渲染它们的开销将更小。<br>
</p>

<p>
当然，带阴影的光照会比没有阴影的光照开销更大。在延迟渲染中，对于每个产生阴影的光照，产生阴影的物体仍然需要被渲染一次或多次。此外，应用阴影的光照着色器比阴影关闭的有更高的渲染开销。<br>
</p>
</div></li>
<li><a id="orgheadline48"></a>Implementation Details<br><div class="outline-text-5" id="text-1-7-3-4">
<p>
物体的不支持延迟渲染的 shaders，将在延迟渲染结束后，使用 Forward Rendering 方式来渲染。<br>
</p>

<p>
默认的 G-Buffer 按照下面方式布局：<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Name</th>
<th scope="col" class="org-left">格式</th>
<th scope="col" class="org-left">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">RT0</td>
<td class="org-left">ARGB32 format</td>
<td class="org-left">漫反射颜色(RGB),不使用 A</td>
</tr>

<tr>
<td class="org-left">RT1</td>
<td class="org-left">ARGB32 format</td>
<td class="org-left">镜面颜色(RGB),粗糙度(A)</td>
</tr>

<tr>
<td class="org-left">RT2</td>
<td class="org-left">ARGB2101010 format</td>
<td class="org-left">世界空间法线量(RGB),不使用 A</td>
</tr>

<tr>
<td class="org-left">RT3</td>
<td class="org-left">ARGB32 (non-HDR)</td>
<td class="org-left">Emission+光照+光照贴图+反射探针</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">ARGBHalf (HDR) format</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">Depth+Stencil</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">深度和模板缓冲区</td>
</tr>
</tbody>
</table>
<p>
所以默认的 g-buffer 布局下，非高动态范围下每个像素占 160 位，高动态范围下每个像素占 192 位。<br>
</p>

<p>
当 camera 不使用 HDR 时，Emission+光照 buffer(RT3)使用了对数编码要比通常使用的 ARGB32 贴图能提供更大的动态范围。<br>
</p>

<p>
当 camera 使用 HDR 渲染时，如果没有为 Emission+lighting buffer（RT3）创建独立的渲染对象，替代的渲染目标将被用作 RT3，camera 将会渲染到替代的渲染目标中。<br>
</p>
</div></li>
<li><a id="orgheadline49"></a>G-Buffer Pass<br><div class="outline-text-5" id="text-1-7-3-5">
<p>
G-Buffer Pass 为每个物体渲染一次。漫反射和镜面颜色，表面平滑度，世界空间的法线，发射+环境+反射+光照贴图都被渲染到 g-buffer 贴图中。g-buffer 贴图被设置为全局的着色器属性，从而在可以被着色器在后面阶段访问(名称为 CameraGBufferTexture0 &#x2026; CameraGBufferTexture3)<br>
</p>
</div></li>
<li><a id="orgheadline50"></a>Lighting Pass<br><div class="outline-text-5" id="text-1-7-3-6">
<p>
这个光照阶段会基于 g-buffer 和深度来计算光照。光照是在屏幕空间中计算的，所以光照花费的时间独立于场景的复杂度。光照被添加到发射缓冲区中。当对于场景的 Z buffer 测试开启时，和摄像机近平面没有相交的点光源和聚光灯会被当做 3D 形状来渲染。这使得部分或全部被遮挡的点光源或聚光灯的渲染开销很小。方向光和点光源聚光灯和近平面相交时，被当做全屏的方形面片来渲染。<br>
</p>

<p>
如果一个光开启了阴影效果，他们也会在这个 Pass 中被渲染和应用。需要注意的是阴影并不是免费得来的；投影者需要被渲染并且一个更加复杂的光照着色器需要被应用。<br>
</p>

<p>
唯一可用的光照模型是 Standard。如果想要一个不同的模型，你可以修改光照着色器的 Pass，将修改后的 Internal-DeferredShading.shader 版本从内置的 shaders 放到你自己的 Assets/Resources 目录下。然后在 Edit-&gt;Project Settings-&gt;Graphics 窗口中，选择“Deferred”下拉列表中的"Custum Shader"。然后修改着色器的选项将会显示出你正在使用的着色器。<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline52" class="outline-4">
<h4 id="orgheadline52"><span class="section-number-4">1.7.4</span> Legacy Deferred Lighting path</h4>
<div class="outline-text-4" id="text-1-7-4">
<p>
官方都要遗弃了，就不用了解了。<br>
</p>

<p>
PrepassBase pass 渲染法线和镜面指数；<br>
</p>

<p>
PrepassFinal pass 将贴图、光照和发射材质属性组合起来渲染最终的颜色。所有的正式的光照被分开在屏幕空间中计算。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline53" class="outline-4">
<h4 id="orgheadline53"><span class="section-number-4">1.7.5</span> Legacy Vertex Lit Rendering path</h4>
<div class="outline-text-4" id="text-1-7-5">
<p>
因为顶点光照通常在不支持可编程渲染的平台上，Unity 无法创建多个 shader 变量来处理有光照贴图和没光照贴图的情况。所以为了处理有光照贴图和无光照贴图的物体，必须显式地写多个 Pass。<br>
</p>

<p>
Vertex Pass 用于无光照贴图的物体。使用 Blinn-Phong 光照模型对所有的光照一次进行渲染。<br>
</p>

<p>
VertexLMRGBM Pass 用于有光照贴图的物体，光照贴图按照 RGBM 编码（PC 和 consoles 平台）。没有实时的光照被应用，Pass 只是组合了贴图和光照贴图。<br>
</p>

<p>
VertexLMM Pass 用于有光照贴图的物体，光照贴图按照 double-LDR 编码（mobile 平台）。没有实时的光照被应用，Pass 只是组合了贴图和光照贴图。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline55" class="outline-3">
<h3 id="orgheadline55"><span class="section-number-3">1.8</span> RenderQueue And z-depth</h3>
<div class="outline-text-3" id="text-1-8">
<p>
RenderQueue 是用来控制渲染顺序的。系统内置了下面的渲染队列 Background(1000) Geometry(2000) AlphaTest(2450) Transparent(3000) Overlay(4000)。索引值小的队列先渲染。<br>
z-depth 是表示被渲染的片段离摄像机的距离。渲染的时候会依据深度测试函数来比较此时被渲染的片段的 z-depth 值和当前 z-buffer 中的 z-depth 值，测试通过以后，该片段的颜色才会被写入。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline61" class="outline-2">
<h2 id="orgheadline61"><span class="section-number-2">2</span> Reflecting your world</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-orgheadline57" class="outline-3">
<h3 id="orgheadline57"><span class="section-number-3">2.1</span> 光学基础</h3>
<div class="outline-text-3" id="text-2-1">
<p>
反射：当光在两种物质分界面上改变传播方向又返回原来物质中的现象，叫做光的反射。<br>
</p>

<p>
折射：光从一种透明介质斜射入另一种透明介质时，传播方向一般会发生变化，这种现象叫光的折射。<br>
</p>

<p>
散射：光束通过不均匀媒质时，部分光束将偏离原来方向而分散传播，从侧向也可以看到光的现象，叫做光的散射。散射是多重折射和反射的结果。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline60" class="outline-3">
<h3 id="orgheadline60"><span class="section-number-3">2.2</span> Fresnel reflection</h3>
<div class="outline-text-3" id="text-2-2">
<p>
菲涅尔反射<br>
“菲涅尔”是一个人的名字，因为他发现了一个有关反射的光学现象，这个现象就用这个人的名字命名了。那么，是什么现象呢？<br>
就是反射/折射与视点角度之间的关系。如果你站在湖边，低头看脚下的水，你会发现水是透明的，反射不是特别强烈；如果你看远处的湖面，你会发现水并不是透明的，但反射非常强烈。这就是“菲涅尔效应”。 简单的讲，就是视线垂直于表面时，反射较弱，而当视线非垂直表面时，夹角越小，反射越明显。如果你看向一个圆球，那圆球中心的反射较弱，靠近边缘较强。不过这种过度关系被折射率影响。<br>
如果不使用“菲涅尔效应”的话，则反射是不考虑视点与表面之间的角度的。 注意，在真实世界中，除了金属之外，其它物质均有不同程度的“菲涅尔效应”。<br>
所谓菲涅尔反射就是用波动的理论来解释光的反射。 主要包括一些电磁场的边界传输条件，比如 P 矢量和 S 矢量的反射，菲涅尔用波动学说第一次从本质上解释了光的传播，而之前人们只能从宏观上进行试验，无法从微观的理论上获得支持。然而缺少微观理论支持的定律总是空虚的，随时都可能被推翻的。<br>
</p>
</div>
<div id="outline-container-orgheadline58" class="outline-4">
<h4 id="orgheadline58"><span class="section-number-4">2.2.1</span> 如何模拟菲涅尔效应效果？</h4>
<div class="outline-text-4" id="text-2-2-1">
<div class="org-src-container">

<pre class="src src-shader"><span style="color: #ff0000;">// rim &#38543;&#35270;&#35282;&#21644;&#27861;&#32447;&#22841;&#35282;&#30340;&#22686;&#22823;&#32780;&#22686;&#22823;</span>
<span style="color: #ff0000;">// saturate &#20989;&#25968;&#30340;&#20316;&#29992;&#26159;&#25226;&#36755;&#20837;&#20540;&#38480;&#21046;&#21040;[0, 1] &#20043;&#38388;</span>
<span style="color: #98fb98;">float</span> rim = 1.0 - <span style="color: #b0c4de;">saturate</span>(<span style="color: #b0c4de;">dot</span>(o.Normal,<span style="color: #b0c4de;">normalize</span>(IN.viewDir)));
rim = <span style="color: #b0c4de;">pow</span>(rim,<span style="color: #eedd82;">_RimPower</span>);

o.Albedo = color_.rgb * <span style="color: #eedd82;">_DiffuseTint</span>.rgb;
<span style="color: #ff0000;">// &#29289;&#20307;&#21453;&#23556;&#30340;&#39068;&#33394; &#38543; rim &#30340;&#22686;&#22823;&#32780;&#22686;&#22823;&#12290;&#21363;&#35270;&#35282;&#27491;&#23545;&#29289;&#20307;&#26102;&#65292;&#21453;&#23556;&#30340;&#39068;&#33394;&#23569;&#65292;&#38543;&#30528;&#35270;&#35282;&#21644;&#29289;&#20307;&#27861;&#32447;&#22841;&#35282;&#22686;&#22823;&#65292;&#21453;&#23556;&#30340;&#39068;&#33394;&#22686;&#22823;&#12290;</span>
o.<span style="color: #00ffff;">Emission</span> = (<span style="color: #b0c4de;">texCUBE</span>(<span style="color: #eedd82;">_Cubemap</span>,IN.worldRefl).rgb * <span style="color: #eedd82;">_ReflectAmount</span>)*rim;
o.<span style="color: #00ffff;">Specular</span> = <span style="color: #eedd82;">_SpecPower</span>;
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline59" class="outline-4">
<h4 id="orgheadline59"><span class="section-number-4">2.2.2</span> 参考资料</h4>
<div class="outline-text-4" id="text-2-2-2">
<p>
菲涅耳反射 互动百科:<br>
<a href="http://www.baike.com/wiki/%E8%8F%B2%E6%B6%85%E5%B0%94%E5%8F%8D%E5%B0%84" target="_blank" rel="external">http://www.baike.com/wiki/%E8%8F%B2%E6%B6%85%E5%B0%94%E5%8F%8D%E5%B0%84</a><br>
菲涅耳方程 维基百科:<br>
<a href="https://zh.wikipedia.org/wiki/%E8%8F%B2%E6%B6%85%E8%80%B3%E6%96%B9%E7%A8%8B" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E8%8F%B2%E6%B6%85%E8%80%B3%E6%96%B9%E7%A8%8B</a><br>
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline68" class="outline-2">
<h2 id="orgheadline68"><span class="section-number-2">3</span> Shader Optimize</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-orgheadline62" class="outline-3">
<h3 id="orgheadline62"><span class="section-number-3">3.1</span> 数据类型</h3>
<div class="outline-text-3" id="text-3-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Type</th>
<th scope="col" class="org-left">Detial</th>
<th scope="col" class="org-left">Range</th>
<th scope="col" class="org-left">Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">float</td>
<td class="org-left">32 位单精度浮点数</td>
<td class="org-left">和通常编程中的 float 一样</td>
<td class="org-left">存放物体坐标</td>
</tr>

<tr>
<td class="org-left">half</td>
<td class="org-left">16 位中精度浮点数</td>
<td class="org-left">–60000 to +60000,精度是小数点后 3 位</td>
<td class="org-left">适合存放 UV 值，颜色值</td>
</tr>

<tr>
<td class="org-left">fixed</td>
<td class="org-left">11 位低精度浮点数</td>
<td class="org-left">范围是[-2, 2]，精度是 1/256</td>
<td class="org-left">可用于光照计算，颜色，单位向量</td>
</tr>
</tbody>
</table>
<p>
<a href="https://docs.unity3d.com/Manual/SL-DataTypesAndPrecision.html" target="_blank" rel="external">SL-DataTypesAndPrecision</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline63" class="outline-3">
<h3 id="orgheadline63"><span class="section-number-3">3.2</span> noforwardadd</h3>
<div class="outline-text-3" id="text-3-2">
<p>
该选项基于一个开关来自动告诉 Unity，任何采用该着色器的物体只从一个单一的方向光接收每个像素的光照。该着色器计算的其他光照将使用 SH 方式计算。<br>
</p>
<div class="org-src-container">

<pre class="src src-shader"><span style="color: #b0c4de;">#pragma</span> surface surf SimpleLambert noforwardadd
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline64" class="outline-3">
<h3 id="orgheadline64"><span class="section-number-3">3.3</span> exclude_path</h3>
<div class="outline-text-3" id="text-3-3">
<p>
exclude_path:deferred, exclude_path:forward, exclude_path:prepass<br>
不为指定渲染方式(Deferred Shading, Forward , Legacy Deferred)生成代码。<br>
</p>
<div class="org-src-container">

<pre class="src src-shader"><span style="color: #b0c4de;">#pragma</span> surface surf SimpleLambert exclude_path:prepass
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline65" class="outline-3">
<h3 id="orgheadline65"><span class="section-number-3">3.4</span> nolightmap</h3>
<div class="outline-text-3" id="text-3-4">
<p>
关闭该 shader 的所有光照贴图支持。<br>
</p>
<div class="org-src-container">

<pre class="src src-shader"><span style="color: #b0c4de;">#pragma</span> surface surf SimpleLambert noforwardadd nolightmap halfasview exclude_path:prepass
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline66" class="outline-3">
<h3 id="orgheadline66"><span class="section-number-3">3.5</span> halfasview</h3>
<div class="outline-text-3" id="text-3-5">
<p>
用 halfDir 代替 viewDir 作为光照函数的参数传入 shader。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline67" class="outline-3">
<h3 id="orgheadline67"><span class="section-number-3">3.6</span> 参考资料</h3>
<div class="outline-text-3" id="text-3-6">
<p>
<a href="https://docs.unity3d.com/Manual/SL-SurfaceShaders.html" target="_blank" rel="external">Shader 编译指令</a><br>
<a href="https://docs.unity3d.com/Manual/MobileOptimizationPracticalGuide.html" target="_blank" rel="external">Mobile Optimize Doc</a><br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline75" class="outline-2">
<h2 id="orgheadline75"><span class="section-number-2">4</span> LightingModel</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-orgheadline69" class="outline-3">
<h3 id="orgheadline69"><span class="section-number-3">4.1</span> Lambert</h3>
<div class="outline-text-3" id="text-4-1">
<p>
只考虑环境光和漫反射的光照模型。<br>
</p>
\begin{align}  
&diffuseFactor = objNormal \cdot lightDir \\
&color = objColor * (ambientColor + diffuseFactor \cdot lightColor)
\end{align}  
</div>
</div>
<div id="outline-container-orgheadline71" class="outline-3">
<h3 id="orgheadline71"><span class="section-number-3">4.2</span> Phong</h3>
<div class="outline-text-3" id="text-4-2">
<p>
考虑环境光，漫反射光，镜面反射光的光照模型。其中镜面反射按照视角和反射光夹角来计算。<br>
shininess 为反光度<br>
镜面高光不和物体颜色交互，它被直接反射，所以在最终计算颜色时，镜面高光颜色是和散色出来的颜色相加的。<br>
</p>
\begin{align}
&diffuseFactor = objNormal \cdot lightDir \\
&specularFactor = saturate(reflect(lightDir) \cdot viewDir, 0, 1) \\
&specularFactor = specularFactor^{shininess} \\
&color = objColor \cdot (ambientFactor + diffuseFactor) \cdot lightColor) + specularFactor \cdot lightColor 
\end{align}
</div>
<div id="outline-container-orgheadline70" class="outline-4">
<h4 id="orgheadline70"><span class="section-number-4">4.2.1</span> 缺点</h4>
<div class="outline-text-4" id="text-4-2-1">
<ol class="org-ol">
<li>当放射光方向和视角夹角大于 90 度时，specular 被设置为 0，当反光度比较小时，镜面半径会比较大，而 specular 被设置为 0 导致，镜面光照突然就消失了。<br>
当然该缺点可以通过将 specular+1 从而将 specular 的值限定在[0,2]的范围呢<br></li>
<li>反射光方向计算复杂<br></li>
</ol>
\begin{equation}
refectLightDir = 2 (lightDir \cdot objNormal) \cdot objNormal - lightDir
\end{equation}
<ol class="org-ol">
<li>没有考虑菲涅耳效应。反射量随视角和法线的夹角增大而增大。<br></li>
</ol>
</div>
</div>
</div>
<div id="outline-container-orgheadline72" class="outline-3">
<h3 id="orgheadline72"><span class="section-number-3">4.3</span> BlinnPhong</h3>
<div class="outline-text-3" id="text-4-3">
<p>
考虑环境光，漫反射光，镜面反射光的光照模型。反射光方向取视线和光照方向的中心线，镜面反射按照中心线和法线的夹角来计算。<br>
</p>
\begin{align}
&diffuseFactor = objNormal \cdot lightDir \\
&specularFactor = normalize(lightDir + viewDir) \cdot objNormal \\
&specularFactor = specularFactor^shininess \\
&color = objColor \cdot (ambientFactor + diffuseFactor) \cdot lightColor) + specularFactor \cdot lightColor
\end{align}

<p>
<a href="http://gamedev.stackexchange.com/questions/82494/why-is-h-blinn-used-instead-of-r-phong-in-specular-shading" target="_blank" rel="external">http://gamedev.stackexchange.com/questions/82494/why-is-h-blinn-used-instead-of-r-phong-in-specular-shading</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline74" class="outline-3">
<h3 id="orgheadline74"><span class="section-number-3">4.4</span> PBR</h3>
<div class="outline-text-3" id="text-4-4">
</div><div id="outline-container-orgheadline73" class="outline-4">
<h4 id="orgheadline73"><span class="section-number-4">4.4.1</span> Cook-Torrance 模型</h4>
<div class="outline-text-4" id="text-4-4-1">
<p>
下面是计算机图形学引入的 BRDF 模型，又叫做 Cook-Torrance 模型.<br>
</p>
\begin{equation}
f(l,v) = \frac{F(l,h)G(l,v)D(h)}{4cos\theta_i cos\theta_o} = \frac{F(l,h)G(l,v)D(h)}{4(n \cdot l)(n \cdot v)}
\end{equation}
<p>
F(l,h)为菲涅耳反射方程，用于计算 l 方向的入射光和在 h 法线处的反射量；<br>
G(l,v)为几何衰减因子，用于计算入射光线被遮挡(Shadowing)和反射光线被遮挡(Masking)的量；<br>
D(h)为法线分布函数，用于计算在 h 方向上法线的分布率；<br>
h 表示微观法线<br>
n 表示宏观法线<br>
l 表示入射光方向<br>
v 表示视觉方向<br>
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline79" class="outline-2">
<h2 id="orgheadline79"><span class="section-number-2">5</span> Screen Effect</h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-orgheadline76" class="outline-3">
<h3 id="orgheadline76"><span class="section-number-3">5.1</span> 概述</h3>
<div class="outline-text-3" id="text-5-1">
<p>
屏幕特效特效就相当于对最终显示图片到显示器之前的图片进行 PS 处理。具体处理每个像素的过程会通过一个 Shader 来进行，进行处理的时机是 Camera.OnRenderImage 被触发的时候，而 Graphics.Blit 可以将处理结果生效。<br>
处理每个像素的 Shader 通常会使用下面的一些配置：<br>
</p>
<div class="org-src-container">

<pre class="src src-shader"><span style="color: #b0c4de;">#pragma</span> vertex vert_img        <span style="color: #ff0000;">// &#20351;&#29992;&#31995;&#32479;&#20869;&#32622;&#30340;&#20989;&#25968;</span>
<span style="color: #b0c4de;">#pragma</span> fragment frag          <span style="color: #ff0000;">// &#20855;&#20307;&#22788;&#29702;&#36807;&#31243;&#22312; frag &#20013;&#23454;&#29616;</span>
<span style="color: #b0c4de;">#pragma</span> fragmentoption ARB_precision_hint_fastest
<span style="color: #ff0000;">// &#19978;&#38754;&#36825;&#20010;&#21442;&#25968;&#29992;&#26469;&#25351;&#23450;&#29255;&#27573;&#30528;&#33394;&#22120;&#35745;&#31639;&#31934;&#24230;&#37319;&#29992;&#24555;&#36895;&#27169;&#24335;</span>
<span style="color: #ff0000;">// http://forum.unity3d.com/threads/pragma-fragmentoption-arb_precision_hint_fastest-any-documentation-about-this.294465/</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline77" class="outline-3">
<h3 id="orgheadline77"><span class="section-number-3">5.2</span> 明度 亮度 饱和度 对比度</h3>
<div class="outline-text-3" id="text-5-2">
<p>
明度（Brightness）是眼睛对光源和物体表面的明暗程度的感觉，主要是由光线强弱决定的一种视觉经验。<br>
亮度（Luminance）是指发光体（反光体）表面发光（反光）强弱的物理量。<br>
饱和度（Saturation）是指色彩的鲜艳程度，也称色彩的纯度。饱和度取决于该色中含色成分和消色成分（灰色）的比例。含色成分越大，饱和度越大；消色成分越大，饱和度越小。纯的颜色都是高度饱和的，如鲜红，鲜绿。混杂上白色，灰色或其他色调的颜色，是不饱和的颜色，如绛紫，粉红，黄褐等。完全不饱和的颜色根本没有色调，如黑白之间的各种灰色。<br>
对比度（Contrast）指的是一幅图像中明暗区域最亮的白和最暗的黑之间不同亮度层级的测量，差异范围越大代表对比越大，差异范围越小代表对比越小，好的对比率 120:1 就可容易地显示生动、丰富的色彩，当对比率高达 300:1 时，便可支持各阶的颜色。但对比率遭受和亮度相同的困境，现今尚无一套有效又公正的标准来衡量对比率，所以最好的辨识方式还是依靠使用者眼睛。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline78" class="outline-3">
<h3 id="orgheadline78"><span class="section-number-3">5.3</span> MotionBlur 的实现</h3>
<div class="outline-text-3" id="text-5-3">
<p>
运动模糊产生的原因是 一个视觉信息采集周期内，同一个采集点接收到了多个信息，这些信息在同一个运动方向上依次排列。<br>
</p>
<div class="org-src-container">

<pre class="src src-shader"><span style="color: #98fb98;">fixed4</span> <span style="color: #87cefa;">frag</span> (v2f i) : <span style="color: #7fffd4;">SV_Target</span>
{
    <span style="color: #98fb98;">float4</span> col = <span style="color: #b0c4de;">tex2D</span>(<span style="color: #eedd82;">_MainTex</span>, i.uv);
    <span style="color: #00ffff;">if</span> (!<span style="color: #eedd82;">_isStopBlur</span>)
    {
        <span style="color: #ff0000;">// uvOffset &#23601;&#26159;&#36816;&#21160;&#26041;&#21521;&#30340;&#21453;&#26041;&#21521;</span>
        <span style="color: #98fb98;">fixed2</span> uvOffset = i.uv - <span style="color: #eedd82;">_Center</span>;
        <span style="color: #00ffff;">for</span> (<span style="color: #98fb98;">int</span> iterCount = 1; iterCount &lt; <span style="color: #eedd82;">_IterNumber</span>; ++iterCount)
        {
                <span style="color: #ff0000;">// &#21462;&#20986;&#20498;&#25968;&#31532; iterCount &#20010;&#20449;&#24687;&#65292;&#24182;&#32047;&#21152;&#21040; col &#20013;</span>
            col += <span style="color: #b0c4de;">tex2D</span>(<span style="color: #eedd82;">_MainTex</span>, i.uv+uvOffset*iterCount*<span style="color: #eedd82;">_SpeedFactor</span>);
        }
        <span style="color: #ff0000;">// &#23545;&#25152;&#26377;&#20449;&#24687;&#21462;&#24179;&#22343;&#20540;</span>
        col /= (<span style="color: #98fb98;">float</span>)<span style="color: #eedd82;">_IterNumber</span>;
    }
    <span style="color: #00ffff;">return</span> col;
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline80" class="outline-2">
<h2 id="orgheadline80"><span class="section-number-2">6</span> Skin Shader</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="http://ten24.info/skin-shading-in-unity/" target="_blank" rel="external">http://ten24.info/skin-shading-in-unity/</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline82" class="outline-2">
<h2 id="orgheadline82"><span class="section-number-2">7</span> Normal Map</h2>
<div class="outline-text-2" id="text-7">
<p>
Normal Map 又叫 Ramp Map，其实就是法线贴图。<br>
UnpackNormal 的作用是将 0-1 范围的数值(法线贴图存储的颜色值)映射为-1-1 范围的数值（法线向量）。<br>
</p>
</div>
<div id="outline-container-orgheadline81" class="outline-4">
<h4 id="orgheadline81"><span class="section-number-4">7.0.1</span> 参考资料</h4>
<div class="outline-text-4" id="text-7-0-1">
<p>
<a href="http://www.songho.ca/opengl/gl_normaltransform.html" target="_blank" rel="external">Normal 变换矩阵推导</a><br>
<a href="http://blog.csdn.net/candycat1992/article/details/41605257" target="_blank" rel="external">Unity 中的 Normal Map</a><br>
<a href="http://http.developer.nvidia.com/CgTutorial/cg_tutorial_chapter08.html" target="_blank" rel="external">Cg 中的 Normal Map</a><br>
<a href="http://learnopengl.com/#!Advanced-Lighting/Normal-Mapping" target="_blank" rel="external">Normal Map Detail</a><br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline97" class="outline-2">
<h2 id="orgheadline97"><span class="section-number-2">8</span> Q&amp;A</h2>
<div class="outline-text-2" id="text-8">
</div><div id="outline-container-orgheadline83" class="outline-3">
<h3 id="orgheadline83"><span class="section-number-3">8.1</span> unity 坐标系是左手还是右手？</h3>
<div class="outline-text-3" id="text-8-1">
<p>
unity 为左手坐标系<br>
DirectX 为左手坐标系<br>
OpenGL 为右手坐标系<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline88" class="outline-3">
<h3 id="orgheadline88"><span class="section-number-3">8.2</span> SurfaceShader 中 如何定义多个 Pass，它们的执行与否，以及执行顺序？</h3>
<div class="outline-text-3" id="text-8-2">
</div><div id="outline-container-orgheadline84" class="outline-4">
<h4 id="orgheadline84"><span class="section-number-4">8.2.1</span> 定义多个 Pass</h4>
<div class="outline-text-4" id="text-8-2-1">
<p>
定义多个 Pass 的方法，参考如下开源项目：<br>
<a href="https://github.com/inbgche/ShaderMixingSample" target="_blank" rel="external">https://github.com/inbgche/ShaderMixingSample</a><br>
为了防止项目被 delete，我 fork 了一份，地址如下：<br>
<a href="https://github.com/wolfand11/ShaderMixingSample" target="_blank" rel="external">https://github.com/wolfand11/ShaderMixingSample</a><br>
</p>

<p>
Rules for Multi-pass Shaders in Unity (原文不存在时，可去有道云笔记中寻找备份)<br>
<a href="https://albertshih.blogspot.jp/2014/11/rules-for-multi-pass-shaders-in-unity.html" target="_blank" rel="external">https://albertshih.blogspot.jp/2014/11/rules-for-multi-pass-shaders-in-unity.html</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline85" class="outline-4">
<h4 id="orgheadline85"><span class="section-number-4">8.2.2</span> Pass 是否执行</h4>
<div class="outline-text-4" id="text-8-2-2">
<p>
可以通过配制每个 pass 的 LightMode Tag，来选择具体执行哪些 pass。<br>
以 surface shader 举例说明：<br>
surface shader 展开来后，可以看到如下 pass。<br>
pass{ Tags{"LightMode"="Vertex"} }<br>
pass{ Tags{"LightMode"="ForwardBass"} }<br>
pass{ Tags{"LightMode"="Deferred"} }<br>
这三个 pass 是相互排斥的，永远只可能执行其中一个 pass。<br>
那 unity 是根据什么来选择执行哪个 pass 的呢？<br>
unity 通过摄像机下的 Rendering path 来选择相应的 pass。<br>
Rendering path= Legacy Vertex Lit 时，选择"LightMode"="Vertex"的 pass。ForwardBass 与 Deferred 将不会被执行。<br>
Rendering path= ForwardBass 时，优先选择"LightMode"="ForwardBass"的 pass，ForwardBass 不存在时，选择 Vertex。Deferred 将不会被执行。<br>
Rendering path= Deferred 时，优先选择"LightMode"="Deferred"的 pass，Deferred 不存在时，选择 ForwardBass，ForwardBass 不存在时选择 Vertex。<br>
</p>

<p>
<a href="https://zhidao.baidu.com/question/459788806667126965.html" target="_blank" rel="external">https://zhidao.baidu.com/question/459788806667126965.html</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline86" class="outline-4">
<h4 id="orgheadline86"><span class="section-number-4">8.2.3</span> Pass 的执行顺序</h4>
<div class="outline-text-4" id="text-8-2-3">
<p>
多个 Pass 的执行顺序是，从上到下依次进行的<br>
参考上面的 ShaderMixingSample 可以深入了解<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline87" class="outline-4">
<h4 id="orgheadline87"><span class="section-number-4">8.2.4</span> Tips</h4>
<div class="outline-text-4" id="text-8-2-4">
<ul class="org-ul">
<li>需要注意的是，SurfaceShader 中定义多个 Pass 时，不需要写 Pass{}，因为 SurfaceShader 编译时，会自动添加 Pass{}.具体信息可以参考如下链接：<br></li>
</ul>
<p>
<a href="http://www.cnblogs.com/wantnon/p/4456787.html" target="_blank" rel="external">http://www.cnblogs.com/wantnon/p/4456787.html</a><br>
<a href="https://forum.unity.com/threads/achieving-a-multi-pass-effect-with-a-surface-shader.96393/" target="_blank" rel="external">https://forum.unity.com/threads/achieving-a-multi-pass-effect-with-a-surface-shader.96393/</a><br>
</p>
<ul class="org-ul">
<li>需要注意的是，SurfaceShader 中 LightMode Tag 会被忽略，LightMode Tag 只能在 Pass 中使用，SurfaceShader 编译时，会自动添加 Pass{}<br></li>
</ul>
<p>
<a href="https://forum.unity.com/threads/lightmode-always-not-ignore-lighting-in-surface-shader.446692/" target="_blank" rel="external">https://forum.unity.com/threads/lightmode-always-not-ignore-lighting-in-surface-shader.446692/</a><br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline93" class="outline-3">
<h3 id="orgheadline93"><span class="section-number-3">8.3</span> Deferred Renderring，Deferred Shading，Deferred Lighting 是什么关系？</h3>
<div class="outline-text-3" id="text-8-3">
</div><div id="outline-container-orgheadline89" class="outline-4">
<h4 id="orgheadline89"><span class="section-number-4">8.3.1</span> Deferred Rendering</h4>
<div class="outline-text-4" id="text-8-3-1">
<p>
Deferred Rendering 只是延迟渲染算法的统称。延迟渲染分很多不同类型，Deferred Shading 和 Deferred Lighting 等才是具体的延迟渲染算法。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline90" class="outline-4">
<h4 id="orgheadline90"><span class="section-number-4">8.3.2</span> Deferred Shading</h4>
<div class="outline-text-4" id="text-8-3-2">
<p>
在 3D 计算机图形学领域中，延迟着色是一种屏幕空间着色技术。之所以被称作延迟的是因为在第一阶段的 vertex 和 pixel 着色器中并没有真正执行渲染，渲染被延迟到了第二个阶段。<br>
延迟着色第一个阶段的渲染，只是将着色计算需要的数据进行收集。通过渲染到贴图这种方式，将 Positions，normals 以及每个表面的材质等信息被渲染到 G-buffer 中。<br>
延迟着色第二个阶段的渲染，在一个 pixel 着色器中，利用前一阶段生成的 G-buffer，在屏幕空间中，来计算每个像素的直接和间接光照。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline91" class="outline-4">
<h4 id="orgheadline91"><span class="section-number-4">8.3.3</span> Deferred Lighting</h4>
<div class="outline-text-4" id="text-8-3-3">
<p>
Deferred lighting 是对 Deferred Shading 的一种修改。该技术使用了三个阶段来代替延迟着色中的两个阶段。<br>
延迟光照第一阶段的渲染，只有计算每个像素光照所必须的属性会被写入 G-Buffer.<br>
延迟光照第二阶段的渲染，在屏幕空间中，该延迟渲染阶段只输出漫反射和镜面反射光照数据(将这些数据写入到 L-Buffer)<br>
延迟光照第三阶段的渲染，在 L-Buffer 的基础上重新渲染场景并进行最终的渲染<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline92" class="outline-4">
<h4 id="orgheadline92"><span class="section-number-4">8.3.4</span> 参考资料</h4>
<div class="outline-text-4" id="text-8-3-4">
<p>
<a href="http://chengkehan.github.io/DeferredRendering.html" target="_blank" rel="external">http://chengkehan.github.io/DeferredRendering.html</a><br>
<a href="http://blog.csdn.net/bugrunner/article/details/7436600" target="_blank" rel="external">http://blog.csdn.net/bugrunner/article/details/7436600</a><br>
<a href="https://en.wikipedia.org/wiki/Deferred_shading" target="_blank" rel="external">https://en.wikipedia.org/wiki/Deferred_shading</a><br>
</p>

<p>
Deferred Shading   <a href="https://docs.unity3d.com/Manual/RenderTech-DeferredShading.html" target="_blank" rel="external">https://docs.unity3d.com/Manual/RenderTech-DeferredShading.html</a><br>
Deferred Lighting  <a href="https://docs.unity3d.com/Manual/RenderTech-DeferredLighting.html" target="_blank" rel="external">https://docs.unity3d.com/Manual/RenderTech-DeferredLighting.html</a><br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline94" class="outline-3">
<h3 id="orgheadline94"><span class="section-number-3">8.4</span> 为什么 Unity 中 skybox 是在所有不透明物体和所有透明物体之间被绘制的？</h3>
<div class="outline-text-3" id="text-8-4">
<p>
一般来讲 skybox 可以在 background 渲染队列中进行渲染，但是，这样会导致像素的 OverDraw，因此在不透明物体后再绘制 Skybox 可以减少这种 OverDraw。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline95" class="outline-3">
<h3 id="orgheadline95"><span class="section-number-3">8.5</span> <span class="todo TODO">TODO</span> 为什么光照和表面的交互用乘法？</h3>
</div>
<div id="outline-container-orgheadline96" class="outline-3">
<h3 id="orgheadline96"><span class="section-number-3">8.6</span> 为什么光的衰减和离光源的距离的平方成反比？</h3>
<div class="outline-text-3" id="text-8-6">
<p>
在点光源，聚光灯等模拟中，通常会为光照添加衰减，这个衰减系数和光源距离的平方相关，具体原因查看下面文章。<br>
基于物理着色：BRDF <a href="https://zhuanlan.zhihu.com/p/21376124" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/21376124</a><br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline104" class="outline-2">
<h2 id="orgheadline104"><span class="section-number-2">9</span> Error</h2>
<div class="outline-text-2" id="text-9">
</div><div id="outline-container-orgheadline98" class="outline-4">
<h4 id="orgheadline98"><span class="section-number-4">9.0.1</span> Shader error in Too many texture interpolators would be used for ForwardBase pass (11 out of max 10)</h4>
<div class="outline-text-4" id="text-9-0-1">
<p>
将 #pragma target 3.0 变为 #pragma target 4.0 可解决问题<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline100" class="outline-4">
<h4 id="orgheadline100"><span class="section-number-4">9.0.2</span> 如果发现颜色部分正确部分不正确</h4>
<div class="outline-text-4" id="text-9-0-2">
</div><ol class="org-ol"><li><a id="orgheadline99"></a>检查 Input 中 viewDir lightDir 是否使用的是 float3.<br><div class="outline-text-5" id="text-9-0-2-1">
<p>
使用 float 会造成 yz 分量的缺失，导致 yz 分量不为 0 时，显示错误。<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline101" class="outline-4">
<h4 id="orgheadline101"><span class="section-number-4">9.0.3</span> Unity 渲染半透明物体，Editor 下 Scene 中可见，在 Game 中不可见</h4>
<div class="outline-text-4" id="text-9-0-3">
<p>
是因为被 Skybox 遮挡住了。Skybox 的深度值为 1，如果被渲染物体的深度值大于 1 肯定会被遮挡；如果被渲染的物体深度值等于 1，而且物体的渲染顺序在 Skybox 之前，物体也会被遮挡。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline102" class="outline-4">
<h4 id="orgheadline102"><span class="section-number-4">9.0.4</span> vert': output parameter 'o' not completely initialized</h4>
<div class="outline-text-4" id="text-9-0-4">
<div class="org-src-container">

<pre class="src src-shader"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">vert</span> (<span style="color: #00ffff;">inout</span> appdata_full v, <span style="color: #00ffff;">out</span> Input o)  
{
        <span style="color: #ff0000;">// &#28155;&#21152;&#19979;&#38754;&#36825;&#21477;&#20195;&#30721;&#21487;&#20197;&#35299;&#20915;&#35813;&#38169;&#35823;</span>
  UNITY_INITIALIZE_OUTPUT(Input,o);  
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline103" class="outline-4">
<h4 id="orgheadline103"><span class="section-number-4">9.0.5</span> 在写屏幕特效的时候，发现屏幕不刷新了</h4>
<div class="outline-text-4" id="text-9-0-5">
<p>
请检查 OnRenderImage 中是不是总是调用了 Graphics.Blit(srcTex,desTex)，或者 Graphic.Blit(srcTex,desTex,CurMaterial)<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline105" class="outline-2">
<h2 id="orgheadline105"><span class="section-number-2">10</span> 参考资料</h2>
<div class="outline-text-2" id="text-10">
<p>
<a href="https://onevcat.com/2013/07/shader-tutorial-1/" target="_blank" rel="external">https://onevcat.com/2013/07/shader-tutorial-1/</a><br>
</p>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> unity </category>
            
        </categories>
        
        
        <tags>
            
            <tag> unity </tag>
            
            <tag> graphics </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unity 5 Lighting Cookbook]]></title>
      <url>http://wolfand11.coding.me/2016/08/19/unity/Unity5LightingCookbook/</url>
      <content type="html"><![CDATA[

<p>
这是一篇译文，原文地址：<a href="http://www.edy.es/dev/docs/unity-5-lighting-cookbook/" target="_blank" rel="external">http://www.edy.es/dev/docs/unity-5-lighting-cookbook/</a><br>
</p>
<a id="more"></a>

<p>
这篇笔记的主题是关于如何运用 Unity5 的光照。<br>
文章中截图所示的工程可以在 Github 上找到，地址为 <a href="https://github.com/EdyJ/unity-5-lighting-cookbook" target="_blank" rel="external">https://github.com/EdyJ/unity-5-lighting-cookbook</a><br>
为了防止上面的 github 地址失效，我 fork 了一份，地址为 <a href="https://github.com/wolfand11/unity-5-lighting-cookbook" target="_blank" rel="external">https://github.com/wolfand11/unity-5-lighting-cookbook</a><br>
</p>

<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4"><span class="section-number-2">1</span> Standard realtime lighting 标准的实时光照</h2>
<div class="outline-text-2" id="text-1">
<p>
标准的实时光照包含了环境光照，环境反射以及实时光照和阴影。它不需要任何全局照明或预处理工作等等。Lighting-&gt;Scene 下的 Precomputed Realtime GI 和 Baked GI 选项都可以关闭。<br>
<img src="http://www.edy.es/dev/wp-content/uploads/2015/03/Unity-5-Lighting-Cookbook-Standard-Lighting.png"><br>
</p>
</div>
<div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> Ambient Light 环境光</h3>
<div class="outline-text-3" id="text-1-1">
<p>
环境光会影响到所有物体。<br>
<img src="http://www.edy.es/dev/wp-content/uploads/2015/03/Unity-5-Lighting-Cookbook-Ambient-Light.png"><br>
上图中选项可以设置 环境光源（天空盒，渐变色，颜色） 以及 强度<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2"><span class="section-number-3">1.2</span> Environment Reflection 环境反射</h3>
<div class="outline-text-3" id="text-1-2">
<p>
反射路径会随着摄像机的角度而改变。应用独立的环境光。也会影响影响菲涅尔效果。<br>
如果反射探针被应用，他们将成为 Reflection Source 并且物体的 Intensity 会受到他们的影响，所以全局的反射设置不会影响这些物体。Reflection Bounces 定义了反射可以在多个探针之间可以回弹多少次（例如：一个探针采集的物体在另一个探针的影响下）。<br>
<img src="http://www.edy.es/dev/wp-content/uploads/2015/03/Unity-5-Lighting-Cookbook-Environment-Reflection.png"><br>
<img src="http://www.edy.es/dev/wp-content/uploads/2015/03/Unity-5-Lighting-Cookbook-Reflection-Probes.png"><br>
上面第一幅图片：Reflection Source (Skybox, Cubemap), Resolution and Reflection Intensity.<br>
上面第二幅图片：一个反射探针影响这个物体，所以全局环境反射源不会影响这个网格。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3"><span class="section-number-3">1.3</span> Standard Lights</h3>
<div class="outline-text-3" id="text-1-3">
<p>
场景中，所有的标准实时光照应用方向光和阴影到物体上。<br>
默认情况下，场景中的第一个方向光被当做太阳。默认的天空盒会基于太阳的水平倾斜度来调整它的强度和颜色。也可以选择特定的方向光作为太阳来影响默认的天空盒。<br>
<img src="http://www.edy.es/dev/wp-content/uploads/2015/03/Unity-5-Lighting-Cookbook-Standard-Light1.png"><br>
<img src="http://www.edy.es/dev/wp-content/uploads/2015/03/Unity-5-Lighting-Cookbook-Skybox-Sun.png"><br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline8" class="outline-2">
<h2 id="orgheadline8"><span class="section-number-2">2</span> Precomputed realtime lighting 预计算的实时光照</h2>
<div class="outline-text-2" id="text-2">
<p>
预计算的实时光照添加了实时的光照回弹，颜色渗透以及发光材质。任何属性都可以动态的修改（灯光颜色、强度、材质颜色、材质发射颜色等），场景中的光照会实时地对应获得更新。<br>
</p>

<p>
Lighting &gt; Scene &gt; Precomputed Realtime GI enabled, Baked GI disabled.<br>
<img src="http://www.edy.es/dev/wp-content/uploads/2015/03/Unity-5-Lighting-Cookbook-Precomputed-Realtime-GI-Settings1.png"><br>
</p>
</div>
<div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5"><span class="section-number-3">2.1</span> Light Bounces 光照回弹</h3>
<div class="outline-text-3" id="text-2-1">
<p>
每个灯光可以被配置为从物体反弹并且影响其他的物体。<br>
<img src="http://www.edy.es/dev/wp-content/uploads/2015/03/Unity-5-Lighting-Cookbook-Light-Bounces.png"><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline6" class="outline-3">
<h3 id="orgheadline6"><span class="section-number-3">2.2</span> Emissive Materials</h3>
<div class="outline-text-3" id="text-2-2">
<p>
被标记为 Static 物体包含一个发射材质会依据它自己的几何形状来发光。<br>
<img src="http://www.edy.es/dev/wp-content/uploads/2015/03/Unity-5-Lighting-Cookbook-Emissive-Object.png"><br>
<img src="http://www.edy.es/dev/wp-content/uploads/2015/03/Unity-5-Lighting-Cookbook-Emissive-Material.png"><br>
场景中被标记为 Static 的物体上会执行预计算实时光照。当被标记为 Static 的物体的 Transform 被改变，或者 Static 标记本身改变都会触发预计算阶段。<br>
参数 Lighting &gt; Scene &gt; Precomputed Realtime GI &gt; Realtime Resolution 直接影响预计算数据所花费的时间。在 Unity 编辑器中使用尽可能低的值(0.01-0.5)可以快速的创建原型。<br>
<img src="http://www.edy.es/dev/wp-content/uploads/2015/03/Unity-5-Lighting-Cookbook-Precomputed-Resolution.png"><br>
CPU 的使用会影响运行时动态光照改变的反应。在编辑器中烘焙预计算数据的 CPU 使用是不会有什么影响的。<br>
光照回弹和材质发射只会影响静态物体。预计算效果要应用到动态物体上必须使用光照探针。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline7" class="outline-3">
<h3 id="orgheadline7"><span class="section-number-3">2.3</span> Ambient Light in precomputed realtime lighting</h3>
<div class="outline-text-3" id="text-2-3">
<p>
环境光会影响到一个静态几何体的一些不同部位。这些部位会被光源从外部照射到，背面也包括在内。例如，在室内场景中由静态几何体定义了封闭的外壳，环境光对静态网格将不会有任何影响。光可以从外部照射到该静态几何体的任何缝隙或部位将会通过环境光来受到影响。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline9" class="outline-2">
<h2 id="orgheadline9"><span class="section-number-2">3</span> Baked lightmaps 烘焙光照</h2>
<div class="outline-text-2" id="text-3">
<p>
环境光，标准光照（烘焙或混合），光照回弹以及发射材质都被烘焙到光照贴图中。只有环境反射可以在运行时修改。<br>
</p>

<p>
Lighting &gt; Scene &gt; Baked GI 开启, Precomputed Realtime GI 关闭.<br>
<img src="http://www.edy.es/dev/wp-content/uploads/2015/03/Unity-5-Lighting-Cookbook-Baked-GI-Settings1.png"><br>
标准光照可以被配置为 Baked 或者 Mixed 从而允许无缝地在只烘焙和只实时模式之间切换.<br>
</p>

<p>
参数 Lighting &gt; Scene &gt; Baked GI &gt; Baked Resolution 直接影响生成光照贴图所花费的时间。使用编辑器时，尽可能使用 1-4 来快速建立原型。<br>
<img src="http://www.edy.es/dev/wp-content/uploads/2015/03/Unity-5-Lighting-Cookbook-Baked-Resolution.png"><br>
修改任何涉及到的光照（环境光，标准光照，光照回弹，发射材质）参数，或者修改任何静态物体将会触发新光照贴图的计算阶段。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline10" class="outline-2">
<h2 id="orgheadline10"><span class="section-number-2">4</span> General GI settings 通用的全局照明设置</h2>
<div class="outline-text-2" id="text-4">
<p>
<img src="http://www.edy.es/dev/wp-content/uploads/2015/03/Unity-5-Lighting-Cookbook-General-GI.png"><br>
直接光照包括环境光、光照回弹、发射材质(在靠近的物体上的光照效果，不是发射物体他们自己上的)的光照效果，但不包括环境反射的光照效果。Scene 视图窗口中选择 Irradiance 可以显示场景中的直接灯光：<br>
<img src="http://www.edy.es/dev/wp-content/uploads/2015/03/Unity-5-Lighting-Cookbook-Irradiance-Indirect-Light.png"><br>
</p>

<p>
下面这些设置会同时影响直接光照，无论是实时模式还是烘焙模式：<br>
Indirect intensity (直接光照强度)： 缩放直接光照(环境光照+回弹的光照+发射的光照)<br>
Bounce Boost (回弹增量): 光从一个表面回弹到下一个表面的强度. 回弹的光和物体表面的照度相乘通过该设置来增强。<br>
</p>

<p>
下面的设置只会影响烘焙全局照明模式：<br>
Directional mode (方向模式): 烘焙模式下，在光照贴图中是否保存方向和镜面信息。<br>
Atlas size (地图尺寸): 烘焙模式下，光照贴图的尺寸.<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline13" class="outline-2">
<h2 id="orgheadline13"><span class="section-number-2">5</span> Combining different lighting methods 组合不同的光照方法</h2>
<div class="outline-text-2" id="text-5">
<p>
Unity5 的教程-Lighting and Rendering 对于理解 Unity5 中全局照明的见解来说是必读的.下面引号中的内容就是摘自这篇教程。<br>
这篇教程的地址：<a href="http://unity3d.com/cn/learn/tutorials/topics/graphics/unity-5-lighting-and-rendering" target="_blank" rel="external">http://unity3d.com/cn/learn/tutorials/topics/graphics/unity-5-lighting-and-rendering</a><br>
</p>
</div>
<div id="outline-container-orgheadline11" class="outline-3">
<h3 id="orgheadline11"><span class="section-number-3">5.1</span> Precomputed realtime lighting + Baked lightmaps</h3>
<div class="outline-text-3" id="text-5-1">
<p>
这样做这不是一个好主意，即使默认情况下会同时开启这两种光照：<br>
</p>
<pre class="example">
// 下面引用自 Unity5 的教程-Lighting and Rendering
尽管可以同时使用烘焙全局光照和预计算实时全局光照，需要注意的是同时渲染两个系统所涉及的性能消耗是他们每个所消耗的总和。我们不仅需要存储两套光照贴图到显存中，而且我们也要在着色器中负担这两套光照贴图的解码处理。
...... 使用哪种方式必须基于你的项目性质和目标平台来进行评估。记住当面对多个不同的硬件平台，通常最低性能的平台将会决定采用什么样的方式。
</pre>
</div>
</div>
<div id="outline-container-orgheadline12" class="outline-3">
<h3 id="orgheadline12"><span class="section-number-3">5.2</span> Standard realtime lighthting + Baked lightmaps</h3>
<div class="outline-text-3" id="text-5-2">
<p>
对于处于相同的恒定光照条件下的静态和动态的物体来说，这是一个实用的方法：<br>
</p>
<pre class="example">
在 Light 组件中，选择'Mixed'烘焙模式，被标记为静态的物体将在他们的烘焙光照贴图中包含这个光照。然而，不同于被标记为'Baked'的光照，混合的光照将依然会对非静态的对象产生实时、直接的光照效果。当你在静态环境中需要使用光照贴图，但是你依然希望有一个角色使用这些相同的光照来产生实时的阴影到光照贴图过的几何体上时，'Mixed'方式将会很有用。
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline14" class="outline-2">
<h2 id="orgheadline14"><span class="section-number-2">6</span> Generating lightmap files 生成光照贴图</h2>
<div class="outline-text-2" id="text-6">
<p>
默认情况下，每次光照贴图计算阶段被触发时(例如，移动静态元素)，光照贴图文件在内部被生成和存储。<br>
通过关闭 Lighting 窗口中的自动选项，然后，点击 Build 按钮，这样光照贴图也可以被手动计算。生成的图片会被存储在和场景同名的文件夹下。烘焙数据包含了光照贴图和反射探针。<br>
General GI 部分的 Directional Mode 和 Atlas Size 参数会影响光照贴图的类型和数目。<br>
<img src="http://www.edy.es/dev/wp-content/uploads/2015/03/Unity-5-Lighting-Cookbook-Generating-Lightmap-Files.png"><br>
</p>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> unity </category>
            
        </categories>
        
        
        <tags>
            
            <tag> unity </tag>
            
            <tag> graphics </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git Github]]></title>
      <url>http://wolfand11.coding.me/2016/08/13/tools/GitAndGithub/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline11" class="outline-2">
<h2 id="orgheadline11"><span class="section-number-2">1</span> Git Github SourceTree</h2>
<div class="outline-text-2" id="text-1">
<pre class="example">
该文档主要纪录 Git Github SourceTree 相关工具的使用。
</pre>

<a id="more"></a>
</div>

<div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5"><span class="section-number-3">1.1</span> 常用命令</h3>
<div class="outline-text-3" id="text-1-1">
</div><div id="outline-container-orgheadline3" class="outline-4">
<h4 id="orgheadline3"><span class="section-number-4">1.1.1</span> git</h4>
<div class="outline-text-4" id="text-1-1-1">
</div><ol class="org-ol"><li><a id="orgheadline1"></a>project manager<br><div class="outline-text-5" id="text-1-1-1-1">
<pre class="example">
克隆默认分支的代码 git clone git://github.com/cocos2d/CocosBuilder.git ./CocosBuilder_origin_default
克隆指定分支的代码 git clone -b develop git://github.com/cocos2d/CocosBuilder.git ./CocosBuilder_origin_develop
在本地初始化一个空仓库			git init
获得本地分支信息                   	git branch
创建新的本地分支                           git branch new_branch_name
切换分支                                	git checkout des_branch_name
创建并切换分支                           	git checkout -b new_branch_name
重命名分支				git branch -m|-M old_name new_name
删除分支					git branch -d|-D branch_name
查看 git branch 帮助                      	git help branch
获得 romote 信息                     	git remote (git remote -v)
添加新的 remote                     	git remote add &lt;remote_name&gt; &lt;remote_url&gt;
删除一个 remote                     	git remote rm &lt;remote_name&gt;
重命名一个 remote                   	git remote rename &lt;remote_old_name&gt; &lt;remote_new_name&gt;
将本地代码 push 到远程分支（远程分支不存在则创建）	git push &lt;remote_name&gt; &lt;local_branch&gt;:&lt;remote_branch&gt;
删除 remote 的一个分支                   	git push &lt;remote_name&gt; :&lt;remote_branch&gt;
添加子工程                             	git submodule add 仓库地址 路径
删除子工程
</pre>
</div></li>
<li><a id="orgheadline2"></a>content manager<br><div class="outline-text-5" id="text-1-1-1-2">
<pre class="example">
将本地修改加入索引			git add
取消本地内容修改 			  git reset --hard HEAD
回退到某个版本					git reset --hard &lt;commit id&gt;
提交本地修改到分支			git commit -m "commit msg"
取消前一次版本的修改内容	git revert HEAD
取消某个版本的修改内容		git revert &lt;commit id&gt;
</pre>
</div></li></ol>
</div>
<div id="outline-container-orgheadline4" class="outline-4">
<h4 id="orgheadline4"><span class="section-number-4">1.1.2</span> git svn</h4>
<div class="outline-text-4" id="text-1-1-2">
<pre class="example">
克隆 svn 仓库到本地仓库   git svn clone http://your.svn.url/svn/Demo
同步 svn 仓库到本地仓库   git svn rebase
将修改添加到本地仓库    git add/commit
将本地仓库同步到 svn 仓库 git svn dcommit (git svn dcommit 不会将本地的多个版本按时间顺序提交给 svn 服务器，而是将这些合为一个进行提交)
处理代码冲突的步骤：
（1）git svn dcommit 时提示需要更新,执行 git svn rebase
（2）解决冲突，执行 git add confilict.files 告知 git 已经解决冲突
（3）执行 git rebase --continue 自己对 confilict.files 的修改进入到本地仓库
（4）执行 git svn dcommit 将改动同步到 svn 仓库

为本地代码添加 git 仓库
git remote add my_origin https://github.com/wolfand11/XXX_SVN
将本地代码同步到 git 仓库
git push my_origin master:master
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline6" class="outline-3">
<h3 id="orgheadline6"><span class="section-number-3">1.2</span> 更新自己 fork 出来的源代码</h3>
<div class="outline-text-3" id="text-1-2">
<pre class="example">
问题说明：
从 https://github.com/cocos2d/CocosBuilder fork 出来一份 CocosBuilder 的源代码 MyCocosBuilder，
过一段时间以后，原来的 CocosBuilder 的 develop 分支有更新，需要将 CocosBuilder/develop 的更新添加到 MyCocosBuilder/develop 中。
操作方法：
(1)获得最新 MyCocosBuilder/develop 源代码
git clone -b develop https://github.com/wolfand11/CocosBuilder_v2_1.git ./MyCocosBuilder
cd MyCocosBuilder
git submodule update --init --recursive
(2)添加新的远程库
执行命令 git remote add real_origin https://github.com/cocos2d/CocosBuilder
(3)获得 real_origin/develop
git fetch real_origin develop
(4)Merge 修改到本地代码
git merge real_origin/develop
(5)更新 origin/develop 分支
push 本地的 develop 分支到 origin/develop 分支。即 https://github.com/wolfand11/CocosBuilder_v2_1.git 的 develop 分支
</pre>
</div>
</div>

<div id="outline-container-orgheadline7" class="outline-3">
<h3 id="orgheadline7"><span class="section-number-3">1.3</span> 在自己 fork 出来的源代码中，以最新源码为基础创建新分支</h3>
<div class="outline-text-3" id="text-1-3">
<pre class="example">
问题说明：
从 https://github.com/cocos2d/CocosBuilder fork 出来一份 CocosBuilder 的源代码 MyCocosBuilder，
并且在 MyCocosBuilder/develop 分支的基础上添加自己的分支 v2_0，.过一段时间以后，需要添加分支 MyCocosBuilder/v3_0，
并且要求 My_v3_0 以最新的 CocosBuilder/develop(或者 CocosBuilder/master)为基础。
操作方法：
(1)获得最新 CocosBuilder/develop 源代码
git clone -b develop git://github.com/cocos2d/CocosBuilder.git ./MyCocosBuilder/CocosBuilder_v3_0
cd MyCocosBuilder/CocosBuilder_v3_0
git submodule update --init --recursive
(2)添加新的远程库
执行命令 git remote add my_resource https://github.com/wolfand11/CocosBuilder_v2_1
(3)将本地 develop 分支 push 到 my_resource
git push my_source develop:v3_1
</pre>
</div>
</div>


<div id="outline-container-orgheadline10" class="outline-3">
<h3 id="orgheadline10"><span class="section-number-3">1.4</span> 库管理方案</h3>
<div class="outline-text-3" id="text-1-4">
</div><div id="outline-container-orgheadline8" class="outline-4">
<h4 id="orgheadline8"><span class="section-number-4">1.4.1</span> 库管理流程</h4>
<div class="outline-text-4" id="text-1-4-1">
<pre class="example">
1 初始化
（1）fork lib source
（2）以自己依赖的分支为基础，创建自己的分支
2 维护
方案 1：简单粗暴法
使用最新库源代码，覆盖当前自己的分支，然后 merge 变化
方案 2：
参考上面的文档：更新自己 fork 出来的源代码
</pre>
</div>
</div>
<div id="outline-container-orgheadline9" class="outline-4">
<h4 id="orgheadline9"><span class="section-number-4">1.4.2</span> 项目命名 分支命名规则 CommitLog 规则</h4>
<div class="outline-text-4" id="text-1-4-2">
<pre class="example">
自己的代码
1、项目名称以及分支名称可以参照其他开源项目命名方案。

Fork 出来的代码
1、项目名称前面加 My。例如：MyCocosBuilder Mycocos2d-x
2、加分支时，分支的命名前加 My_。例如：My_v2_1 My_v3_0
3、commit 时，如果修改了原来源代码的，日志前加[ChangeOrigin]
</pre>
</div>
</div>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Emacs]]></title>
      <url>http://wolfand11.coding.me/2016/08/13/tools/Emacs/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline20" class="outline-2">
<h2 id="orgheadline20"><span class="section-number-2">1</span> Base</h2>
<div class="outline-text-2" id="text-1">
<a id="more"></a>
</div>
<div id="outline-container-orgheadline1" class="outline-4">
<h4 id="orgheadline1"><span class="section-number-4">1.0.1</span> 符号解释</h4>
<div class="outline-text-4" id="text-1-0-1">
<pre class="example">
C : Control
M : Meta，通常 Alt 键被当作 Meta 使用
S : Shift
s : Super，通常就是键盘上带 Windows 徽章的那个键
Del = Backspace
</pre>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-4">
<h4 id="orgheadline2"><span class="section-number-4">1.0.2</span> 快捷键规律</h4>
<div class="outline-text-4" id="text-1-0-2">
<pre class="example">
1、如果直接输入，键盘上的数字、字母以及符号仅仅插入该字符。
2、常用的函数被绑定到 Ctrl 或者 Meta 键所对应的快捷键上(例如 C-e 到行 尾，C-_ 是撤消，C-y 是粘贴)。
3、如果绑定到前缀 Ctrl 上的函数操作对象是一个字符，那么绑定到前缀 Meta 上的函数对应的的操作对象则是一个词(如果这快捷键有意义的话)。类似的， 如果前缀 Ctrl 对应的快捷键操作对象是一行，那么前缀 Meta 对应的快捷键 将操纵句子。例如：C-t 互换两个字符，而 M-t 互换两个词。C-e 移动到 行尾，而 M-e 移动到句子的尾部。
4、一些不是特别常用的函数绑定到前缀 C-x 上。例如 C-x C-c 退出 Emacs，C-x 2 水平分割当前 window。
5、与某个 mode 相关的的函数被绑定到前缀 C-c 上。
6、最不常用的函数根本没有键绑定，而是使用 M-x 然后输入函数名来调用他们。
7、前缀 C-x 4 被保留作操作另外一个 window 用的函数，例如 C-x 4 C-f 在另 外一个 window 里面打开文件。类似的，C-x 5 被绑定到操纵其他 frame 的 函数上面：C-x 5 C-f 才另外一个 frame 里面打开文件。注意到这两个函数与 C-x C-f (打开文件) 有同样的键绑定，只是在中间插入了 4 或者 5， 这并不是一个巧合。
</pre>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-4">
<h4 id="orgheadline3"><span class="section-number-4">1.0.3</span> 基本快捷键(Basic)</h4>
<div class="outline-text-4" id="text-1-0-3">
<pre class="example">
C-x C-f “find”文件, 即在缓冲区打开/新建一个文件
C-x C-s 保存文件
C-x C-w 使用其他文件名另存为文件
C-x C-v 关闭当前缓冲区文件并打开新文件
C-x i 在当前光标处插入文件
C-x b 新建/切换缓冲区
C-x C-b 显示缓冲区列表
C-x k 关闭当前缓冲区
C-z 挂起 emacs
C-x C-c 关闭 emacs
</pre>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-4">
<h4 id="orgheadline4"><span class="section-number-4">1.0.4</span> 光标移动基本快捷键(Basic Movement)</h4>
<div class="outline-text-4" id="text-1-0-4">
<pre class="example">
C-f 后一个字符
C-b 前一个字符
C-p 上一行
C-n 下一行
M-f 后一个单词
M-b 前一个单词
C-a 行首
C-e 行尾
M-a 句首
M-e 句尾
M-{ 段首
M-} 段尾
C-v 向下翻一页
M-v 向上翻一页
M-&lt; 到文件开头
M-&gt; 到文件末尾
</pre>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-4">
<h4 id="orgheadline5"><span class="section-number-4">1.0.5</span> 编辑(Edit)</h4>
<div class="outline-text-4" id="text-1-0-5">
<ul class="org-ul">
<li>M 对单词操作 C 对字符操作<br></li>
</ul>
<pre class="example">
M-n 重复执行后一个命令 n 次
C-u 重复执行后一个命令 4 次
C-u n 重复执行后一个命令 n 次
C-d 删除(delete)后一个字符
M-d 删除后一个单词
Del 删除前一个字符
M-Del 删除前一个单词
C-k 移除(kill)一行

C-Space 设置开始标记 (例如标记区域)
C-@ 功能同上, 用于 C-Space 被操作系统拦截的情况
C-w 移除(kill)标记区域的内容
M-w 复制标记区域的内容
C-y 召回(yank)复制/移除的区域/行
M-y 召回更早的内容 (在 kill 缓冲区内循环)
C-x C-x 交换光标和标记

M-Up   向上移动一行内容
M-Down 向下移动一行内容
C-t 交换两个字符的位置
M-t 交换两个单词的位置
C-x C-t 交换两行的位置
M-u 使从光标位置到单词结尾处的字母变成大写(uppercase)
M-l 与 M-u 相反(lowercase)
M-c 使从光标位置开始的单词的首字母变为大写(capital)
</pre>
</div>
</div>

<div id="outline-container-orgheadline6" class="outline-4">
<h4 id="orgheadline6"><span class="section-number-4">1.0.6</span> 重要快捷键(Important)</h4>
<div class="outline-text-4" id="text-1-0-6">
<pre class="example">
C-g 停止当前运行/输入的命令
C-x u 撤销前一个命令
M-x revert-buffer RETURN (照着这个输入)撤销上次存盘后所有改动
M-x recover-file RETURN 从自动存盘文件恢复
M-x recover-session RETURN 如果你编辑了几个文件, 用这个恢复
</pre>
</div>
</div>

<div id="outline-container-orgheadline7" class="outline-4">
<h4 id="orgheadline7"><span class="section-number-4">1.0.7</span> 在线帮助(Online-Help)</h4>
<div class="outline-text-4" id="text-1-0-7">
<pre class="example">
C-h c 显示快捷键绑定的命令
C-h k 显示快捷键绑定的命令和它的作用
C-h l 显示最后 100 个键入的内容
C-h w 显示命令被绑定到哪些快捷键上
C-h f 显示函数的功能
C-h v 显示变量的含义和值
C-h m 显示当前缓冲区模式的帮助文档
C-h b 显示当前缓冲区所有可用的快捷键
C-h t 打开 emacs 教程
C-h i 打开 info 阅读器
C-h C-f 显示 emacs FAQ
C-h p 显示本机 Elisp 包的信息
</pre>
</div>
</div>

<div id="outline-container-orgheadline10" class="outline-4">
<h4 id="orgheadline10"><span class="section-number-4">1.0.8</span> 搜索/替换(Seach/Replace)</h4>
<div class="outline-text-4" id="text-1-0-8">
</div><ol class="org-ol"><li><a id="orgheadline8"></a>基本操作<br><div class="outline-text-5" id="text-1-0-8-1">
<ul class="org-ul">
<li>C-s 开始正向查找<br></li>
<li>C-r 开始方向查找<br></li>
</ul>
<pre class="example">
这两个命令进入了查找模式，在 Emacs 中的术语叫做 Incremental Search， 也就是在你输入要 查找的字符的时候，同时高亮显示找到的部分。

C-g 回到搜索开始前的位置(如果你仍然在搜索模式中)
M-% 询问并替换(query replace)

Space 或 y 替换当前匹配
Del 或 n 不要替换当前匹配
. 仅仅替换当前匹配并退出(替换)
, 替换并暂停(按 Space 或 y 继续)
! 替换以下所有匹配
^ 回到上一个匹配位置
RETURN 或 q 退出替换

使用正则表达式(Regular expression)搜索/替换
可在正则表达式中使用的符号:
^ 行首
$ 行尾
. 单个字符
.* 任意多个(包括没有)字符
&lt; 单词开头
\&gt; 单词结尾
\[] 括号中的任意一个字符(例如[a-z]表示所有的小写字母)

M C-s RETURN 使用正则表达式向后搜索
M C-r RETURN 使用正则表达式向前搜索
C-s 增量搜索
C-s 重复增量搜索
C-r 向前增量搜索
C-r 重复向前增量搜索
M-x query-replace-regexp 使用正则表达式搜索并替换
</pre>
</div></li>
<li><a id="orgheadline9"></a>在查找模式下的一些操作<br><div class="outline-text-5" id="text-1-0-8-2">
<p>
下面的操作都是先按 C-s 或者 C-r 后， 进入 Incremental Search Mode 之后的操作。<br>
</p>
<ul class="org-ul">
<li>C-r , C-s， 分别是向前查找和向后查找当前输入的内容。<br></li>
</ul>
<pre class="example">
如果当前内容是空的，也就是说你连续两次输入 C-s，那么就是 “查找下一个 (Find next)”的 操作。第一次是 C-s 把你带入了 Incremental Search Mode， 第二次的 C-s 表示查找上一次查 过的东西。C-r 类似，只不过方向相反。
</pre>

<ul class="org-ul">
<li>C-w 查找光标处所在的单词<br></li>
</ul>
<pre class="example">
例如， 你可以输入 C-r 然后马上输入 C-w， 光标所在位置的单词就自动变成了要查找的内容。
多次输入 C-w 后面的单词就会一个一个 的变成了查找内容一部分。
C-w 还可以和上面介绍的 C-s C-r 配合使用。C-s 进入 Incremental Search Mode. 然后输入 void f 然后光标会停留在一个 void f 的单词上，也许是 void far，然后用 C-s 或者 C-r 找 到某个 void f 的地方，然后 C-w 就可以把 f 后面的单词补全了。
</pre>

<ul class="org-ul">
<li>C-y 把光标所在位置到行尾的部分作为查找内容<br></li>
</ul>
<pre class="example">
和 C-w 类似，只不过输入的不是一个单词， 而是整整一行。
</pre>

<ul class="org-ul">
<li>M-y 把 kill ring 中的东西输入为当前要查找的内容<br></li>
<li>M-c 切换大小写敏感。<br></li>
<li>M-r 切换是普通查找还是正则表达式查找。<br></li>
<li>M-e 编辑要查找的内容<br></li>
</ul>
<pre class="example">
Incremental Search 会随着用户的输入不断的改变光标的位置，有的时候很讨厌，那么就可以 M-e 编辑要查找的内容，然后按 Enter 回到 Incremetal Search。
</pre>

<ul class="org-ul">
<li>M-n M-p 浏览查找历史纪录<br></li>
</ul>
<pre class="example">
可以查找以前 查找过的内容。
</pre>

<ul class="org-ul">
<li>C-q C-j 查找多行文字。<br></li>
</ul>
<pre class="example">
如果你要的查找的内容是多行文字，也就是说，查找内容中含有换行字符 C-j 但是，Enter 键又 作为结束查找的操作，一按 Enter 就退出了查找模式了。那么 C-q C-j 可以解决这个问题。
</pre>
</div></li></ol>
</div>

<div id="outline-container-orgheadline11" class="outline-4">
<h4 id="orgheadline11"><span class="section-number-4">1.0.9</span> Frame Window Buffer 命令(Window Commands)</h4>
<div class="outline-text-4" id="text-1-0-9">
<pre class="example">
Frame   是指 Emacs 的 GUI 框架，这是平台相关。这里称作窗框。
Window  是指显示 buffer 内容的 GUI 元素。这里称作窗口。
Buffer  是指 emacs 中存放信息的逻辑对象，该信息可以是来自文件，当然也可以不来自文件。例如：*help*缓冲区。这里称作缓冲区。

对缓冲区进行操作
C-x k 删除缓冲区，默认删除当前缓冲区。当前 window 会显示其他缓冲区。

对当前 widnow 进行操作
C-x ^ 扩大窗口
M-x shrink-window 缩小窗口
C-x 0 关闭窗口
C-x 1 关闭除了光标所在窗口外的所有窗口
C-x 2 水平分割窗口
C-x 3 垂直分割窗口
C-x o 切换至其他窗口
C-x 4 0 关闭当前缓冲区和窗口

对其他 window 进行操作
C-x 4 f 在其他窗口中打开文件
M C-v   滚动其他窗口内容

对 frame 进行操作
C-x 5 0 关闭当前窗框
C-x 5 1 关闭除当前窗框外的所有窗框
C-x 5 2 新建窗框(frame)
C-x 5 f 在新窗框中打开文件（frame）
C-x 5 o 切换至其他窗框(o 即 other)
</pre>
</div>
</div>

<div id="outline-container-orgheadline12" class="outline-4">
<h4 id="orgheadline12"><span class="section-number-4">1.0.10</span> 书签命令(Bookmark commands)</h4>
<div class="outline-text-4" id="text-1-0-10">
<pre class="example">
C-x r m 在光标当前位置创建书签
C-x r b 转到书签
M-x bookmark-rename 重命名书签
M-x bookmark-delete 删除书签
M-x bookmark-save 保存书签
C-x r l 列出书签清单

d 标记等待删除
Del 取消删除标记
x 删除被标记的书签
r 重命名
s 保存列表内所有书签
f 转到当前书签指向的位置
m 标记在多窗口中打开
v 显示被标记的书签(或者光标当前位置的书签)
t 切换是否显示路径列表
w 显示当前文件路径
q 退出书签列表

M-x bookmark-write 将所有书签导出至指定文件
M-x bookmark-load 从指定文件导入书签
</pre>
</div>
</div>

<div id="outline-container-orgheadline13" class="outline-4">
<h4 id="orgheadline13"><span class="section-number-4">1.0.11</span> Shell</h4>
<div class="outline-text-4" id="text-1-0-11">
<pre class="example">
M-x shell 打开 shell 模式
C-c C-c 类似 unix 里的 C-c(停止正在运行的程序)
C-d 删除光标后一个字符
C-c C-d 发送 EOF
C-c C-z 挂起程序(unix 下的 C-z)
M-p 显示前一条命令
M-n 显示后一条命令
C-c C-x 执行当前缓冲区的脚本
</pre>
</div>
</div>

<div id="outline-container-orgheadline14" class="outline-4">
<h4 id="orgheadline14"><span class="section-number-4">1.0.12</span> Telnet</h4>
<div class="outline-text-4" id="text-1-0-12">
<pre class="example">
M-x telnet 打开 telnet 模式
C-d 删除后一个字符或发送 EOF
C-c C-c 停止正在运行的程序(和 unix 下的 C-c 类似)
C-c C-d 发送 EOF
C-c C-o 清除最后一个命令的输出
C-c C-z 挂起正在运行的命令
C-c C-u 移除前一行
M-p 显示前一条命令
</pre>
</div>
</div>

<div id="outline-container-orgheadline15" class="outline-4">
<h4 id="orgheadline15"><span class="section-number-4">1.0.13</span> Text</h4>
<div class="outline-text-4" id="text-1-0-13">
<pre class="example">
只能在 text 模式里使用
M-s 使当前行居中
M-S 使当前段落居中
M-x center-region 使被选中的区域居中
</pre>
</div>
</div>

<div id="outline-container-orgheadline16" class="outline-4">
<h4 id="orgheadline16"><span class="section-number-4">1.0.14</span> 宏命令(Macro-commands)</h4>
<div class="outline-text-4" id="text-1-0-14">
<pre class="example">
C-x ( 开始定义宏
C-x ) 结束定义宏
C-x e 运行最近定义的宏
M-n C-x e 运行最近定义的宏 n 次
M-x name-last-kbd-macro 给最近定义的宏命名(用来保存)
M-x insert-kbd-macro 将已命名的宏保存到文件
M-x load-file 载入宏
</pre>
</div>
</div>

<div id="outline-container-orgheadline17" class="outline-4">
<h4 id="orgheadline17"><span class="section-number-4">1.0.15</span> 编程(Programming)</h4>
<div class="outline-text-4" id="text-1-0-15">
<pre class="example">
M C- 自动缩进光标和标记间的区域
M-m 移动光标到行首第一个(非空格)字符
M-^ 将当前行接到上一行末尾处
M-; 添加缩进并格式化的注释
comment-region uncomment-region 命令用来注释代码

C, C++和 Java 模式
M-a 移动光标到声明的开始处
M-e 移动光标到声明的结尾处
M C-a 移动光标到函数的开始处
M C-e 移动光标到函数的结尾处
C-c RETURN 将光标移动到函数的开始处并标记到结尾处
C-c C-q 根据缩进风格缩进整个函数
C-c C-a 切换自动换行功能
C-c C-d 一次性删除光标后的一串空格(greedy delete)

为了实现下面的一些技术, 你需要在保存源代码的目录里运行”etags
*.c *.h *.cpp”(或者源代码的其他的扩展名)

M-.(点) 搜索标签
M-x tags-search ENTER 在所有标签里搜索(使用正则表达式)
M-,(逗号) 在 tags-search 里跳至下一个匹配处
M-x tags-query-replace 在设置过标签的所有文件里替换文本
</pre>
</div>
</div>

<div id="outline-container-orgheadline18" class="outline-4">
<h4 id="orgheadline18"><span class="section-number-4">1.0.16</span> GDB(调试器)</h4>
<div class="outline-text-4" id="text-1-0-16">
<pre class="example">
M-x gdb 在另一个的窗口中打开 gdb
</pre>
</div>
</div>

<div id="outline-container-orgheadline19" class="outline-4">
<h4 id="orgheadline19"><span class="section-number-4">1.0.17</span> 版本控制(Version Control)</h4>
<div class="outline-text-4" id="text-1-0-17">
<pre class="example">
C-x v d 显示当前目录下所有注册过的文件(show all registered files in this dir)
C-x v = 比较不同版本间的差异(show diff between versions)
C-x v u 移除上次提交之后的更改(remove all changes since last checkin)
C-x v ~ 在不同窗格中显示某个版本(show certain version in different window)
C-x v l 打印日志(print log)
C-x v i 标记文件等待添加版本控制(mark file for version control add)
C-x v h 给文件添加版本控制文件头(insert version control header into file)
C-x v r 获取命名过的快照(check out named snapshot)
C-x v s 创建命名的快照(create named snapshot)
C-x v a 创建 gnu 风格的更改日志(create changelog file in gnu-style)
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline41" class="outline-2">
<h2 id="orgheadline41"><span class="section-number-2">2</span> Plugin</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-orgheadline21" class="outline-3">
<h3 id="orgheadline21"><span class="section-number-3">2.1</span> normal usage</h3>
<div class="outline-text-3" id="text-2-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">快捷键</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">M-g g</td>
<td class="org-left">goto-line</td>
</tr>

<tr>
<td class="org-left">emacs -q</td>
<td class="org-left">不加载配置文件启动 emacs</td>
</tr>

<tr>
<td class="org-left">Esc x</td>
<td class="org-left">在命令行模式下调用 M-x (可以设置 Terminal alt 键转化为 Esc 键</td>
</tr>

<tr>
<td class="org-left">M-&gt;</td>
<td class="org-left">到达文件末尾位置</td>
</tr>

<tr>
<td class="org-left">M-&lt;</td>
<td class="org-left">到达文件起始位置</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-orgheadline22" class="outline-3">
<h3 id="orgheadline22"><span class="section-number-3">2.2</span> package</h3>
<div class="outline-text-3" id="text-2-2">
<pre class="example">
安装插件：
运行命令 M-x package-list-packages，会列出所有可下载的插件。选择插件，会有 Install 提示。

卸载插件：
M-x package-list-packages
C-s need-remove-package
mark the package for deletion by typing D
execute by typing x

插件加载：
1 直接加载 需要写文件的完整路径
  (load-file "elisp-file-path")
2 require 方式加载 不需要对每个需要加载的 plug 都指定完整的路径
  (provide 'my-plug)
  (require 'my-plug)
  (add-to-list 'load-path "my-plug-dir")
3 autoload 方式加载 指定调用某个函数时先加载对应的文件。只用调用该函数的时候才真正加载该函数。否则指定定义一个空的该函数。
  eval-after-load 用于加载完某个插件后的初始化
  (autoload 'some-function "function-file-path")
  (eval-after-load 'my-plug '(progn ...))
</pre>
</div>
</div>

<div id="outline-container-orgheadline34" class="outline-3">
<h3 id="orgheadline34"><span class="section-number-3">2.3</span> dired</h3>
<div class="outline-text-3" id="text-2-3">
</div><div id="outline-container-orgheadline23" class="outline-4">
<h4 id="orgheadline23"><span class="section-number-4">2.3.1</span> 一些常用的命令</h4>
<div class="outline-text-4" id="text-2-3-1">
<pre class="example">
和文件一样打开目录或通过 C-x d 都可以进入目录的 Dired 缓冲中。这里是打开 Dired-x 之后默认的绑定。说明后面[]中的符号的意义：
[*] 作用在已标记的所有文件(目录)或光标所在当前文件(目录)上。
[p] 用前缀参数表示文件个数，从当前文件开始，正数向下、负数向上。
[u] 用前缀参数改变默认行为。对于设置标记的命令一般变为去掉标记。
[x] 需要加载 dired-x。
</pre>
</div>
</div>
<div id="outline-container-orgheadline24" class="outline-4">
<h4 id="orgheadline24"><span class="section-number-4">2.3.2</span> 查看帮助</h4>
<div class="outline-text-4" id="text-2-3-2">
<pre class="example">
? 简单帮助
h 模式帮助
</pre>
</div>
</div>
<div id="outline-container-orgheadline25" class="outline-4">
<h4 id="orgheadline25"><span class="section-number-4">2.3.3</span> 移动光标</h4>
<div class="outline-text-4" id="text-2-3-3">
<pre class="example">
n, p, SPC 上、下移动光标 [p]
C-n, C-p 上、下移动光标 [p]
M-{, M-} 已标记的文件之间移动 [p]
C-M-p, C-M-n 缓冲中的子目录间移动 [p]
&lt;, &gt; 缓冲中的目录行间移动 [p]
C-M-u 缓冲中的目录树上移动 [p]
M-g 光标移动到某个文件上
M-G 光标移动到某个缓冲中的子目录上，(用 i 插入的)
</pre>
</div>
</div>
<div id="outline-container-orgheadline26" class="outline-4">
<h4 id="orgheadline26"><span class="section-number-4">2.3.4</span> 标记文件</h4>
<div class="outline-text-4" id="text-2-3-4">
<pre class="example">
m 标记文件，下移一行 [p]
u 去掉标记，下移一行 [p]
U 去掉缓冲中所有的标记
M-Backspace 去掉缓冲中所有的某个标记，缺省为 * 标记
Backspace 并去掉上一行标记，并上移一行 [p]
t 标记/未标记互换
D 删除所有标记的文件/目录 [*]
d 设置“删除标记”（字符 D），并且光标下移一行 [p]
x 删除用 d 标记的文件/目录
~ 将缓冲中备份文件做删除标记 [u]
&amp; 没用的文件，做删除标记
# 将缓冲中自动保存的文件做删除标记 [u]
. 按备份文件版本，将备份文件做删除标记 [u]
% g 标记所有“含有”regexp 的文件 [u]
\* * 标记所有可执行文件 [u]
\* . 标记所有同扩展名文件 [ux]
\* / 标记所有目录 [u]
\* @ 标记所有符号连接 [u]
\* c 改变标记的符号
% d 通过匹配 regexp 标记删除
% m 通过匹配 regexp 标记 [u]
</pre>
</div>
</div>
<div id="outline-container-orgheadline27" class="outline-4">
<h4 id="orgheadline27"><span class="section-number-4">2.3.5</span> 复制、移动、创建 文件或目录以及连接</h4>
<div class="outline-text-4" id="text-2-3-5">
<pre class="example">
C-x C-f 创建文件
+ 创建目录
R 文件的重命名/移动 [p*]
C 复制文件 [*]
S 创建文件的 Symbol link (绝对路径) [p*]
Y 创建文件的 Symbol link (相对路径) [px*]
H 创建文件的 Hard link [p*]
% C 复制匹配 regexp 的文件 [p*]
% S 创建匹配 regexp 的 Symbol link (绝对路径) [p*]
% Y 创建匹配 regexp 的 Symbol link (相对路径) [p*]
% H 创建匹配 regexp 的 Hark link [p*]
</pre>
</div>
</div>
<div id="outline-container-orgheadline28" class="outline-4">
<h4 id="orgheadline28"><span class="section-number-4">2.3.6</span> 修改文件名、属性</h4>
<div class="outline-text-4" id="text-2-3-6">
<pre class="example">
M 修改文件 rwx 权限属性 [*]
G 修改文件 Group 属性 [p*]
O 修改文件 Owner 属性 [p*]
T 修改文件的时间戳 [p*]
% l 文件名逐一改为小写 [p*]
% u 文件名逐一改为大写 [p*]
% R, % r 重命名/移动匹配 regexp 的文件 [p*]
</pre>
</div>
</div>
<div id="outline-container-orgheadline29" class="outline-4">
<h4 id="orgheadline29"><span class="section-number-4">2.3.7</span> 访问文件，目录</h4>
<div class="outline-text-4" id="text-2-3-7">
<pre class="example">
e, f, RET 打开文件或目录
a 打开文件或目录，并替换当前缓冲
v 使用 view 模式查看文件，q 退出，有些文件使用外部查看程序调用
o 另一个窗口中，打开文件或目录
C-o 另一个窗口中，打开文件或目录，但当前窗口不变
F 打开(多个)文件 [x*]
I 使用 Info 模式查看文件
N 使用 man 模式查看文件，若有前缀参数，提示输入处理命令 [ux*]
V 使用 RMAIL 模式查看文件 [x]
^ 访问目录的父目录，若有前缀参数在另外的窗口中打开 [u]
</pre>
</div>
</div>
<div id="outline-container-orgheadline30" class="outline-4">
<h4 id="orgheadline30"><span class="section-number-4">2.3.8</span> 退出</h4>
<div class="outline-text-4" id="text-2-3-8">
<pre class="example">
q 退出缓冲，若有前缀参数则关闭缓冲 [u]
</pre>
</div>
</div>
<div id="outline-container-orgheadline31" class="outline-4">
<h4 id="orgheadline31"><span class="section-number-4">2.3.9</span> 隐藏/刷新缓冲中内容</h4>
<div class="outline-text-4" id="text-2-3-9">
<pre class="example">
s 互换缓冲中“文件名/时间”排序 [u]
C-u s 修改传递给 ls 的参数，即修改每行的内容
i 把当前行的子目录插入缓冲中
M-o 隐藏/显示部分次要文件，使缓冲更简便，若有前缀参数标记隐藏的文件 [ux]
$ 隐藏/显示当前目录中内容 [p]
M-$ 隐藏/显示缓冲中所有目录内容
k 隐藏文件，按 g 可以再显示出来 [p*]
l 刷新缓冲文件 [p*]
g 刷新缓冲所有文件
C-/, C-_, C-x u dired 模式的 undo
</pre>
</div>
</div>
<div id="outline-container-orgheadline32" class="outline-4">
<h4 id="orgheadline32"><span class="section-number-4">2.3.10</span> 其他</h4>
<div class="outline-text-4" id="text-2-3-10">
<pre class="example">
= 比较文件
M-= 文件和备份之间比较，若有前缀参数，提示输入 diff 选项 [u]
w 复制文件名到 kill-ring [p*]
Z 压缩/解压缩文件 [p*]
X 在文件上执行 shell 命令 [p*]
B 编译(Emacs Lisp)文件 [p*]
L 加载(Emacs Lisp)文件 [p*]
y 给出文件类型信息 (通过 file 命令)
P 打印文件 [p*]
</pre>
</div>
</div>
<div id="outline-container-orgheadline33" class="outline-4">
<h4 id="orgheadline33"><span class="section-number-4">2.3.11</span> dired-x.el 中的其他有用的函数</h4>
<div class="outline-text-4" id="text-2-3-11">
<pre class="example">
dired-mark-extension 按后缀标记
dired-flag-extension 按后缀标记删除
dired-clean-patch 标记删除 patch 文件
dired-clean-tex 标记删除 tex 编译文件
dired-very-clean-tex 标记删除 tex 编译文件
dired-jump 跳转到当前缓冲所在目录
dired-jump-other-window 在另一个窗口中跳转到当前缓冲所在目录
dired-omit-here-always 在当前目录生成 .dired 文件
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline35" class="outline-3">
<h3 id="orgheadline35"><span class="section-number-3">2.4</span> vc-mode</h3>
<div class="outline-text-3" id="text-2-4">
<pre class="example">
运行命令     	ctrl+x v d，会进入 vc-dired buffer
Revert 改变	ctrl+x v u 执行 vc-revert
</pre>
</div>
</div>
<div id="outline-container-orgheadline36" class="outline-3">
<h3 id="orgheadline36"><span class="section-number-3">2.5</span> helm</h3>
<div class="outline-text-3" id="text-2-5">
<ul class="org-ul">
<li>光标移动操作<br></li>
</ul>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">快捷键</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">C-n</td>
<td class="org-left">移动到下一个</td>
</tr>

<tr>
<td class="org-left">C-p</td>
<td class="org-left">移动到前一个</td>
</tr>

<tr>
<td class="org-left">C-v</td>
<td class="org-left">移动到下个分页的第一个</td>
</tr>

<tr>
<td class="org-left">M-v</td>
<td class="org-left">移动到上个分页的第一个</td>
</tr>

<tr>
<td class="org-left">M-&lt;</td>
<td class="org-left">移动到最上面</td>
</tr>

<tr>
<td class="org-left">M-&gt;</td>
<td class="org-left">移动到最下面</td>
</tr>
</tbody>
</table>
<p>
spacemacs 下 M-SPC 可以进入光标移动模式，之后用 j k 移动光标<br>
</p>

<ul class="org-ul">
<li>选中操作<br></li>
</ul>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">快捷键</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">M-a</td>
<td class="org-left">选中当前列表中的所有 buffer</td>
</tr>

<tr>
<td class="org-left">C-SPC</td>
<td class="org-left">选中光标所在项目</td>
</tr>
</tbody>
</table>

<ul class="org-ul">
<li>杂项<br></li>
</ul>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">快捷键</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">C-t</td>
<td class="org-left">切换 helm buffer 位置</td>
</tr>

<tr>
<td class="org-left">M-D</td>
<td class="org-left">关闭所有选中的 buffer</td>
</tr>

<tr>
<td class="org-left">C-c C-i</td>
<td class="org-left">将选中的项目插入到 buffer 中</td>
</tr>

<tr>
<td class="org-left">C-z</td>
<td class="org-left">helm-select-action 显示并选择 helm 中执行的预制命令</td>
</tr>

<tr>
<td class="org-left">C-i</td>
<td class="org-left">helm-execute-persistent-action 在 helm 中执行预制的命令</td>
</tr>
</tbody>
</table>

<ul class="org-ul">
<li>功能快捷键<br></li>
</ul>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">默认快捷键</th>
<th scope="col" class="org-left">Spacemacs 快捷键</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">prefix + C-c SPC</td>
<td class="org-left">SPC r m</td>
<td class="org-left">helm-all-mark-rings 显示 all mark 列表</td>
</tr>

<tr>
<td class="org-left">prefix + M-y</td>
<td class="org-left">SPC r y</td>
<td class="org-left">显示 kill ring 列表</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-orgheadline37" class="outline-3">
<h3 id="orgheadline37"><span class="section-number-3">2.6</span> ergoemacs</h3>
<div class="outline-text-3" id="text-2-6">
<pre class="example">
C-. Quit
</pre>
</div>
</div>
<div id="outline-container-orgheadline40" class="outline-3">
<h3 id="orgheadline40"><span class="section-number-3">2.7</span> yasnippet</h3>
<div class="outline-text-3" id="text-2-7">
</div><div id="outline-container-orgheadline38" class="outline-4">
<h4 id="orgheadline38"><span class="section-number-4">2.7.1</span> snippet 目录</h4>
<div class="outline-text-4" id="text-2-7-1">
<p>
snippet 目录名称必须是模式的全名<br>
</p>
<pre class="example">
lua-mode   // 这是可以的
lua        // 这是不可以的
</pre>
</div>
</div>
<div id="outline-container-orgheadline39" class="outline-4">
<h4 id="orgheadline39"><span class="section-number-4">2.7.2</span> 多个模式共享 snippet</h4>
<div class="outline-text-4" id="text-2-7-2">
<p>
可以通过.yas-parents 来在多个模式中共享 snippet<br>
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline92" class="outline-2">
<h2 id="orgheadline92"><span class="section-number-2">3</span> spacemacs</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-orgheadline42" class="outline-4">
<h4 id="orgheadline42"><span class="section-number-4">3.0.1</span> spacemacs-doc</h4>
<div class="outline-text-4" id="text-3-0-1">
<p>
<a href="https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org" target="_blank" rel="external">https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline58" class="outline-4">
<h4 id="orgheadline58"><span class="section-number-4">3.0.2</span> normal usage</h4>
<div class="outline-text-4" id="text-3-0-2">
</div><ol class="org-ol"><li><a id="orgheadline43"></a>selected<br><div class="outline-text-5" id="text-3-0-2-1">
<pre class="example">
SPC-v 可用来选中一个单词、一句话、一段话
  v $   选中当前字符到当前行尾的字符
  v 0   选中当前字符到当前行首的字符
Ctrl-v 开启列选中
</pre>
</div></li>
<li><a id="orgheadline47"></a>editing<br><ol class="org-ol"><li><a id="orgheadline44"></a>在 normal 模式下：<br><div class="outline-text-6" id="text-3-0-2-2-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">快捷键</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">c</td>
<td class="org-left">修改</td>
</tr>

<tr>
<td class="org-left">C</td>
<td class="org-left">修改到行末尾</td>
</tr>

<tr>
<td class="org-left">d</td>
<td class="org-left">删除</td>
</tr>

<tr>
<td class="org-left">D</td>
<td class="org-left">删除到行末尾</td>
</tr>

<tr>
<td class="org-left">y</td>
<td class="org-left">复制</td>
</tr>

<tr>
<td class="org-left">Y</td>
<td class="org-left">复制到行末尾</td>
</tr>

<tr>
<td class="org-left">p</td>
<td class="org-left">粘贴到当前光标位置之后</td>
</tr>

<tr>
<td class="org-left">P</td>
<td class="org-left">粘贴到当前光标位置之前</td>
</tr>

<tr>
<td class="org-left">r</td>
<td class="org-left">替换一个字符</td>
</tr>

<tr>
<td class="org-left">R</td>
<td class="org-left">替换几个连在一起的字符</td>
</tr>

<tr>
<td class="org-left">SPC-x-d-w</td>
<td class="org-left">删除空格</td>
</tr>

<tr>
<td class="org-left">&lt;</td>
<td class="org-left">减少缩进</td>
</tr>

<tr>
<td class="org-left">&gt;</td>
<td class="org-left">增加缩进</td>
</tr>

<tr>
<td class="org-left">SPC j</td>
<td class="org-left">indent-region-or-buffer 自动化缩进</td>
</tr>

<tr>
<td class="org-left">SPC ;</td>
<td class="org-left">注释或取消注释</td>
</tr>

<tr>
<td class="org-left">SPC c l</td>
<td class="org-left">注释或取消注释一行</td>
</tr>

<tr>
<td class="org-left">SPC c p</td>
<td class="org-left">注释或取消注释一段</td>
</tr>

<tr>
<td class="org-left">gu/gU</td>
<td class="org-left">大小写转换</td>
</tr>

<tr>
<td class="org-left">ddp</td>
<td class="org-left">交换两行</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">SPC i s</td>
<td class="org-left">插入 snippet</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline45"></a>在 insert 模式下：<br><div class="outline-text-6" id="text-3-0-2-2-2">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">快捷键</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Ctrl-y</td>
<td class="org-left">复制上一行相同位置的字符</td>
</tr>

<tr>
<td class="org-left">Ctrl-e</td>
<td class="org-left">复制下一行相同位置的字符</td>
</tr>

<tr>
<td class="org-left">Ctrl-t</td>
<td class="org-left">增加缩进</td>
</tr>

<tr>
<td class="org-left">Ctrl-d</td>
<td class="org-left">减少缩进</td>
</tr>

<tr>
<td class="org-left">Ctrl-o</td>
<td class="org-left">下一个 normal 模式的命令结束后回到 insert 模式</td>
</tr>

<tr>
<td class="org-left">Ctrl-f</td>
<td class="org-left">先前移动光标</td>
</tr>

<tr>
<td class="org-left">Ctrl-b</td>
<td class="org-left">先后移动光标</td>
</tr>

<tr>
<td class="org-left">Alt-f</td>
<td class="org-left">先前移动光标到下一个单词</td>
</tr>

<tr>
<td class="org-left">Alt-b</td>
<td class="org-left">先后移动光标到下一个单词</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline46"></a>在 visual 模式下<br><div class="outline-text-6" id="text-3-0-2-2-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">快捷键</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">SPC-s-e</td>
<td class="org-left">进入 iedit 模式，进行修改</td>
</tr>
</tbody>
</table>
</div></li></ol></li>

<li><a id="orgheadline48"></a>move cursor<br><div class="outline-text-5" id="text-3-0-2-3">
<pre class="example">
h j k l 左下上右移动光标
0       移动到行首
$				移动到行尾
Ctrl-b  向上翻一屏
Ctrl-f  向下翻一屏
Ctrl-u  向上翻半屏
Ctrl-d  向下翻半屏
H M L   将光标移动到屏幕 高 中 底部
``      回到光标的上一个位置
123G / 123gg / :123 
        移动到 123 行 
SPC SPC avy goto char
SPC y   avy goto line
</pre>
</div></li>
<li><a id="orgheadline49"></a>move screen<br><div class="outline-text-5" id="text-3-0-2-4">
<pre class="example">
z ENTER 保持光标位于滚动屏幕顶部
z -     保持光标位于滚动屏幕底部
z .     保持光标位于滚动屏幕中部

SPC t - 保持光标位于屏幕中间
</pre>
</div></li>
<li><a id="orgheadline50"></a>move window<br><div class="outline-text-5" id="text-3-0-2-5">
<pre class="example">
SPC w J window move down
SPC w K window move up
SPC w H window move left
SPC w L window move right
</pre>
</div></li>
<li><a id="orgheadline52"></a>search find<br><ol class="org-ol"><li><a id="orgheadline51"></a>在 normal 模式下<br><div class="outline-text-6" id="text-3-0-2-6-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">命令</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">\*</td>
<td class="org-left">向前搜索当前光标处的单词</td>
</tr>

<tr>
<td class="org-left">\#</td>
<td class="org-left">向后搜索当前光标处的单词</td>
</tr>

<tr>
<td class="org-left">\/</td>
<td class="org-left">开启搜索，输入需要搜索的文字</td>
</tr>

<tr>
<td class="org-left">SPC / 或 SPC *</td>
<td class="org-left">智能搜索光标处的文字 helm-projectile-grep-or-ack</td>
</tr>

<tr>
<td class="org-left">SPC-s-j</td>
<td class="org-left">列出文件中的所有变量和函数  helm-semantic-or-imenu</td>
</tr>

<tr>
<td class="org-left">SPC-s-s</td>
<td class="org-left">开启 helm-swoop 搜索</td>
</tr>
</tbody>
</table>
</div></li></ol></li>
<li><a id="orgheadline55"></a>replace<br><ol class="org-ol"><li><a id="orgheadline53"></a>emacs 方式<br><div class="outline-text-6" id="text-3-0-2-7-1">
<p>
C-r 或 C-s 进入搜索模式<br>
M-% 进入替换 SPC 表示替换当前光标处 !表示替换所有<br>
</p>
</div></li>
<li><a id="orgheadline54"></a>vim 方式<br><div class="outline-text-6" id="text-3-0-2-7-2">
<p>
:[addr]s/源字符串/目的字符串/[option]<br>
</p>
<ul class="org-ul">
<li>[addr] 表示检索范围，省略时表示当前行。<br></li>
</ul>
<pre class="example">
如：
“1,20” ：表示从第 1 行到 20 行；
“%” ：表示整个文件，同“1,$”；
“.,$” ：从当前行到文件尾；
</pre>
<ul class="org-ul">
<li>s : 表示替换操作<br></li>
<li>[option] : 表示操作类型<br></li>
</ul>
<pre class="example">
如：
g 表示全局替换; 
c 表示进行确认
p 表示替代结果逐行显示（Ctrl + L 恢复屏幕）；
省略 option 时仅对每行第一个匹配串进行替换；
如果在源字符串和目的字符串中出现特殊字符，需要用”\”转义
</pre>
<ul class="org-ul">
<li>Example<br></li>
</ul>
<pre class="example">
#将 That or this 换成 This or that
:%s/\(That\) or \(this\)/\u\2 or \l\1/
—- 
#将句尾的 child 换成 children
:%s/child\([ ,.;!:?]\)/children\1/g
—-
#将 mgi/r/abox 换成 mgi/r/asquare
:g/mg\([ira]\)box/s//mg//my\1square/g    &lt;=&gt;  :g/mg[ira]box/s/box/square/g
—-
#将多个空格换成一个空格
:%s/  */ /g
—-
#使用空格替换句号或者冒号后面的一个或者多个空格
:%s/\([:.]\)  */\1 /g
—-
#删除所有空行
:g/^$/d
—-
#删除所有的空白行和空行
:g/^[  ][  ]*$/d
—-
#在每行的开始插入两个空白
:%s/^/&gt;  /
—-
#在接下来的 6 行末尾加入.
:.,5/$/./
—-
#颠倒文件的行序
:g/.*/m0O  &lt;=&gt; :g/^/m0O
—-
#寻找不是数字的开始行,并将其移到文件尾部
:g!/^[0-9]/m$ &lt;=&gt; g/^[^0-9]/m$
—-
#将文件的第 12 到 17 行内容复制 10 词放到当前文件的尾部
:1,10g/^/12,17t$
~~~~重复次数的作用
—-
#将 chapter 开始行下面的第二行的内容写道 begin 文件中
:g/^chapter/.+2w&gt;&gt;begin
—-
:/^part2/,/^part3/g/^chapter/.+2w&gt;&gt;begin
—-
:/^part2/,/^part3/g/^chapter/.+2w&gt;&gt;begin|+t$
</pre>
</div></li></ol></li>
<li><a id="orgheadline57"></a>folder<br><ol class="org-ol"><li><a id="orgheadline56"></a>在 normal 模式下<br><div class="outline-text-6" id="text-3-0-2-8-1">
<pre class="example">
z a 					折叠或打开当前所在区域
z o                   打开当前区域
z c                   折叠当前区域
z r                   打开所有
z m                   折叠所有
</pre>
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline67" class="outline-4">
<h4 id="orgheadline67"><span class="section-number-4">3.0.3</span> file dir operation</h4>
<div class="outline-text-4" id="text-3-0-3">
</div><ol class="org-ol"><li><a id="orgheadline59"></a>文件编码<br><div class="outline-text-5" id="text-3-0-3-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">describe-current-code-system  &lt;RET&gt;</td>
<td class="org-left">查看当前文件编码</td>
</tr>

<tr>
<td class="org-left">revert-buffer-with-coding-system</td>
<td class="org-left">以指定编码重新加载文件</td>
</tr>

<tr>
<td class="org-left">set-buffer-file-coding-system</td>
<td class="org-left">改变当前文件的编码</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline62"></a>find/open file dir<br><ol class="org-ol"><li><a id="orgheadline60"></a>file<br><div class="outline-text-6" id="text-3-0-3-2-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">快捷键</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">SPC-f-f</td>
<td class="org-left">helm open file from cur dir</td>
</tr>

<tr>
<td class="org-left">SPC-f-F</td>
<td class="org-left">open file Under point</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">SPC-f-r</td>
<td class="org-left">helm open recent file</td>
</tr>

<tr>
<td class="org-left">SPC-p-r</td>
<td class="org-left">projectile open recent file</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">SPC-p-f</td>
<td class="org-left">projectile open file in project dir</td>
</tr>

<tr>
<td class="org-left">M-x find-name-dired</td>
<td class="org-left">在指定路径下 查找名称符合指定匹配规则的文件</td>
</tr>

<tr>
<td class="org-left">M-x find-grep-dired</td>
<td class="org-left">在指定路径下 查找名称符合指定匹配规则的文件</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline61"></a>dir<br><div class="outline-text-6" id="text-3-0-3-2-2">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">快捷键</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">SPC-a-d</td>
<td class="org-left">打开当前文件所在的目录</td>
</tr>

<tr>
<td class="org-left">SPC-p-D</td>
<td class="org-left">打开 project 的跟目录</td>
</tr>

<tr>
<td class="org-left">SPC-p-d</td>
<td class="org-left">打开当前文件所在的目录</td>
</tr>
</tbody>
</table>
</div></li></ol></li>
<li><a id="orgheadline63"></a>get file path<br><div class="outline-text-5" id="text-3-0-3-3">
<pre class="example">
SPC-f-y			show and copy cur file abs path
</pre>
</div></li>
<li><a id="orgheadline66"></a>find text in multi files<br><ol class="org-ol"><li><a id="orgheadline64"></a>tags<br><div class="outline-text-6" id="text-3-0-3-4-1">
<p>
<a id="orgtarget1"></a><br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Key Binding</th>
<th scope="col" class="org-left">cmd</th>
<th scope="col" class="org-left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left"><code>SPC m g c</code></td>
<td class="org-left">helm-gtags-create-tags</td>
<td class="org-left">create a tag database</td>
</tr>

<tr>
<td class="org-left"><code>SPC m g f</code></td>
<td class="org-left">helm-gtags-find-files</td>
<td class="org-left">jump to a file in tag database</td>
</tr>

<tr>
<td class="org-left"><code>SPC m g g</code></td>
<td class="org-left">&#xa0;</td>
<td class="org-left">jump to a location based on context</td>
</tr>

<tr>
<td class="org-left"><code>SPC m g G</code></td>
<td class="org-left">&#xa0;</td>
<td class="org-left">jump to a location based on context (open another window)</td>
</tr>

<tr>
<td class="org-left"><code>SPC m g d</code></td>
<td class="org-left">&#xa0;</td>
<td class="org-left">find definitions</td>
</tr>

<tr>
<td class="org-left"><code>SPC m g i</code></td>
<td class="org-left">&#xa0;</td>
<td class="org-left">present tags in current function only</td>
</tr>

<tr>
<td class="org-left"><code>SPC m g l</code></td>
<td class="org-left">&#xa0;</td>
<td class="org-left">jump to definitions in file</td>
</tr>

<tr>
<td class="org-left"><code>SPC m g n</code></td>
<td class="org-left">&#xa0;</td>
<td class="org-left">jump to next location in context stack</td>
</tr>

<tr>
<td class="org-left"><code>SPC m g p</code></td>
<td class="org-left">&#xa0;</td>
<td class="org-left">jump to previous location in context stack</td>
</tr>

<tr>
<td class="org-left"><code>SPC m g r</code></td>
<td class="org-left">&#xa0;</td>
<td class="org-left">find references</td>
</tr>

<tr>
<td class="org-left"><code>SPC m g R</code></td>
<td class="org-left">&#xa0;</td>
<td class="org-left">resume previous helm-gtags session</td>
</tr>

<tr>
<td class="org-left"><code>SPC m g s</code></td>
<td class="org-left">&#xa0;</td>
<td class="org-left">select any tag in a project retrieved by gtags</td>
</tr>

<tr>
<td class="org-left"><code>SPC m g S</code></td>
<td class="org-left">&#xa0;</td>
<td class="org-left">show stack of visited locations</td>
</tr>

<tr>
<td class="org-left"><code>SPC m g u</code></td>
<td class="org-left">helm-gtags-update-tags</td>
<td class="org-left">manually update tag database</td>
</tr>
</tbody>
</table>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">快捷键</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">helm-gtags-find-tags 查找 tags</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">helm-gtags-find-symbols 查找符号</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">helm-gtags-dwim</td>
</tr>

<tr>
<td class="org-left">SPC p g</td>
<td class="org-left">projectile-find-tag</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline65"></a>grep<br><div class="outline-text-6" id="text-3-0-3-4-2">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">快捷键</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">SPC f g  == rgrep</td>
<td class="org-left">在指定的路径及其子路径下 在符合指定匹配规则的文件中 搜索指定文字</td>
</tr>

<tr>
<td class="org-left">M-x lgrep</td>
<td class="org-left">在当前路径下 在符合指定匹配规则的文件中 搜索指定文字</td>
</tr>

<tr>
<td class="org-left">M-x grep-find</td>
<td class="org-left">使用 grep find 命令查找</td>
</tr>

<tr>
<td class="org-left">SPC s g b == helm-buffers-do-grep</td>
<td class="org-left">在当前 buffer 中搜索指定文字</td>
</tr>

<tr>
<td class="org-left">SPC s g f == helm-files-do-grep</td>
<td class="org-left">在指定的多个文件（Ctrl+SPC 选择多个文件）中搜索指定文字</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">SPC s g p == helm-projectile-grep</td>
<td class="org-left">在 project 下查找指定文本</td>
</tr>
</tbody>
</table>
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline68" class="outline-4">
<h4 id="orgheadline68"><span class="section-number-4">3.0.4</span> tags usage</h4>
<div class="outline-text-4" id="text-3-0-4">
<p>
<a href="#orgtarget1">3.0.3.4.1</a><br>
<a href="file://d:/.emacs.d/layers/+tags/gtags/README.html" target="_blank" rel="external">spacemacs gtags doc</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline86" class="outline-4">
<h4 id="orgheadline86"><span class="section-number-4">3.0.5</span> org-mode</h4>
<div class="outline-text-4" id="text-3-0-5">
</div><ol class="org-ol"><li><a id="orgheadline79"></a>org-mode doc<br><div class="outline-text-5" id="text-3-0-5-1">
<p>
<a href="https://github.com/syl20bnr/spacemacs/tree/master/layers/org" target="_blank" rel="external">org-mode doc</a><br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline69"></a>base usage<br><div class="outline-text-6" id="text-3-0-5-1-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">ctrl+q Tab</td>
<td class="org-left">输入 Tab</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">, RETURN</td>
<td class="org-left">插入表格行分割线</td>
<td class="org-left">outline-insert-heading</td>
</tr>

<tr>
<td class="org-left">, T</td>
<td class="org-left">只显示当前文件的 TODO Items</td>
<td class="org-left">org-show-todo-tree</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline70"></a>分割线表示<br><div class="outline-text-6" id="text-3-0-5-1-2">
<p>
五条短线或以上显示为分隔线。&#x2013;&#x2014;<br>
</p>
</div></li>
<li><a id="orgheadline71"></a>内部引用<br><div class="outline-text-6" id="text-3-0-5-1-3">
<p>
用&lt;&lt;&gt;&gt;包围指定字符串，指定被引用地方。<br>
用[[]]包围指定字符串，即可 引用指定内容。<br>
</p>
<div class="org-src-container">

<pre class="src src-org"><span style="text-decoration: underline;">&lt;&lt;&#34987;&#24341;&#29992;&#30340;&#22320;&#26041;&gt;&gt;</span>
<span style="color: #00ffff; text-decoration: underline;"><a href="&#38656;&#35201;&#24341;&#29992;&#30340;&#22320;&#26041;">&#38656;&#35201;&#24341;&#29992;&#30340;&#22320;&#26041;</a></span>
</pre>
</div>
</div></li>
<li><a id="orgheadline72"></a>脚注<br><div class="outline-text-6" id="text-3-0-5-1-4">
<ul class="org-ul">
<li>脚注定义<br></li>
</ul>
<pre class="example">
[fn:LABEL] CONTENTS
</pre>
<ul class="org-ul">
<li>脚注引用<br></li>
</ul>
<pre class="example">
[fn:LABEL]
[fn:LABEL:DEFINITION]
[fn::DEFINITION]
</pre>
<ul class="org-ul">
<li>实例：<br></li>
</ul>
<p>
第一个实例，脚注引用的地方<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup><br>
</p>
<p>
第二个实例，脚注引用的地方<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup><br>
第三个实例，脚注引用的地方<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup><br>
</p>

<p>
最好使用第三种方案，使用方便。第一种方案脚注后要空两行，否则导出为 html 后，脚注后面内容会被当做脚注内容。<br>
</p>
</div></li>
<li><a id="orgheadline73"></a>res display<br><div class="outline-text-6" id="text-3-0-5-1-5">
<pre class="example">
插入图片：[[./image-path.png][test image]]
显示插入的图片：M-x org-toggle-inline-images (C-c C-x C-v)
不显示插入的图片：M-x org-remove-inline-images
如果去掉标签，则能直接显示图片：
[[file:/home/maple/图片/test.jpg]]
　　直接显示的图片在 Emacs 里默认不显示，需按 C-c C-x C-v 才能显示，在输出成其他格式（html、pdf……）后也能看到。

Tips: 
1. jpg 和 png 格式的图片都能显示
2. 如果图片不能显示，则去掉描述看看能否显示. 如：[[./image-path.png]]
</pre>
</div></li>
<li><a id="orgheadline74"></a>文本标记<br><div class="outline-text-6" id="text-3-0-5-1-6">
<p>
文本标记的格式为 PRE MARKER CONTENTS MARKER POST<br>
PRE 可以为 空格，~(~, <code>{</code>, ~'~, ~"~ 或者一行的开始<br>
MARKER 标记如下表：<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left"><code>*</code></td>
<td class="org-left"><b>粗体</b></td>
</tr>

<tr>
<td class="org-left"><code>=</code></td>
<td class="org-left"><code>直接显示内容</code></td>
</tr>

<tr>
<td class="org-left"><code>/</code></td>
<td class="org-left"><i>斜体</i></td>
</tr>

<tr>
<td class="org-left"><code>+</code></td>
<td class="org-left"><del>strike-through</del></td>
</tr>

<tr>
<td class="org-left"><code>_</code></td>
<td class="org-left"><span class="underline">underline</span></td>
</tr>

<tr>
<td class="org-left">~</td>
<td class="org-left"><code>code</code></td>
</tr>
</tbody>
</table>
<p>
POST 可以为 空格，~-~, <code>.</code>, ~,~, <code>:</code>, <code>!</code>, <code>?</code>, ', <code>)</code>, <code>}</code>, " 或者一行的结尾<br>
</p>
</div></li>
<li><a id="orgheadline75"></a>latex<br><div class="outline-text-6" id="text-3-0-5-1-7">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">符号</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left"><code>^</code></td>
<td class="org-left">上标</td>
</tr>

<tr>
<td class="org-left"><code>_</code></td>
<td class="org-left">下标</td>
</tr>

<tr>
<td class="org-left"><code>[]</code></td>
<td class="org-left">脚注</td>
</tr>

<tr>
<td class="org-left"><code>\\</code></td>
<td class="org-left">换行</td>
</tr>

<tr>
<td class="org-left"><code>{}</code></td>
<td class="org-left">变量名</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
<ul class="org-ul">
<li>latex 内嵌在行内 <code>$ ..... $</code><br></li>
<li><p>
latex 空格<br>
</p>
<pre class="example">
\, 小空格
\; 中等空格
\  大空格(反斜杠后面加空格)
\quad  quad 空格
\qquad 两个 quad 空格
</pre></li>
<li><p>
latex 小于等于 大于等于 不等于<br>
</p>
<pre class="example">
a \leq b
a \geq c
a \neq b
</pre></li>
<li><p>
latex 无穷<br>
</p>
<pre class="example">
\infty  无穷大
-\infty 负无穷大
+\infty 正无穷大
</pre></li>
<li><p>
latex 独立一行<br>
</p>
<pre class="example">
\begin{equation}  
......
      \end{equation}
</pre>
\begin{equation}  
\sum\limits_{i=1}^n(单项评分_i * 权重)  
\end{equation}</li>
<li><p>
latex 多行对齐<br>
&amp; 用来指定对齐的地方<br>
\\ 用来指定换行<br>
</p>
<pre class="example">
\begin{align}  
&amp;a = 100 + 10 \\
&amp;b = x + 1
      \end{align}
</pre>
\begin{align}
&a = b + 1 \\
&b = xx + 2
\end{align}</li>
<li><p>
latex 分数<br>
</p>
<pre class="example">
\frac{a}{b}
</pre>
<p>
\frac{a}{b}<br>
</p></li>
<li><p>
latex 取上界<br>
</p>
<pre class="example">
\biggl\lceil 2 \biggr\rceil
</pre></li>
<li><p>
latex 取下界<br>
</p>
<pre class="example">
\biggl\lfloor 2 \biggr\rfloor
</pre></li>
<li><p>
latex 去掉公式编号<br>
</p>
<pre class="example">
在需要去掉编号的行添加 \nonumber
\begin{align}  
&amp;h(k) = \biggl\lfloor m(kA\: \: mod \:\:  1) \biggr\rfloor \nonumber\\ 
&amp;0&lt;A&lt;1 \nonumber
\end{align}  

或者使用 displaymath
\begin{displaymath}
......
\end{displaymath}
</pre></li>
<li><p>
latex 属于 不属于<br>
</p>
<pre class="example">
\in
\notin
</pre></li>
<li>latex 希腊字母，可以通过转义来实现<br>
Angles are written as Greek letters &alpha;, &beta; and &gamma;.<br></li>
</ul>
<p>
参考资料：<a href="http://blog.csdn.net/csfreebird/article/details/43636615" target="_blank" rel="external">http://blog.csdn.net/csfreebird/article/details/43636615</a><br>
</p>
</div></li>
<li><a id="orgheadline76"></a>内嵌代码<br><div class="outline-text-6" id="text-3-0-5-1-8">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">语言</th>
<th scope="col" class="org-left">org-mode 标识</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">xml</td>
<td class="org-left">nxml</td>
</tr>

<tr>
<td class="org-left">c#</td>
<td class="org-left">csharp</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline77"></a>内嵌代码格式化<br><div class="outline-text-6" id="text-3-0-5-1-9">
<ol class="org-ol">
<li>`C-c '` to call `org-edit-special`<br></li>
<li>`C-x h` to mark all the source code<br></li>
<li>`TAB` to format it<br></li>
</ol>
<p>
参考链接：<a href="http://emacs.stackexchange.com/questions/5850/how-to-auto-format-the-source-code-block-in-org-mode" target="_blank" rel="external">http://emacs.stackexchange.com/questions/5850/how-to-auto-format-the-source-code-block-in-org-mode</a><br>
</p>
</div></li>
<li><a id="orgheadline78"></a>#+OPTIONS 设置<br><div class="outline-text-6" id="text-3-0-5-1-10">
<pre class="example">
#+OPTIONS: html-postamble:nil   移除文档结尾处的导出信息
#+OPTIONS: toc:nil              移除文档开始处的文章结构(table of content)
</pre>
</div></li></ol></li>
<li><a id="orgheadline85"></a>usage<br><ol class="org-ol"><li><a id="orgheadline80"></a>node move<br><div class="outline-text-6" id="text-3-0-5-2-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">命令</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">, S j</td>
<td class="org-left">move node down</td>
</tr>

<tr>
<td class="org-left">, S k</td>
<td class="org-left">move node up</td>
</tr>

<tr>
<td class="org-left">M-h</td>
<td class="org-left">move level up</td>
</tr>

<tr>
<td class="org-left">M-l</td>
<td class="org-left">move level down</td>
</tr>
</tbody>
</table>
</div></li>
<li><a id="orgheadline81"></a>Priorities<br><div class="outline-text-6" id="text-3-0-5-2-2">
<pre class="example">
org-mode 支持 ABC 三个优先级，默认创建的 task 优先级为 B
S-&lt;up&gt; 	org-priority-up
S-&lt;down&gt;	org-priority-down
</pre>
</div></li>
<li><a id="orgheadline82"></a>matching tags and properties<br><div class="outline-text-6" id="text-3-0-5-2-3">
<p>
<a href="http://orgmode.org/manual/Matching-tags-and-properties.html#Matching-tags-and-properties" target="_blank" rel="external">http://orgmode.org/manual/Matching-tags-and-properties.html#Matching-tags-and-properties</a><br>
<a href="http://orgmode.org/manual/Tag-hierarchy.html#Tag-hierarchy" target="_blank" rel="external">http://orgmode.org/manual/Tag-hierarchy.html#Tag-hierarchy</a><br>
</p>
<pre class="example">
+work-boss   							选择 tag 为 work 但不为 boss 的项目
work+TODO="WAITING"				选择 tag 为 work 并且 TODO 状态为 WAITING 的项目
work/WAITING 							等价于 work+TODO="WAITING"
</pre>
</div></li>
<li><a id="orgheadline83"></a>checkbox<br><div class="outline-text-6" id="text-3-0-5-2-4">
<pre class="example">
在 headline 上添加[/] [%]可以将项目标记为 checkbox
在 headline 上执行 C-c # 可以更新项目的进度
</pre>
</div></li>
<li><a id="orgheadline84"></a>time date<br><div class="outline-text-6" id="text-3-0-5-2-5">
<pre class="example">
, .     org-time-stamp 
, I			org-clock-in
, O			org-clock-out
, q			org-clock-cancel
</pre>
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline88" class="outline-4">
<h4 id="orgheadline88"><span class="section-number-4">3.0.6</span> version control</h4>
<div class="outline-text-4" id="text-3-0-6">
</div><ol class="org-ol"><li><a id="orgheadline87"></a>git doc<br><div class="outline-text-5" id="text-3-0-6-1">
<p>
SPC g s  open magit status window<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">命令</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">SPC g s</td>
<td class="org-left">打开 magit status window</td>
</tr>

<tr>
<td class="org-left">s</td>
<td class="org-left">magit status window 下 stage 某个文件</td>
</tr>

<tr>
<td class="org-left">S</td>
<td class="org-left">magit status window 下 stage 所有文件</td>
</tr>

<tr>
<td class="org-left">c c</td>
<td class="org-left">magit status window 下 打开 commit msg buffer</td>
</tr>

<tr>
<td class="org-left">, c</td>
<td class="org-left">commit msg buffer 下，commit 内容</td>
</tr>

<tr>
<td class="org-left">P</td>
<td class="org-left">magit status window 下 push</td>
</tr>
</tbody>
</table>

<p>
<a href="https://github.com/syl20bnr/spacemacs/tree/master/layers/+source-control/git" target="_blank" rel="external">https://github.com/syl20bnr/spacemacs/tree/master/layers/+source-control/git</a><br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline89" class="outline-4">
<h4 id="orgheadline89"><span class="section-number-4">3.0.7</span> prodigy</h4>
<div class="outline-text-4" id="text-3-0-7">
<pre class="example">
SPC a S Open the prodigy buffer
q       exit from prodigy buffer
L       start server
S       stop server
r       restart server
H       Display current process
</pre>
<p>
更详细文档<br>
<a href="https://github.com/syl20bnr/spacemacs/tree/master/layers/prodigy" target="_blank" rel="external">https://github.com/syl20bnr/spacemacs/tree/master/layers/prodigy</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline90" class="outline-4">
<h4 id="orgheadline90"><span class="section-number-4">3.0.8</span> TIPS</h4>
<div class="outline-text-4" id="text-3-0-8">
<pre class="example">
1 使用 python layer 需要安装 pip
</pre>
</div>
</div>
<div id="outline-container-orgheadline91" class="outline-4">
<h4 id="orgheadline91"><span class="section-number-4">3.0.9</span> file compare</h4>
<div class="outline-text-4" id="text-3-0-9">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">M-x ediff-buffers  &lt;RET&gt;</td>
<td class="org-left">对比 buffers</td>
</tr>
</tbody>
</table>
<p>
进入比较模式以后，输入“？”会显示命令的帮助信息<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline93" class="outline-2">
<h2 id="orgheadline93"><span class="section-number-2">4</span> 参考资料</h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="http://andyss.blog.51cto.com/315552/131652" target="_blank" rel="external">http://andyss.blog.51cto.com/315552/131652</a><br>
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
这里是实例 1 脚注的内容。<br>
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara">这里是实例 2 脚注的内容。</div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara">这里是实例 3 脚注的内容。</div></div>


</div>
</div>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> emacs </tag>
            
            <tag> spacemacs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Programing in Elisp]]></title>
      <url>http://wolfand11.coding.me/2016/08/13/language/Elisp/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline12" class="outline-2">
<h2 id="orgheadline12"><span class="section-number-2">1</span> 语法知识</h2>
<div class="outline-text-2" id="text-1">
<a id="more"></a>
</div>
<div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> List</h3>
<div class="outline-text-3" id="text-1-1">
<pre class="example">
List      由括号括起来的原子，或括号括起来的 list，或括号括起来的原子和 list,或者一个空括号。元素之间通过空格分隔。
原子       可以是数字、单字符符号、多字符符号、字符串
符号表达式  原子和列表的书面或计算机表示被称作符号表达式。

Example:
'(name age class grade)
(+ 1 2)
'(name "wolfand11")

Tips:
(1) 空列表既是一个列表，也是一个原子; nil 等价于()
(2) 元素直接的空格可以任意多，解析器在处理的时候会去掉所有多余的空格只留下一个。
(3) 所谓 s 表达式(s-expression)就是符号表达式(symbolic expression)
</pre>
</div>
</div>
<div id="outline-container-orgheadline9" class="outline-3">
<h3 id="orgheadline9"><span class="section-number-3">1.2</span> Base Special List</h3>
<div class="outline-text-3" id="text-1-2">
</div><div id="outline-container-orgheadline2" class="outline-4">
<h4 id="orgheadline2"><span class="section-number-4">1.2.1</span> defun</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
定义函数 (defun func-name argument-list body)<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-4">
<h4 id="orgheadline3"><span class="section-number-4">1.2.2</span> let</h4>
<div class="outline-text-4" id="text-1-2-2">
<p>
定义局部变量，该变量只在 let 列表内可用。 (let ((local-var value) &#x2026;) body)<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-4">
<h4 id="orgheadline4"><span class="section-number-4">1.2.3</span> set setq setf</h4>
<div class="outline-text-4" id="text-1-2-3">
<p>
定义全局变量。(set 'var value) (setq var value) (setf var value)<br>
</p>
<div class="org-src-container">

<pre class="src src-elisp">(set ls '(1 2 3 4))  =&gt; Error - ls has no value
(set 'ls '(1 2 3 4)) =&gt; OK
(<span style="color: #00ffff;">setq</span> ls '(1 2 3 4)) =&gt; OK - make ls to (<span style="color: #00ffff;">quote</span> ls) and then have the usual set
(<span style="color: #00ffff;">setf</span> ls '(1 2 3 4)) =&gt; OK - same as setq so far BUT
(<span style="color: #00ffff;">setf</span> (car ls) 10)   =&gt; Makes ls '(10 2 3 4) - not duplicated by setq/set
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline5" class="outline-4">
<h4 id="orgheadline5"><span class="section-number-4">1.2.4</span> if</h4>
<div class="outline-text-4" id="text-1-2-4">
<p>
分支语句。 (if do-someing do-other-thing)<br>
</p>
<pre class="example">
Tips:
elisp 中除去()和 nil 外都为 true
(if () "() is true" "() is false")
;; () is false
(if 0 "0 is true" "0 is false")
;; 0 is true
(if 'false "'false is true" "'false is false") == (if (quote false) "'false is true" "'false is false")
;; 'false is true
</pre>
</div>
</div>
<div id="outline-container-orgheadline6" class="outline-4">
<h4 id="orgheadline6"><span class="section-number-4">1.2.5</span> interactive</h4>
<div class="outline-text-4" id="text-1-2-5">
<p>
使函数变为交互函数。 (interactive arg)<br>
</p>
<pre class="example">
Example:
(defun AddTwo (var1)
  "add two with argument"
  (interactive "p")
  (let ((two_value 2) result (info "result is %d"))
    (setq result (+ var1 two_value))
    (message info (+ var1 two_value))))
</pre>
</div>
</div>
<div id="outline-container-orgheadline7" class="outline-4">
<h4 id="orgheadline7"><span class="section-number-4">1.2.6</span> save-excursion</h4>
<div class="outline-text-4" id="text-1-2-6">
<p>
保存恢复 point 和 mark 变量<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline8" class="outline-4">
<h4 id="orgheadline8"><span class="section-number-4">1.2.7</span> eval-last-sexp</h4>
<div class="outline-text-4" id="text-1-2-7">
<p>
对前面的表达式求值<br>
</p>
</div>
</div>
</div>

<div id="outline-container-orgheadline10" class="outline-3">
<h3 id="orgheadline10"><span class="section-number-3">1.3</span> Buffer-related List</h3>
</div>
<div id="outline-container-orgheadline11" class="outline-3">
<h3 id="orgheadline11"><span class="section-number-3">1.4</span> Evaluation 表达式求值</h3>
<div class="outline-text-3" id="text-1-4">
<pre class="example">
Number 求值
直接返回数值

符号求值
(1) 变量求值 返回变量符号指向的值
(2) 函数求值 执行函数符号指向的指令，返回最后一个指令的返回值

Lisp 中的任何一个 List 都是一个可以运行的程序。运行一个列表，被称作对这个列表求值。
运行一个列表会有三类情况：
(1)只返回列表本身
(2)提示错误信息
(3)将列表第一个符号当作命令，然后执行这个命令

Tips:
单引号(')，表示一个引用。单引号出现在一个列表前，告诉 Lisp 不要对这个列表 做任何操作，仅仅保持其原样。如果一个列表前没有引号，这个列表的第一个符 号就是计算机将要执行的一条命令(Lisp 中，这些命令称为函数)。
'(setq count 20)  ;;C-x C-e 得到 list (setq count 20)
(setq count 20)   ;;C-x C-e 得到 20
'('name)          ;;C-x C-3 得到((quote name))
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline13" class="outline-2">
<h2 id="orgheadline13"><span class="section-number-2">2</span> Emacs 相关命令</h2>
<div class="outline-text-2" id="text-2">
<pre class="example">
1、lisp 代码缩排：
M-C-\ 一个区域内正确缩排命令
TAB   光标所在行缩排

2、运行一个列表
C-x C-e

3、查看 variable function 信息
C-h v
</pre>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> language </category>
            
        </categories>
        
        
        <tags>
            
            <tag> language </tag>
            
            <tag> elisp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell]]></title>
      <url>http://wolfand11.coding.me/2016/08/13/language/Shell/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline7" class="outline-2">
<h2 id="orgheadline7"><span class="section-number-2">1</span> CMD</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-orgheadline6" class="outline-3">
<h3 id="orgheadline6"><span class="section-number-3">1.1</span> 常用功能</h3>
<div class="outline-text-3" id="text-1-1">
</div><div id="outline-container-orgheadline1" class="outline-4">
<h4 id="orgheadline1"><span class="section-number-4">1.1.1</span> print</h4>
<div class="outline-text-4" id="text-1-1-1">
<div class="org-src-container">

<pre class="src src-cmd">echo "hello world"
:: 打印目录下的所有 proto 文件
for %%i in (*.proto) do (    
echo %%i  )
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-4">
<h4 id="orgheadline2"><span class="section-number-4">1.1.2</span> 显示环境变量</h4>
<div class="outline-text-4" id="text-1-1-2">
<div class="org-src-container">

<pre class="src src-cmd">echo %PATH%
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-4">
<h4 id="orgheadline3"><span class="section-number-4">1.1.3</span> bat 窗口暂停</h4>
<div class="outline-text-4" id="text-1-1-3">
<div class="org-src-container">

<pre class="src src-cmd">pause
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-4">
<h4 id="orgheadline4"><span class="section-number-4">1.1.4</span> ftp 上传文件</h4>
<div class="outline-text-4" id="text-1-1-4">
<div class="org-src-container">

<pre class="src src-cmd">@Echo Off
Echo open 10.10.10.245 &gt;ftp.up
Echo ftp&gt;&gt;ftp.up
Echo ftp&gt;&gt;ftp.up
Echo cd .\ &gt;&gt;ftp.up
Echo binary&gt;&gt;ftp.up

:: 上传文件
Echo put "./ftp_tool.bat"&gt;&gt;ftp.up

:: 上传文件夹

:: 创建文件夹
Echo mkdir test_dir&gt;&gt;ftp.up

:: 断开链接
Echo bye&gt;&gt;ftp.up
FTP -s:ftp.up
del ftp.up /q
pause
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline5" class="outline-4">
<h4 id="orgheadline5"><span class="section-number-4">1.1.5</span> 定义变量</h4>
<div class="outline-text-4" id="text-1-1-5">
<div class="org-src-container">

<pre class="src src-cmd">set buildPlatform=IOS
echo %buildPlatform%
</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-orgheadline13" class="outline-2">
<h2 id="orgheadline13"><span class="section-number-2">2</span> Shell</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-orgheadline12" class="outline-3">
<h3 id="orgheadline12"><span class="section-number-3">2.1</span> 常用功能</h3>
<div class="outline-text-3" id="text-2-1">
</div><div id="outline-container-orgheadline8" class="outline-4">
<h4 id="orgheadline8"><span class="section-number-4">2.1.1</span> 显示环境变量</h4>
<div class="outline-text-4" id="text-2-1-1">
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #b0c4de;">echo</span> ${<span style="color: #eedd82;">PATH</span>}
<span style="color: #b0c4de;">echo</span> $<span style="color: #eedd82;">PATH</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline9" class="outline-4">
<h4 id="orgheadline9"><span class="section-number-4">2.1.2</span> chmod</h4>
<div class="outline-text-4" id="text-2-1-2">
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20462;&#25913;&#30446;&#24405;&#19979;&#25152;&#26377;&#25991;&#20214;&#30340;&#35775;&#38382;&#26435;&#38480; a &#34920;&#31034; all</span>
sudo chmod -R a+rw ./my_dir
</pre>
</div>

<a id="more"></a>
</div>
</div>
<div id="outline-container-orgheadline10" class="outline-4">
<h4 id="orgheadline10"><span class="section-number-4">2.1.3</span> 获取命令返回值 获取命令输出内容</h4>
<div class="outline-text-4" id="text-2-1-3">
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#33719;&#21462;&#21629;&#20196; echo &#36820;&#22238;&#32467;&#26524;:</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"HelloWorld"</span>
<span style="color: #00ffff;">if</span> [ <span style="color: #ffa07a;">"$?"</span> == 0 ]
<span style="color: #00ffff;">then</span>
     <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"return value is 0"</span>
<span style="color: #00ffff;">else</span>
     <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"return value is not 0! return="</span>$<span style="color: #eedd82;">?</span>
<span style="color: #00ffff;">fi</span>

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#33719;&#21462;&#21629;&#20196; echo &#36755;&#20986;&#20869;&#23481;</span>
<span style="color: #eedd82;">outValue</span>=<span style="color: #fa8072;">`echo "HelloWorld"`</span>
<span style="color: #00ffff;">if</span> [ <span style="color: #ffa07a;">"$outValue"</span> == <span style="color: #ffa07a;">"HelloWorld"</span> ]
<span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"outValue is -&gt;"</span>$<span style="color: #eedd82;">outValue</span>
<span style="color: #00ffff;">else</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"outValue value is not HelloWorld! outValue="</span>$<span style="color: #eedd82;">outValue</span>
<span style="color: #00ffff;">fi</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline11" class="outline-4">
<h4 id="orgheadline11"><span class="section-number-4">2.1.4</span> 刷新 dns</h4>
<div class="outline-text-4" id="text-2-1-4">
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">windows</span>
ipconfig /flushdns
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">linux</span>
/etc/rc.d/init.d/nscd restart
service network restart
</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-orgheadline15" class="outline-2">
<h2 id="orgheadline15"><span class="section-number-2">3</span> 注意事项</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-orgheadline14" class="outline-4">
<h4 id="orgheadline14"><span class="section-number-4">3.0.1</span> 尽量使用 python 来代替 cmd 和 shell 脚本</h4>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> language </category>
            
        </categories>
        
        
        <tags>
            
            <tag> language </tag>
            
            <tag> shell </tag>
            
            <tag> cmd </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Init My PC]]></title>
      <url>http://wolfand11.coding.me/2016/08/13/tools/InitPC/</url>
      <content type="html"><![CDATA[

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2"><span class="section-number-2">1</span> InitMyPC</h2>
<div class="outline-text-2" id="text-1">
<a id="more"></a>
</div>

<div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> 目录结构</h3>
<div class="outline-text-3" id="text-1-1">
<pre class="example">
0 级目录
--0--guodong

1 级目录
--1--.emacs.d
--1--.oh-my-zsh (window 系统无该目录)
--1--Applications
--1--Desktop
--1--Documents
--1--Downloads
--1--Movie
--1--Music
--1--Pictures        

2 级目录
Documents
--2--MyCloud
--2--MyResource
--2--MyProject
--2--MyCore
--2--MyToolkit (this is a microsoft CodePlex svn project)
--2--MyGTD (this is a bitbucket git project)

3 级目录
Documents--MyCloud
--3--360Cloud
--3--百度云同步盘
--3--快盘
--3--SkyDrive
Documents--MyProject
--3--Public
--3--Private
--3--SDK
Documents--MyCore
--3--Config
--3--Resource
--3--Document

4 级目录
Documents--MyProject--Public
--4--wolfand11 [github-blog]
--4--cocos2d (cocos2d-x_develop CocosBuilder_develop)
--4--OpenSourceGame
Documents--MyCloud--360Cloud
--4--MyTestProject
--4--MyResource
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline31" class="outline-2">
<h2 id="orgheadline31"><span class="section-number-2">2</span> Cross Platform tools</h2>
<div class="outline-text-2" id="text-2">
<p>
当前主流的操作系统:windows、linux、osx，对于多平台用户来说在不同的平台使用不同的工具太麻烦了，通常更青睐跨平台的工具。下面是我使用的一些跨平台的工具,有些工具在平常很少用到，作为备份资料也记录下来方便使用的时候查看。<br>
</p>
</div>
<div id="outline-container-orgheadline8" class="outline-3">
<h3 id="orgheadline8"><span class="section-number-3">2.1</span> 程序开发相关</h3>
<div class="outline-text-3" id="text-2-1">
</div><div id="outline-container-orgheadline3" class="outline-4">
<h4 id="orgheadline3"><span class="section-number-4">2.1.1</span> 编辑器</h4>
<div class="outline-text-4" id="text-2-1-1">
<p>
Emacs 绝对是跨平台编辑器中的王者。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-4">
<h4 id="orgheadline4"><span class="section-number-4">2.1.2</span> C++跨平台开发框架</h4>
<div class="outline-text-4" id="text-2-1-2">
<p>
Qt 是我所熟悉的 C++跨平台框架。SDK 使用很方便，文档易懂。<br>
Qt 在 Windows 系统上进行编译，需要在安装 VisualStudio 时选中安装 Visual C++；<br>
Qt 在 Windows 系统上进行调试，需要按照 Debugging Tools for Windows/CDB 插件，该插件需要从 Windows 官网下载。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-4">
<h4 id="orgheadline5"><span class="section-number-4">2.1.3</span> 流程图、UML 图工具</h4>
<div class="outline-text-4" id="text-2-1-3">
<p>
Dia 是一款比较全面的作图工具。<br>
Graphviz 用来做数据结构图，流程图，状态图等比较方便。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline6" class="outline-4">
<h4 id="orgheadline6"><span class="section-number-4">2.1.4</span> 思维导图工具</h4>
<div class="outline-text-4" id="text-2-1-4">
<p>
XMind 是用 Java 实现的跨平台思维导图工具，还有一款开源的 freemind 工具也是跨平台的。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline7" class="outline-4">
<h4 id="orgheadline7"><span class="section-number-4">2.1.5</span> Web 服务器搭建</h4>
<div class="outline-text-4" id="text-2-1-5">
<p>
xampp 可用来搭建 web 服务器。<br>
</p>
<ul class="org-ul">
<li><p>
修改默认的 Web 容器路径的方法<br>
打开 xampp\apache\conf\httpd.conf 文件，进行如下修改<br>
</p>
<pre class="example">
#DocumentRoot "C:/xampp/htdocs"
#&lt;Directory "C:/xampp/htdocs"&gt;
DocumentRoot "D:\Documents\MyWeb"
&lt;Directory "D:/Documents/MyWeb"&gt;
</pre></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgheadline23" class="outline-3">
<h3 id="orgheadline23"><span class="section-number-3">2.2</span> 常用工具</h3>
<div class="outline-text-3" id="text-2-2">
</div><div id="outline-container-orgheadline11" class="outline-4">
<h4 id="orgheadline11"><span class="section-number-4">2.2.1</span> 音乐播放器</h4>
<div class="outline-text-4" id="text-2-2-1">
</div><ol class="org-ol"><li><a id="orgheadline9"></a>clementine<br><div class="outline-text-5" id="text-2-2-1-1">
<p>
作为程序员怎么能少 Music 呢?clementine 是使用 Qt 开发的一款跨平台音乐播放器，该软件一直有更新，界面风格越来越漂亮了，对于我来讲很方便了。<br>
</p>
</div></li>
<li><a id="orgheadline10"></a>xiami<br><div class="outline-text-5" id="text-2-2-1-2">
<p>
虾米的精选集还是很给力的。<br>
</p>
</div></li></ol>
</div>

<div id="outline-container-orgheadline14" class="outline-4">
<h4 id="orgheadline14"><span class="section-number-4">2.2.2</span> 电子书管理软件</h4>
<div class="outline-text-4" id="text-2-2-2">
</div><ol class="org-ol"><li><a id="orgheadline12"></a>calibre<br><div class="outline-text-5" id="text-2-2-2-1">
<p>
calibre 是一款开源的跨平台电子书管理软件，支持 epud 格式的电子书。该工具转换格式很慢，目前已经不用该工具了。<br>
</p>
</div></li>
<li><a id="orgheadline13"></a>Send To Kindle<br><div class="outline-text-5" id="text-2-2-2-2">
<p>
这款工具的是由亚马逊提供的，发送文档到 kindle。支持文件格式的转换。而且是跨平台的。<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline22" class="outline-4">
<h4 id="orgheadline22"><span class="section-number-4">2.2.3</span> 文档格式转换软件</h4>
<div class="outline-text-4" id="text-2-2-3">
</div><ol class="org-ol"><li><a id="orgheadline21"></a>Pandoc<br><div class="outline-text-5" id="text-2-2-3-1">
<p>
<a href="http://pandoc.org/" target="_blank" rel="external">http://pandoc.org/</a><br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline15"></a>使用方法<br><div class="outline-text-6" id="text-2-2-3-1-1">
<div class="org-src-container">

<pre class="src src-shell">pandoc tmp.org -o tmp.md
</pre>
</div>
</div></li>
<li><a id="orgheadline16"></a>pandoc.exe: Cannot decode byte '\xcd': Data.Text.Internal.Encoding.Fusion.streamUtf8: Invalid UTF-8 stream<br><div class="outline-text-6" id="text-2-2-3-1-2">
<p>
将文件转化为 utf-8 格式后再进行处理。<br>
</p>
</div></li>
<li><a id="orgheadline20"></a>pandoc.exe 导出中文 md 为 pdf<br><ol class="org-ol"><li><a id="orgheadline17"></a>! Package inputenc Error: Unicode char 目 (U+76EE)<br><div class="outline-text-7" id="text-2-2-3-1-3-1">
<div class="org-src-container">

<pre class="src src-shell">pandoc &#25340;&#30028;&#38754;&#25991;&#26723;.md -o &#25340;&#30028;&#38754;&#25991;&#26723;.pdf --latex-engine=xelatex
</pre>
</div>
</div></li>
<li><a id="orgheadline18"></a>导出文件中中文不显示<br><div class="outline-text-7" id="text-2-2-3-1-3-2">
<div class="org-src-container">

<pre class="src src-shell">pandoc &#25340;&#30028;&#38754;&#25991;&#26723;.md -o &#25340;&#30028;&#38754;&#25991;&#26723;.pdf --latex-engine=xelatex --variable <span style="color: #eedd82;">mainfont</span>=<span style="color: #ffa07a;">"&#24494;&#36719;&#38597;&#40657;"</span>
</pre>
</div>
</div></li>
<li><a id="orgheadline19"></a>导出文件中部分中文不显示<br><div class="outline-text-7" id="text-2-2-3-1-3-3">
<div class="org-src-container">

<pre class="src src-shell">pandoc &#25340;&#30028;&#38754;&#25991;&#26723;.md -o &#25340;&#30028;&#38754;&#25991;&#26723;.pdf --latex-engine=xelatex --variable <span style="color: #eedd82;">mainfont</span>=<span style="color: #ffa07a;">"&#24494;&#36719;&#38597;&#40657;"</span> --variable <span style="color: #eedd82;">sansfont</span>=<span style="color: #ffa07a;">"&#24494;&#36719;&#38597;&#40657;"</span> --variable <span style="color: #eedd82;">monofont</span>=<span style="color: #ffa07a;">"&#24494;&#36719;&#38597;&#40657;"</span>
</pre>
</div>
</div></li></ol></li></ol></li></ol>
</div>
</div>

<div id="outline-container-orgheadline25" class="outline-3">
<h3 id="orgheadline25"><span class="section-number-3">2.3</span> 系统安装</h3>
<div class="outline-text-3" id="text-2-3">
</div><div id="outline-container-orgheadline24" class="outline-4">
<h4 id="orgheadline24"><span class="section-number-4">2.3.1</span> U 盘启动盘制作工具</h4>
<div class="outline-text-4" id="text-2-3-1">
<p>
UNetbootin 是一款跨平台的 U 盘制作工具。这种类型(安装系统)的工具一定要选跨平台啊!<br>
</p>
</div>
</div>
</div>

<div id="outline-container-orgheadline30" class="outline-3">
<h3 id="orgheadline30"><span class="section-number-3">2.4</span> 系统工具</h3>
<div class="outline-text-3" id="text-2-4">
</div><div id="outline-container-orgheadline28" class="outline-4">
<h4 id="orgheadline28"><span class="section-number-4">2.4.1</span> 鼠标键盘控制</h4>
<div class="outline-text-4" id="text-2-4-1">
<p>
synergy 使用一个鼠标键盘控制多台电脑。<br>
synergy 配置方法<br>
<img src="synergy_config.jpg"><br>
<a href="https://superuser.com/questions/575096/synergy-1-4-10-unrecognised-client-name-apnanll3m4335-check-server-config" target="_blank" rel="external">https://superuser.com/questions/575096/synergy-1-4-10-unrecognised-client-name-apnanll3m4335-check-server-config</a><br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline27"></a>错误修改<br><ol class="org-ol"><li><a id="orgheadline26"></a>Lock Cursor to Screen:off<br><div class="outline-text-6" id="text-2-4-1-1-1">
<p>
因为不小心按了键盘上的 Scroll Lock 按键导致，再按一次就可以了<br>
</p>
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline29" class="outline-4">
<h4 id="orgheadline29"><span class="section-number-4">2.4.2</span> 护眼软件</h4>
<div class="outline-text-4" id="text-2-4-2">
<p>
<a href="http://www.huyanapp.com/portal.php" target="_blank" rel="external">http://www.huyanapp.com/portal.php</a><br>
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-orgheadline47" class="outline-2">
<h2 id="orgheadline47"><span class="section-number-2">3</span> Init Mac</h2>
<div class="outline-text-2" id="text-3">
<p>
OSX 系统还是比较傻瓜的，基本上和 windows 差不多，尤其是 appstore 推出以后，基本上不需要<br>
对系统进行什么配置。下面记录下来我所使用的一些软件等等<br>
</p>
</div>
<div id="outline-container-orgheadline43" class="outline-3">
<h3 id="orgheadline43"><span class="section-number-3">3.1</span> 工具</h3>
<div class="outline-text-3" id="text-3-1">
</div><div id="outline-container-orgheadline33" class="outline-4">
<h4 id="orgheadline33"><span class="section-number-4">3.1.1</span> NTFS 磁盘工具</h4>
<div class="outline-text-4" id="text-3-1-1">
<p>
默认情况下，在 mac 系统中，不能直接对 ntfs 文件系统进行写操作，[[link]OSXFuse]是一款开<br>
源的免费工具，用来打破这种限制。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline32"></a>diskutil 工具使用<br><div class="outline-text-5" id="text-3-1-1-1">
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#21015;&#20986;&#31995;&#32479;&#30340;&#30913;&#30424;&#20449;&#24687;</span>
$ diskutil list
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#21015;&#20986;&#25903;&#25345;&#30340;&#25991;&#20214;&#31995;&#32479;&#26684;&#24335;</span>
$ diskutil listFilesystems
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#26684;&#24335;&#21270;&#25351;&#23450;&#30913;&#30424;</span>
$ diskutil eraseDisk <span style="color: #ffa07a;">"Tuxera NTFS"</span> GuoDong /dev/disk2
</pre>
</div>
</div></li></ol>
</div>
<div id="outline-container-orgheadline34" class="outline-4">
<h4 id="orgheadline34"><span class="section-number-4">3.1.2</span> EverNote</h4>
<div class="outline-text-4" id="text-3-1-2">
<p>
最近一直在使用 EverNote，这是一款多平台(硬件平台、操作系统平台)的笔记软件，所以使用比<br>
较方便。我主要用 EverNote 来做下面这些事情:<br>
</p>
<ul class="org-ul">
<li>记录自己偶然想到的问题<br></li>
<li>记录自己最近想思考的问题，随后会在空闲的时间把零碎的思考写下来，为要思考的问题列出<br></li>
</ul>
<p>
一个提纲来。等自己的思考成熟以后再将该问题写成博客，系统地记录下来。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline35" class="outline-4">
<h4 id="orgheadline35"><span class="section-number-4">3.1.3</span> GitHub</h4>
<div class="outline-text-4" id="text-3-1-3">
<p>
使用 GitHub 来方便的在多台设备上访问自己的文档。我的计划是将自己常用的文档放在 GitHub<br>
上面，比如:工具使用文档，操作系统配置文档。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline36" class="outline-4">
<h4 id="orgheadline36"><span class="section-number-4">3.1.4</span> SourceTree</h4>
<div class="outline-text-4" id="text-3-1-4">
<p>
版本管理的客户端，支持 svn、git、mercurial。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline37" class="outline-4">
<h4 id="orgheadline37"><span class="section-number-4">3.1.5</span> MacPorts</h4>
<div class="outline-text-4" id="text-3-1-5">
<p>
之前用 ubuntu 一直用 apt-get 觉得很方便，到了 mac 下以后很多软件包的安装、管理很麻烦。MacPorts<br>
就是我要找的 mac 下的 apt-get<br>
</p>
<pre class="example">
注意:
安装完毕以后，如果发现 port 命令不存在，请修改 PATH 环境变量如下:
export PATH=$PATH:/opt/local/bin:/opt/local/sbin
</pre>
</div>
</div>
<div id="outline-container-orgheadline38" class="outline-4">
<h4 id="orgheadline38"><span class="section-number-4">3.1.6</span> brew</h4>
<div class="outline-text-4" id="text-3-1-6">
<p>
brew 和 MacPorts 功能一样。<br>
brew 项目地址：<a href="https://github.com/Homebrew/brew/" target="_blank" rel="external">https://github.com/Homebrew/brew/</a><br>
</p>
</div>
</div>

<div id="outline-container-orgheadline39" class="outline-4">
<h4 id="orgheadline39"><span class="section-number-4">3.1.7</span> Mac 下的远程桌面</h4>
<div class="outline-text-4" id="text-3-1-7">
<p>
TeamViewer 可用来远程桌面。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline40" class="outline-4">
<h4 id="orgheadline40"><span class="section-number-4">3.1.8</span> 键盘改键</h4>
<div class="outline-text-4" id="text-3-1-8">
<p>
Karabiner<br>
<a href="https://pqrs.org/osx/karabiner/index.html.en" target="_blank" rel="external">https://pqrs.org/osx/karabiner/index.html.en</a><br>
Seil: change CapsLock key<br>
<a href="https://pqrs.org/osx/karabiner/seil.html" target="_blank" rel="external">https://pqrs.org/osx/karabiner/seil.html</a><br>
OSX 系统改键<br>
SystemPreferences-&gt;Keyboard-&gt;ModifyKeys<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline41" class="outline-4">
<h4 id="orgheadline41"><span class="section-number-4">3.1.9</span> Alfred</h4>
<div class="outline-text-4" id="text-3-1-9">
<p>
和 windows 下的 Listary 功能类似<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline42" class="outline-4">
<h4 id="orgheadline42"><span class="section-number-4">3.1.10</span> OSX FTP 服务使用</h4>
<div class="outline-text-4" id="text-3-1-10">
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#24320;&#21551; ftp &#26381;&#21153;</span>
sudo -s launchctl load -w /System/Library/LaunchDaemons/ftp.plist
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20851;&#38381; ftp &#26381;&#21153;</span>
sudo -s launchctl unload -w /System/Library/LaunchDaemons/ftp.plist
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">ftp &#30340;&#29992;&#25143;&#21517;&#21644;&#23494;&#30721;&#20026; &#30005;&#33041;&#30340;&#29992;&#25143;&#21517;&#21644;&#23494;&#30721;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">ftp &#37197;&#32622;&#26041;&#27861;</span>
https://stackoverflow.com/questions/31093733/ftp-service-in-os-x-yosemite
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline46" class="outline-3">
<h3 id="orgheadline46"><span class="section-number-3">3.2</span> OSX 配置</h3>
<div class="outline-text-3" id="text-3-2">
</div><div id="outline-container-orgheadline44" class="outline-4">
<h4 id="orgheadline44"><span class="section-number-4">3.2.1</span> 开启关闭 ipv6</h4>
<div class="outline-text-4" id="text-3-2-1">
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20851;&#38381; ipv6</span>
networksetup -setv6off Ethernet &amp;&amp; networksetup -setv6off Wi-Fi
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#24320;&#21551; ipv6</span>
networksetup -setv6automatic Wi-Fi &amp;&amp; networksetup -setv6automatic Ethernet
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline45" class="outline-4">
<h4 id="orgheadline45"><span class="section-number-4">3.2.2</span> 通过 host 名称访问 pc 失败</h4>
<div class="outline-text-4" id="text-3-2-2">
<p>
<a href="#orgtarget1">4.2.2</a><br>
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline61" class="outline-2">
<h2 id="orgheadline61"><span class="section-number-2">4</span> Init Windows</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-orgheadline54" class="outline-3">
<h3 id="orgheadline54"><span class="section-number-3">4.1</span> 工具</h3>
<div class="outline-text-3" id="text-4-1">
</div><div id="outline-container-orgheadline48" class="outline-4">
<h4 id="orgheadline48"><span class="section-number-4">4.1.1</span> 键盘改键</h4>
<div class="outline-text-4" id="text-4-1-1">
<p>
AutoHotkey<br>
<a href="http://www.autohotkey.com/" target="_blank" rel="external">http://www.autohotkey.com/</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline49" class="outline-4">
<h4 id="orgheadline49"><span class="section-number-4">4.1.2</span> Listary</h4>
<div class="outline-text-4" id="text-4-1-2">
<p>
和 osx 下的 Alfred 功能类似<br>
Ctrl-Ctrl invoke Lisary<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline50" class="outline-4">
<h4 id="orgheadline50"><span class="section-number-4">4.1.3</span> Task 切换</h4>
<div class="outline-text-4" id="text-4-1-3">
<p>
<a href="http://www.ntwind.com/software/vistaswitcher.html" target="_blank" rel="external">http://www.ntwind.com/software/vistaswitcher.html</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline53" class="outline-4">
<h4 id="orgheadline53"><span class="section-number-4">4.1.4</span> windows shell</h4>
<div class="outline-text-4" id="text-4-1-4">
<p>
该工具集成了 cygwin，oh-my-shell<br>
<a href="http://babun.github.io/" target="_blank" rel="external">http://babun.github.io/</a><br>
安装方法：<br>
下载安装包解压，执行下面命令，/t 表示安装路径。<br>
install.bat /t "D:\target_folder"<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline52"></a>ErrorFixed<br><ol class="org-ol"><li><a id="orgheadline51"></a>babun 命令自动提示不管用<br><div class="outline-text-6" id="text-4-1-4-1-1">
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#25191;&#34892;&#19979;&#38754;&#21629;&#20196;&#21487;&#20197;&#20462;&#22797;&#35813;&#38382;&#39064;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">compinit &#20026; zsh &#25552;&#20379;&#30340;&#33258;&#21160;&#34917;&#20840;&#21151;&#33021;</span>
compinit
cp .zcompdump .zcompdump-$<span style="color: #eedd82;">HOSTNAME</span>-$<span style="color: #eedd82;">ZSH_VERSION</span>
</pre>
</div>
<p>
参考链接：<a href="https://github.com/babun/babun/issues/159" target="_blank" rel="external">https://github.com/babun/babun/issues/159</a><br>
</p>
</div></li></ol></li></ol>
</div>
</div>

<div id="outline-container-orgheadline60" class="outline-3">
<h3 id="orgheadline60"><span class="section-number-3">4.2</span> Windows 配置</h3>
<div class="outline-text-3" id="text-4-2">
</div><div id="outline-container-orgheadline57" class="outline-4">
<h4 id="orgheadline57"><span class="section-number-4">4.2.1</span> 加速 windows</h4>
<div class="outline-text-4" id="text-4-2-1">
</div><ol class="org-ol"><li><a id="orgheadline56"></a>关闭不必要的服务<br><div class="outline-text-5" id="text-4-2-1-1">
<p>
计算机-&gt;管理-&gt;服务和应用程序-&gt;服务<br>
禁用下面的服务：<br>
Superfetch<br>
Routing and Remote Access<br>
Windows Update<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline55"></a>查看进程使用的服务<br><div class="outline-text-6" id="text-4-2-1-1-1">
<p>
任务管理器中，选中进程右键点击"转到服务"<br>
</p>
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline58" class="outline-4">
<h4 id="orgheadline58"><span class="section-number-4">4.2.2</span> 通过 host 名称访问 pc 失败</h4>
<div class="outline-text-4" id="text-4-2-2">
<p>
<a id="orgtarget1"></a><br>
</p>
<pre class="example">
ping your-host-name 如果发现 ping 到的 ip 地址为 ipv6，那么可以将 pc 的 ipv6 协议禁止来解决该问题。
注意：
在 windows 下 your-host-name 不需要包含.local 后缀
在 osx 下 your-host-name 需要包含.local 后缀
</pre>
</div>
</div>
<div id="outline-container-orgheadline59" class="outline-4">
<h4 id="orgheadline59"><span class="section-number-4">4.2.3</span> ping host</h4>
<div class="outline-text-4" id="text-4-2-3">
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">ping host &#36820;&#22238; ipv4</span>
ping my-pc -4
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">ping host &#36820;&#22238; ipv6</span>
ping my-pc -6
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline82" class="outline-2">
<h2 id="orgheadline82"><span class="section-number-2">5</span> Init Ubuntu</h2>
<div class="outline-text-2" id="text-5">
<p>
重新安装 Ubuntu 以后 该做的 事情。(这个文档是大学那会儿[2006-2010]写的，估计现在有很多都变了吧)<br>
</p>
</div>
<div id="outline-container-orgheadline64" class="outline-3">
<h3 id="orgheadline64"><span class="section-number-3">5.1</span> 最重要的事情</h3>
<div class="outline-text-3" id="text-5-1">
</div><div id="outline-container-orgheadline62" class="outline-4">
<h4 id="orgheadline62"><span class="section-number-4">5.1.1</span> 首先：</h4>
<div class="outline-text-4" id="text-5-1-1">
<p>
自动挂载 Resourse 分区(就是你存储资源的那个分区)。挂载方法参看下面文中所介绍的方法：<br>
《ununtu 自动挂载分区》 <a href="http://hi.baidu.com/wolfand11/blog/item/a2629eee6e9ff5f1b3fb9597.html" target="_blank" rel="external">http://hi.baidu.com/wolfand11/blog/item/a2629eee6e9ff5f1b3fb9597.html</a><br>
一般，我会在自己的用户目录下创建一个 Resourse 目录，然后将分区挂载在该目录下。<br>
（ /dev/sda6    /home/smile/Resource    ext4   defaults   0   0）<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline63" class="outline-4">
<h4 id="orgheadline63"><span class="section-number-4">5.1.2</span> 其次：</h4>
<div class="outline-text-4" id="text-5-1-2">
<p>
设置桌面等的路径，设置方法看下面文中所介绍的方法：<br>
</p>

<p>
《转》改变 Ubuntu 桌面所在文件夹 <a href="http://hi.baidu.com/wolfand11/blog/item/b4bbe21f7a6659c4a68669cb.html" target="_blank" rel="external">http://hi.baidu.com/wolfand11/blog/item/b4bbe21f7a6659c4a68669cb.html</a><br>
</p>

<p>
一般，我自己的资源分区中都会创建 Desktop、Documents、Downloads、Music、Pictures、Public、Templates、Videos<br>
</p>

<p>
等目录，我会将系统默认的路径改为 Resourse 下面的对应的路径。（我为什么要这么做呢？:-) 有一次忘记备份桌面的资料，就<br>
</p>

<p>
重新装系统了，后果可想而知。如果修改这些默认路径，就会将资料都保存在我的 Resourse 分区中了）。下面是我的设置代码：<br>
</p>

<p>
XDG_DESKTOP_DIR="$HOME/Resource/Desktop/"<br>
</p>

<p>
XDG_DOCUMENTS_DIR="$HOME/Resource/Documents"<br>
</p>

<p>
XDG_DOWNLOAD_DIR="$HOME/Resource/Downloads/"<br>
</p>

<p>
XDG_MUSIC_DIR="$HOME/Resource/Music"<br>
</p>

<p>
XDG_PICTURES_DIR="$HOME/Resource/Pictures"<br>
</p>

<p>
XDG_PUBLICSHARE_DIR="$HOME/Resource/Public"<br>
</p>

<p>
XDG_TEMPLATES_DIR="$HOME/Resource/Templates"<br>
</p>

<p>
XDG_VIDEOS_DIR="$HOME/Resource/Videos"<br>
</p>
</div>
</div>
</div>

<div id="outline-container-orgheadline81" class="outline-3">
<h3 id="orgheadline81"><span class="section-number-3">5.2</span> 环境配置软件安装</h3>
<div class="outline-text-3" id="text-5-2">
</div><div id="outline-container-orgheadline65" class="outline-4">
<h4 id="orgheadline65"><span class="section-number-4">5.2.1</span> 安装、配置编译环境</h4>
<div class="outline-text-4" id="text-5-2-1">
<p>
刚装好的系统中已经有 GCC 了，但是这个 GCC 什么文件都不能编译，因为没有一些必须的头文件，所以要安装 build-essential 这个软件 包，安装了这个包会自动安装上 g++,libc6-dev,l inux -libc-dev,libstdc++6-4.1-dev 等一些必须的软件和头文件的库。可以在新立得里面搜索 build-essential<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline66" class="outline-4">
<h4 id="orgheadline66"><span class="section-number-4">5.2.2</span> 配置 Terminal</h4>
<div class="outline-text-4" id="text-5-2-2">
<p>
使其符合自己使用习惯<br>
参考左边链接配置方法：<a href="http://hi.baidu.com/wolfand11/blog/item/bde7741b85ff6c158718bfd5.html" target="_blank" rel="external">http://hi.baidu.com/wolfand11/blog/item/bde7741b85ff6c158718bfd5.html</a><br>
</p>
</div>
</div>

<div id="outline-container-orgheadline67" class="outline-4">
<h4 id="orgheadline67"><span class="section-number-4">5.2.3</span> 安装配置 QtCreator</h4>
<div class="outline-text-4" id="text-5-2-3">
<p>
直接在 Ubuntu Software Center 中搜索安装<br>
（1）、设置代码自动补全快捷键为 Shift+f；<br>
</p>

<p>
在 QtCreator 进入 Tool 菜单中 Option，选择 Environment/Keyboard,在右边对话框中找到<br>
</p>

<p>
TextEditor.CompleteThis 选项进行设置。<br>
</p>

<p>
（2）、设置字体大小（对眼睛有好处）；<br>
</p>

<p>
（3）、修改 Qt 中 example 文件夹的访问权限，sudo chmod -R 777 examples<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline68" class="outline-4">
<h4 id="orgheadline68"><span class="section-number-4">5.2.4</span> 安装配置 BoUML（UML 工具）</h4>
<div class="outline-text-4" id="text-5-2-4">
<p>
直接在 Ubuntu Software Center 中搜索安装<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline69" class="outline-4">
<h4 id="orgheadline69"><span class="section-number-4">5.2.5</span> 安装 Amaya</h4>
<div class="outline-text-4" id="text-5-2-5">
<p>
<a href="http://www.w3.org/Amaya/Overview.html%EF%BC%88Amaya" target="_blank" rel="external">http://www.w3.org/Amaya/Overview.html%EF%BC%88Amaya</a> 官网）<br>
</p>

<p>
Amaya 是 一个具有浏览功能的 WEB 开发工具，是由万维网协会（W3C）成员开发的一个网络浏览器，同时也可以作为对 W3C 成果的测试工具。Amaya 包括了一个 HTML 编辑器和浏览器，用户可以免费到 W3C 的网站下载它，在 linux 和 windows 下都有对应的版本。Amaya 起初只支持 HTML 和 CSS 的编 缉，现在已经添加了对 XML、XHTML、MathML、SVG 等的支持。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline70" class="outline-4">
<h4 id="orgheadline70"><span class="section-number-4">5.2.6</span> 安装 VirtualBox（虚拟机）</h4>
<div class="outline-text-4" id="text-5-2-6">
<p>
直接在 Ubuntu Software Center 中搜索安装<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline71" class="outline-4">
<h4 id="orgheadline71"><span class="section-number-4">5.2.7</span> 安装 StarDict（Linux 下的金山词霸）</h4>
<div class="outline-text-4" id="text-5-2-7">
<p>
直接在 Ubuntu Software Center 中搜索安装<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline72" class="outline-4">
<h4 id="orgheadline72"><span class="section-number-4">5.2.8</span> 安装 iptux（linux 下的飞鸽）</h4>
<div class="outline-text-4" id="text-5-2-8">
<p>
直接在 Ubuntu Software Center 中搜索安装<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline73" class="outline-4">
<h4 id="orgheadline73"><span class="section-number-4">5.2.9</span> 安装 libfetion</h4>
<div class="outline-text-4" id="text-5-2-9">
<p>
（Linux 下的飞信）<a href="http://www.libfetion.org/" target="_blank" rel="external">http://www.libfetion.org/</a><br>
</p>
</div>
</div>

<div id="outline-container-orgheadline74" class="outline-4">
<h4 id="orgheadline74"><span class="section-number-4">5.2.10</span> 安装 Kchmiewer</h4>
<div class="outline-text-4" id="text-5-2-10">
<p>
这个是 kde 下出色一个 chm 阅读器，相比较于 chmsee 出现中文乱马的情况而言，这个可以说是完美了。<br>
安装：sudo apt-get install kchmviewer<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline75" class="outline-4">
<h4 id="orgheadline75"><span class="section-number-4">5.2.11</span> 安装 XMind</h4>
<div class="outline-text-4" id="text-5-2-11">
<p>
XMIND 是一款非常实用的商业思维导图（Mindmap）软件，应用全球最先进 的 Eclipse RCP 软件架构，全力打造易用、高效的可视化思维软件，强调软件的可扩展、跨平台、稳定性和性能，致力于使用先进的软件技术帮助用户真正意义上提高生产率。<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline76" class="outline-4">
<h4 id="orgheadline76"><span class="section-number-4">5.2.12</span> 修改最大化、最小化、关闭按钮的位置。</h4>
<div class="outline-text-4" id="text-5-2-12">
<p>
请参考&lt;转&gt;如何将 Ubuntu 10.04 LTS 的窗口控制按钮从左上角调整到右上角<br>
<a href="http://hi.baidu.com/wolfand11/blog/item/1adac00879b1983ce82488e8.html" target="_blank" rel="external">http://hi.baidu.com/wolfand11/blog/item/1adac00879b1983ce82488e8.html</a><br>
</p>
</div>
</div>

<div id="outline-container-orgheadline77" class="outline-4">
<h4 id="orgheadline77"><span class="section-number-4">5.2.13</span> 设置 Ibus</h4>
<div class="outline-text-4" id="text-5-2-13">
<p>
如果你是 KUbuntu 那么你要安装 ibus-gtk,这样才能在 Gnome 的软件中输入中文。<br>
</p>

<p>
如果你是 Ubuntu 那么你要安装 ibus-qt4，这样你才能在 KDE 的软件中输入中文。<br>
</p>

<p>
设置 ibus 启动项，System &#x2013;&gt; Perference &#x2013;&gt; Startup Applications &#x2013;&gt; add &#x2014;&gt; Name: ibus-daemon Command : /usr/bin/ibus-daemon -d &#x2013;&gt; Save<br>
</p>
</div>
</div>

<div id="outline-container-orgheadline78" class="outline-4">
<h4 id="orgheadline78"><span class="section-number-4">5.2.14</span> 设置桌面图标</h4>
<div class="outline-text-4" id="text-5-2-14">
<p>
ubuntu 如何让桌面显示“我的电脑”及去掉桌面上的“磁盘图标”<br>
<a href="http://hi.baidu.com/wolfand11/blog/item/4f1ab1097a86afbe2fddd4d3.html?timeStamp=1290957426596" target="_blank" rel="external">http://hi.baidu.com/wolfand11/blog/item/4f1ab1097a86afbe2fddd4d3.html?timeStamp=1290957426596</a><br>
</p>
</div>
</div>

<div id="outline-container-orgheadline79" class="outline-4">
<h4 id="orgheadline79"><span class="section-number-4">5.2.15</span> rar 软件</h4>
<div class="outline-text-4" id="text-5-2-15">
<p>
ubuntu 压缩文件为 rar 格式与解压 rar 格式文件<br>
</p>
<ul class="org-ul">
<li>安装 rar 与 unrar 方法：<br>
sudo apt-get install rar<br>
sudo apt-get install unrar<br></li>
<li>简单的使用方法：<br>
<ul class="org-ul">
<li><p>
压缩文件为 rar 格式<br>
</p>
<pre class="example">
例:rar a test.rar file1.txt 若 test.rar 文件不存在，则打包 file1.txt 文件成 test.rar
例:rar a test.rar file2.txt 若 test.rar 文件已经存在，则添加 file2.txt 文件到 test.rar 中
</pre></li>
<li><p>
解压 rar 文件<br>
</p>
<pre class="example">
例：unrar x -o- -y  test.rar   /home/test/    将 test.rar 解压到/home/test/ 目录下。
例：unrar  e-o- -y test.rar                   将 test.rar 解压到当前目录下。
</pre></li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline80" class="outline-4">
<h4 id="orgheadline80"><span class="section-number-4">5.2.16</span> 跨平台的音乐播放器</h4>
<div class="outline-text-4" id="text-5-2-16">
<p>
<a href="http://www.clementine-player.org/" target="_blank" rel="external">http://www.clementine-player.org/</a><br>
</p>
</div>
</div>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> InitPC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Create Blog With Jeykll]]></title>
      <url>http://wolfand11.coding.me/2016/08/11/tools/CreateBlogWithJeykll/</url>
      <content type="html"><![CDATA[

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><span class="section-number-2">1</span> Jeykll 配置</h2>
<div class="outline-text-2" id="text-1">
<a id="more"></a>

<pre class="example">
修改_config.yml 文件中的配置信息:
title:wolfand11's Blog
name:Dong Guo
github : wolfand11
production_url : http://wolfand11.github.com
......
</pre>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2"><span class="section-number-2">2</span> org-mode 配置</h2>
<div class="outline-text-2" id="text-2">
<pre class="example">
org-mode 配置指南
http://orgmode.org/worg/org-tutorials/org-jekyll.html
</pre>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3"><span class="section-number-2">3</span> 新建一篇博文</h2>
<div class="outline-text-2" id="text-3">
<p>
在 wolfand11.github.com/org/目录下新建一个 XXXX.org 文件。<br>
.org 文件的名称必须以时间开始，例如:2012-12-2-Github 博客使用指南.org。否则，github 上不会显示该博文。<br>
在 org-mode 下，调用命令 org/github-blog-new-entry。这样就会生成一个博文的模板。模板内容为:<br>
</p>
<pre class="example">
// #+Tile: dired-mode document
// #+BEGIN_HTML
// ---
// layout: page
// title: TEST
// category : tool
// tags : [tool, emacs]
// ---
// \{\% include JB/setup %\}   //you should remove \
// #+END_HTML
</pre>
</div>
</div>
<div id="outline-container-orgheadline6" class="outline-2">
<h2 id="orgheadline6"><span class="section-number-2">4</span> 发布博文</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4"><span class="section-number-3">4.1</span> 发布当前的博文</h3>
<div class="outline-text-3" id="text-4-1">
<p>
在 org-mode 下，调用命令 org-publish-current-file。该命令会在\_posts 对应生成.xml 文件。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5"><span class="section-number-3">4.2</span> 重新发布 org 目录下的所有博文</h3>
<div class="outline-text-3" id="text-4-2">
<p>
在 org-mode 下，调用命令 org-publish-project,然后输入 Project 名称:iGitBlog。该命令会将 org 目录下的所有.org 文件都重新发布一遍。<br>
</p>
</div>
</div>
</div>

<div id="outline-container-orgheadline7" class="outline-2">
<h2 id="orgheadline7"><span class="section-number-2">5</span> 注意事项:</h2>
<div class="outline-text-2" id="text-5">
<pre class="example">
1、不要在#+BEGIN_HTML 之前添加#+Title 等标签，否则生成的 HTML 不会被 jekyll 支持，出现页面没有 css的情况。
</pre>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blog </tag>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Create Blog With Hexo]]></title>
      <url>http://wolfand11.coding.me/2016/08/11/tools/CreateBlogWithHexo/</url>
      <content type="html"><![CDATA[

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2"><span class="section-number-2">1</span> install and init</h2>
<div class="outline-text-2" id="text-1">
<p>
依据官方文档进行安装配置 <a href="https://hexo.io/docs/index.html" target="_blank" rel="external">https://hexo.io/docs/index.html</a><br>
站点配置文件 为 your-blog-dir/_config.yml<br>
主题配置文件 为 themes/your-theme/_config.yml<br>
</p>
<a id="more"></a>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23433;&#35013; python2.7</span>
https://www.python.org/downloads/

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23433;&#35013; nvm</span>
$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23433;&#35013; node.js</span>
$ nvm install stable
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#26597;&#30475;&#24403;&#21069;&#20351;&#29992;&#30340; nodejs &#29256;&#26412;</span>
$ nvm ls
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23433;&#35013; hexo</span>
$ npm install -g hexo-cli
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#22914;&#26524;&#23433;&#35013;&#36807;&#31243;&#20013;&#65292;&#21345;&#22312; node-pre-gyp install --fallback-to-build &#36825;&#19968;&#27493;&#65292;&#37027;&#20040;&#65292;&#20320;&#38656;&#35201;&#22312;&#23433;&#35013;&#21629;&#20196;&#21069;&#21152; sudo</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">-g &#34920;&#31034;&#20840;&#23616;&#23433;&#35013;(global) &#40664;&#35748;&#20026;&#26412;&#22320;&#23433;&#35013;(local) </span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">npm config get prefix  //&#35813;&#21629;&#20196;&#21487;&#20197;&#26597;&#30475;&#20840;&#23616;&#23433;&#35013;&#30340;&#36335;&#24452;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">npm config set prefix  //&#35813;&#21629;&#20196;&#21487;&#20197;&#35774;&#32622;&#20840;&#23616;&#23433;&#35013;&#30340;&#36335;&#24452;</span>

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#21019;&#24314; blog &#30446;&#24405;&#65292;&#24182;&#21021;&#22987;&#21270;</span>
$ hexo init &lt;folder&gt;
$ cd &lt;folder&gt;
$ npm install

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20462;&#25913; permalink (&#31449;&#28857;&#37197;&#32622;&#25991;&#20214;)</span>
permalink: :title.html

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#28155;&#21152; About\&#26631;&#31614;\&#20998;&#31867;</span>
$ hexo new page about
$ hexo new page tags
$ hexo new page categories
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#31449;&#28857;&#37197;&#32622;&#25991;&#20214;</span>
tag_dir: tags
archive_dir: archives
category_dir: categories
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20027;&#39064;&#37197;&#32622;&#25991;&#20214;</span>
menu:
  home: /
  categories: /categories
  about: /about
  archives: /archives
  tags: /tags

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#35774;&#32622;&#35821;&#35328; &#31449;&#28857;&#37197;&#32622;&#25991;&#20214; &#20462;&#25913;&#21518;&#37325;&#26032;&#21551;&#21160; hexo &#26597;&#30475;&#25928;&#26524;</span>
language: zh-Hans
</pre>
</div>
</div>
<div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> windows</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23433;&#35013; python27</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23433;&#35013; babun&#65292;&#23433;&#35013;&#26041;&#27861;&#21442;&#32771; InitPC.org &#36825;&#31687;&#25991;&#26723;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23433;&#35013; windows &#29256;&#26412; nvm</span>
https://github.com/coreybutler/nvm-windows
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23433;&#35013; nodejs</span>
https://nodejs.org/en/ &#22312;&#23448;&#32593;&#19979;&#36733;&#23433;&#35013;&#21363;&#21487;
&#25110;&#32773; nvm install stable
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#22312; babun Terminal &#19979;&#65292;&#23433;&#35013; hexo</span>
$ npm install -g hexo-cli
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">1.1 &#21021;&#22987;&#21270; hexo &#30340;&#27493;&#39588;&#35831;&#21442;&#32771;&#21069;&#38754;&#25152;&#21015;&#20449;&#24687;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">1.2 &#24050;&#32463;&#26377;&#30340; hexo &#39033;&#30446;&#65292;&#21487;&#20197;&#30452;&#25509;&#20811;&#38534;</span>
$ git clone https://git.coding.net/wolfand11/wolfand11.git ~/Documents/MyProject/Public/wolfand11
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#29983;&#25104; package.json &#25991;&#20214;</span>
$ hexo init wolfand11
$ cd wolfand11
$ npm install hexo --save
$ npm install
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3"><span class="section-number-2">2</span> hexo server</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23433;&#35013; hexo-server</span>
$ npm install hexo-server --save

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#24320;&#21551; server</span>
$ hexo server
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#24320;&#21551; server &#25351;&#23450;&#31471;&#21475;&#21495;</span>
$ hexo server -p 5000
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#24320;&#21551; server &#25171;&#21360;&#26085;&#24535;</span>
$ hexo server -l
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4"><span class="section-number-2">3</span> hexo deploy</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#31449;&#28857;&#37197;&#32622;&#25991;&#20214;</span>
<span style="color: #ff0000;">## </span><span style="color: #ff0000;">Docs: https://hexo.io/docs/deployment.html</span>
deploy:
  <span style="color: #b0c4de;">type</span>: git
  repo:
    coding: git@git.coding.net:wolfand11/wolfand11.git,master

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23433;&#35013; hexo-deployer-git</span>
$ npm install hexo-deployer-git --save

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#22312;&#20320;&#30340;&#39033;&#30446;&#25176;&#31649;&#24179;&#21488;&#35774;&#32622; SSH &#20844;&#38053;</span>

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#37096;&#32626;</span>
$ hexo deploy --generate
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5"><span class="section-number-2">4</span> 切换主题</h2>
<div class="outline-text-2" id="text-4">
<p>
可以参考 Next 主题文档 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a><br>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">1 &#23433;&#35013;&#20027;&#39064;</span>
$ git clone https://github.com/iissnan/hexo-theme-next themes/next
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">2 &#20462;&#25913;&#20027;&#39064;&#37197;&#32622;&#25991;&#20214;&#65292;theme &#23383;&#27573;&#20026; next</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">3 &#37325;&#26032;&#21551;&#21160; hexo &#26597;&#30475;&#26159;&#21542;&#29983;&#25928;</span>
$ hexo server <span style="color: #ff0000;">#</span><span style="color: #ff0000;">&#21487;&#20197;&#31616;&#20889;&#20026; hexo s</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline21" class="outline-2">
<h2 id="orgheadline21"><span class="section-number-2">5</span> 插件配置</h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-orgheadline6" class="outline-4">
<h4 id="orgheadline6"><span class="section-number-4">5.0.1</span> 配置基本显示信息</h4>
<div class="outline-text-4" id="text-5-0-1">
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#19979;&#38754;&#30340;&#37197;&#32622;&#37117;&#22312; &#31449;&#28857;&#37197;&#32622;&#25991;&#20214;&#20013;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#22836;&#20687;</span>
avatar: /images/m_lambda-320.png
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">title</span>
title: wolfand11<span style="color: #ffa07a;">'s blog</span>
<span style="color: #ffa07a;"># &#25551;&#36848;&#20449;&#24687;</span>
<span style="color: #ffa07a;">description: I'</span>m a game programer.I will be a very gentle game programer!
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20316;&#32773;</span>
author: wolfand11
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline7" class="outline-4">
<h4 id="orgheadline7"><span class="section-number-4">5.0.2</span> Math Latex 支持</h4>
<div class="outline-text-4" id="text-5-0-2">
<p>
修改 Next 主题配置文件如下<br>
</p>
<pre class="example">
# MathJax Support
mathjax:
  enable: true
  cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
</pre>
</div>
</div>
<div id="outline-container-orgheadline8" class="outline-4">
<h4 id="orgheadline8"><span class="section-number-4">5.0.3</span> 配置侧边栏</h4>
<div class="outline-text-4" id="text-5-0-3">
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#19979;&#38754;&#30340;&#37197;&#32622;&#37117;&#22312; &#20027;&#39064;&#37197;&#32622;&#25991;&#20214;&#20013;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#40664;&#35748;&#20391;&#36793;&#26639;&#38544;&#34255;</span>
sidebar:
  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">Sidebar Position, available value: left | right</span>
  position: left
  <span style="color: #ff0000;">#</span><span style="color: #ff0000;">position: right</span>

  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">Sidebar Display, available value:</span>
  <span style="color: #ff0000;">#  </span><span style="color: #ff0000;">- post    expand on posts automatically. Default.</span>
  <span style="color: #ff0000;">#  </span><span style="color: #ff0000;">- always  expand for all pages automatically</span>
  <span style="color: #ff0000;">#  </span><span style="color: #ff0000;">- hide    expand only when click on the sidebar toggle icon.</span>
  <span style="color: #ff0000;">#  </span><span style="color: #ff0000;">- remove  Totally remove sidebar including sidebar toggler.</span>
  <span style="color: #ff0000;">#</span><span style="color: #ff0000;">display: post</span>
  <span style="color: #ff0000;">#</span><span style="color: #ff0000;">display: always</span>
  display: hide
  <span style="color: #ff0000;">#</span><span style="color: #ff0000;">display: remove</span>

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#37197;&#32622;&#26174;&#31034;&#30340;&#31038;&#20132;&#38142;&#25509;</span>
social:
  <span style="color: #ff0000;">#</span><span style="color: #ff0000;">LinkLabel: Link</span>
  GitHub: https://github.com/wolfand11
  Douban: http://douban.com/people/wolfand11
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#37197;&#32622;&#26174;&#31034;&#30340;&#22270;&#26631;</span>
social_icons:
  <span style="color: #b0c4de;">enable</span>: true
  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">Icon Mappings.</span>
  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">KeyMapsToSocalItemKey: NameOfTheIconFromFontAwesome</span>
  GitHub: github
  Twitter: twitter
  Weibo: weibo
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline9" class="outline-4">
<h4 id="orgheadline9"><span class="section-number-4">5.0.4</span> 站内搜索</h4>
<div class="outline-text-4" id="text-5-0-4">
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23433;&#35013; hexo-generator-search&#65292;&#22312;&#31449;&#28857;&#30340;&#26681;&#30446;&#24405;&#19979;&#25191;&#34892;&#20197;&#19979;&#21629;&#20196;</span>
$ npm install hexo-generator-search --save
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#31449;&#28857;&#37197;&#32622;&#25991;&#20214;</span>
search:
  path: search.xml
  field: post
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#32534;&#36753; &#31449;&#28857;&#37197;&#32622;&#25991;&#20214;&#65292;&#20462;&#25913;&#32593;&#31449; url</span>
<span style="color: #ff0000;">## </span><span style="color: #ff0000;">If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span>
url: http://wolfand11.coding.me
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline10" class="outline-4">
<h4 id="orgheadline10"><span class="section-number-4">5.0.5</span> 配置多说插件</h4>
<div class="outline-text-4" id="text-5-0-5">
<p>
多说 2017-6-1 就会关闭了<br>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#31449;&#28857;&#37197;&#32622;&#25991;&#20214; &#22686;&#21152;&#37197;&#32622;</span>
duoshuo_shortname: xxx_your_duoshuo_shortname
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline11" class="outline-4">
<h4 id="orgheadline11"><span class="section-number-4">5.0.6</span> 配置 Disqus</h4>
<div class="outline-text-4" id="text-5-0-6">
<p>
之所以在站点配置文件中添加，是因为这样做的话，改变主题就不需要配置了。<br>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#31449;&#28857;&#37197;&#32622;&#25991;&#20214; &#22686;&#21152;&#37197;&#32622;</span>
disqus_shortname: xxx_your_disqus_shortname
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline12" class="outline-4">
<h4 id="orgheadline12"><span class="section-number-4">5.0.7</span> 打赏</h4>
<div class="outline-text-4" id="text-5-0-7">
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#31449;&#28857;&#37197;&#32622;&#25991;&#20214;</span>
reward_comment: 
wechatpay: /images/wx_reward.png
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline15" class="outline-4">
<h4 id="orgheadline15"><span class="section-number-4">5.0.8</span> 版权信息</h4>
<div class="outline-text-4" id="text-5-0-8">
</div><ol class="org-ol"><li><a id="orgheadline13"></a>方案 1<br><div class="outline-text-5" id="text-5-0-8-1">
<p>
Tips：目前下面的方法对于 hexo-render-org 是无效的，因为 hexo-render-org 没有支持 before_post_render<br>
</p>
<ul class="org-ul">
<li>在博客根目录下（source 同级目录下）创建 scripts 文件夹<br></li>
<li>在文件夹内新建一个 js 脚本文件，文件内容如下所述。注意：由于该脚本中添加了汉字，需要保存成 UTF8 格式，否则生成的 html 会有乱码。<br></li>
</ul>
<div class="org-src-container">

<pre class="src src-js"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">Filename: add_tail.js</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Author: Charles Yin</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Date: 2016/03/26</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Described in: https://tono.tk/2016/03/26/Add_copyright_for_hexo/</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Based on the script by KUANG Qi: http://kuangqi.me/tricks/append-a-copyright-info-after-every-post/</span>

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Add a tail to every post from tail.md</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">Great for adding copyright info</span>

<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">fs</span> = require(<span style="color: #ffa07a;">'fs'</span>);

hexo.extend.filter.register(<span style="color: #ffa07a;">'before_post_render'</span>, <span style="color: #00ffff;">function</span>(<span style="color: #eedd82;">data</span>){
        <span style="color: #00ffff;">if</span>(data.copyright == <span style="color: #7fffd4;">false</span>) <span style="color: #00ffff;">return</span> data;

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Add seperate line</span>
        data.content += <span style="color: #ffa07a;">'\n___\n'</span>;

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Try to read tail.md</span>
        <span style="color: #00ffff;">try</span> {
                <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">file_content</span> = fs.readFileSync(<span style="color: #ffa07a;">'tail.md'</span>);
                <span style="color: #00ffff;">if</span>(file_content &amp;&amp; data.content.length &gt; 50) 
                {
                        data.content += file_content;
                }
        } <span style="color: #00ffff;">catch</span> (err) {
                <span style="color: #00ffff;">if</span> (err.code !== <span style="color: #ffa07a;">'ENOENT'</span>) <span style="color: #00ffff;">throw</span> err;

                <span style="color: #ff0000;">// </span><span style="color: #ff0000;">No process for ENOENT error</span>
        }

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Add permalink</span>
        <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">permalink</span> = <span style="color: #ffa07a;">'\n &#26412;&#25991;&#38142;&#25509;&#65306;'</span> + data.permalink;
        data.content += permalink;

        <span style="color: #00ffff;">return</span> data;
});
</pre>
</div>
<ul class="org-ul">
<li>在博客根目录下创建 tail.md 文档，其中填写版权声明信息。如下：<br></li>
</ul>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #ff0000;">/*</span>
<span style="color: #ff0000;">// -------------</span>
<span style="color: #ff0000;">// you should rm \ from below</span>
<span style="color: #ff0000;">// </span>
<span style="color: #ff0000;">// \*\*&#29256;&#26435;&#22768;&#26126;\*\*</span>
<span style="color: #ff0000;">// </span>
<span style="color: #ff0000;">// ![](/images/m_cc.png)</span>
<span style="color: #ff0000;">// </span>
<span style="color: #ff0000;">// [The blog of wolfand11](http://wolfand11.coding.me/) by [Dong Guo](http://wolfand11.coding.me/about/) is licensed under a [Creative Commons BY-NC-ND 4.0 International License](http://creativecommons.org/licenses/by-nc-nd/4.0/). </span>
<span style="color: #ff0000;">// </span>
<span style="color: #ff0000;">// &#26412;&#25991;&#39318;&#21457;&#20110;[wolfand11's blog](http://wolfand11.coding.me)&#65292;&#29256;&#26435;&#25152;&#26377;&#65292;&#36716;&#36733;&#35831;&#20445;&#30041;&#26412;&#22768;&#26126;&#20197;&#21450;&#26412;&#25991;&#38142;&#25509;&#12290;</span>
<span style="color: #ff0000;">// </span>
<span style="color: #ff0000;">// */</span>
</pre>
</div>
</div></li>
<li><a id="orgheadline14"></a>方案 2<br><div class="outline-text-5" id="text-5-0-8-2">
<p>
Tips: 下面方案在 Next 主题中不能使用。<br>
</p>
<ul class="org-ul">
<li>step 1<br></li>
</ul>
<p>
layout\_partial\post\ 目录下新建 copyright.ejs 内如如下：<br>
</p>
<div class="org-src-container">

<pre class="src src-css">&lt;div class=<span style="color: #ffa07a;">"article-footer-copyright"</span>&gt;
        &#28155;&#21152;&#20320;&#30340;&#29256;&#26435;&#20449;&#24687;
&lt;/div&gt;
</pre>
</div>
<ul class="org-ul">
<li>step 2<br></li>
</ul>
<p>
layout\_partial\article.ejs 文件下添加如下代码：<br>
</p>
<div class="org-src-container">

<pre class="src src-cs">&lt;% if (!index &amp;&amp; post.copyright==true){ %&gt;
	&lt;%- partial('post/copyright') %&gt;
&lt;% } %&gt;
</pre>
</div>
<ul class="org-ul">
<li>step 3<br></li>
</ul>
<p>
source\css\_partial\ 下新建 copyright.styl 内容如下：<br>
</p>
<div class="org-src-container">

<pre class="src src-css"><span style="color: #87cefa;">.article-footer-copyright</span>{
   <span style="color: #eedd82;">border-top</span>:1px solid #d3d3d3;
   <span style="color: #eedd82;">margin</span>: 20px auto;     
   <span style="color: #eedd82;">padding-left</span>:2em;
   <span style="color: #eedd82;">width</span>: 80%;
}

<span style="color: #87cefa;">.article-footer-copyright p</span>{
  <span style="color: #eedd82;">font-size</span>:1.2em;
}

<span style="color: #87cefa;">.article-footer-copyright span,.copyright abbr</span>{
  <span style="color: #eedd82;">color</span>:#3d3d3d;
}
<span style="color: #87cefa;">div.copyright</span>{

     <span style="color: #eedd82;">font-weight</span>:bold;
    <span style="color: #eedd82;">color</span>:#FCB297;
       <span style="color: #eedd82;">padding</span>:0.3em 0.5em;
       <span style="color: #eedd82;">margin</span>:0 0 1em 0;
       <span style="color: #eedd82;">border-bottom</span>:none;
       <span style="color: #eedd82;">background-color</span>:#AAD2F0;
       <span style="color: #eedd82; font-style: italic;">-moz-border-radius</span>: 1em;
       <span style="color: #eedd82; font-style: italic;">-webkit-border-radius</span>:1em;
       <span style="color: #eedd82;">border-radius</span>: 1em;

  <span style="color: #eedd82; font-style: italic;">-moz-box-shadow</span>:inset 0px 1px 0px 0px #eeeeee;
  <span style="color: #eedd82; font-style: italic;">-webkit-box-shadow</span>:inset 0px 1px 0px 0px #eeeeee;
  <span style="color: #eedd82;">box-shadow</span>:inset 0px 1px 0px 0px #eeeeee;
  <span style="color: #eedd82;">background</span>:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #aad2f0), color-stop(1, #8bc1ed) );
  <span style="color: #eedd82;">background</span>:-moz-linear-gradient( center top, #aad2f0 5%, #8bc1ed 100% );
  <span style="color: #ff0000;">/* </span><span style="color: #ff0000;">filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#aad2f0', endColorstr='#8bc1ed'); </span><span style="color: #ff0000;">*/</span>
  <span style="color: #eedd82;">background-color</span>:#aad2f0;
  <span style="color: #eedd82;">border</span>:1px solid #dcdcdc;
  <span style="color: #eedd82;">text-shadow</span>:1px 1px 0px #eeeeee;

}
<span style="color: #87cefa;">div.article-footer-copyright</span>{
        <span style="color: #eedd82;">margin-top</span>:2em;
        <span style="color: #eedd82;">padding</span>:1.5em;
        <span style="color: #eedd82;">border</span>:1px solid #d3d3d3;
        <span style="color: #eedd82;">background-color</span>:#DEEBF7;
}
<span style="color: #87cefa;">.article-footer-copyright p</span>{
        <span style="color: #eedd82;">line-height</span>: 160%;
        <span style="color: #eedd82;">margin</span>: 10px;
        <span style="color: #eedd82;">font-size</span>: 100%;
}
</pre>
</div>
<ul class="org-ul">
<li>step 4<br></li>
</ul>
<p>
source\css\styl.styl 文件下新添如下代码：<br>
</p>
<div class="org-src-container">

<pre class="src src-css">source\css\styl.styl &#25991;&#20214;&#19979;&#26032;&#28155;&#22914;&#19979;&#20195;&#30721;&#65306;
</pre>
</div>
<ul class="org-ul">
<li>step 5<br></li>
</ul>
<p>
只要在需要添加版权信息的文章中，添加 copyright: true 即可显示版权信息。<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline20" class="outline-4">
<h4 id="orgheadline20"><span class="section-number-4">5.0.9</span> 搜索引擎收录</h4>
<div class="outline-text-4" id="text-5-0-9">
</div><ol class="org-ol"><li><a id="orgheadline16"></a>添加网站<br><div class="outline-text-5" id="text-5-0-9-1">
<p>
googel 网站添加地址<br>
<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="external">https://www.google.com/webmasters/tools/home?hl=zh-CN</a><br>
百度网站添加地址<br>
<a href="http://www.baidu.com/search/url_submit.htm" target="_blank" rel="external">http://www.baidu.com/search/url_submit.htm</a><br>
</p>
</div></li>
<li><a id="orgheadline17"></a>选择文件验证方案<br><div class="outline-text-5" id="text-5-0-9-2">
<ul class="org-ul">
<li>下载验证文件，放置到 hexo_root/source/ 目录下面。<br></li>
<li>重新部署 blog<br></li>
<li>使用验证文件，代替部署生成的文件<br></li>
</ul>
<p>
hexo_root/baiduverifyxxxxx.html hexo_root/googelxxxx.html<br>
(因为部署 blog 可能会修改验证文件内容，导致验证失败)<br>
</p>
</div></li>
<li><a id="orgheadline18"></a>添加 sitemap<br><div class="outline-text-5" id="text-5-0-9-3">
<ul class="org-ul">
<li>安装 sitemap 生成插件<br></li>
</ul>
<div class="org-src-container">

<pre class="src src-shell">npm install hexo-generator-sitemap --save
npm install hexo-generator-baidu-sitemap --save
</pre>
</div>
<ul class="org-ul">
<li>重新部署 blog，生成 sitemap 文件<br></li>
</ul>
<p>
访问 wolfand11.coding.me/sitemap.xml wolfand11.coding.me/baidusitemap.xml 查看内容是否生成<br>
</p>
<ul class="org-ul">
<li>为搜索引擎设置 sitemap 地址<br></li>
</ul>
</div></li>
<li><a id="orgheadline19"></a>参考资源<br><div class="outline-text-5" id="text-5-0-9-4">
<p>
<a href="http://www.cnblogs.com/tengj/p/5357879.html" target="_blank" rel="external">http://www.cnblogs.com/tengj/p/5357879.html</a><br>
</p>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline28" class="outline-2">
<h2 id="orgheadline28"><span class="section-number-2">6</span> 集成 Emacs</h2>
<div class="outline-text-2" id="text-6">
</div><div id="outline-container-orgheadline24" class="outline-3">
<h3 id="orgheadline24"><span class="section-number-3">6.1</span> org-mode</h3>
<div class="outline-text-3" id="text-6-1">
</div><div id="outline-container-orgheadline22" class="outline-4">
<h4 id="orgheadline22"><span class="section-number-4">6.1.1</span> hexo-renderer-org 安装</h4>
<div class="outline-text-4" id="text-6-1-1">
<p>
参考文档 <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">https://github.com/CodeFalling/hexo-renderer-org</a><br>
</p>

<p>
下面这个版本是 coldnew 增加新功能后的版本。<br>
<a href="https://coldnew.github.io/hexo-org-example/2017/03/05/getting-started-with-hexo-and-org-mode/" target="_blank" rel="external">https://coldnew.github.io/hexo-org-example/2017/03/05/getting-started-with-hexo-and-org-mode/</a><br>
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23433;&#35013; hexo-renderer-org</span>
$ npm install https://github.com/coldnew/hexo-renderer-org#coldnew --save
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline23" class="outline-4">
<h4 id="orgheadline23"><span class="section-number-4">6.1.2</span> blog 插入图片</h4>
<div class="outline-text-4" id="text-6-1-2">
<p>
方案 1: 将所有图片放置在 source/images/目录下，在 blog 中通过 http 链接显示图片。<br>
</p>
<pre class="example">
例如，在 about.org 中对图片的引用
[[http://wolfand11.coding.me/images/m_lambda-320.png]]
</pre>
<p>
方案 2: 将图片放在和 org 文件同名的文件夹下。在站点配置文件中，设置 post_asset_folder: true。<br>
</p>
<pre class="example">
文章 GameAI.org 所在目录创建 GameAI 目录，然后在 GameAI.org 中输入如下文字，即可插入图片
[[file:GameAI/001_ai_architecture.png]]
</pre>
<p>
参考链接：<a href="https://coldnew.github.io/hexo-org-example/2017/03/05/getting-started-with-hexo-and-org-mode/" target="_blank" rel="external">https://coldnew.github.io/hexo-org-example/2017/03/05/getting-started-with-hexo-and-org-mode/</a><br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline27" class="outline-3">
<h3 id="orgheadline27"><span class="section-number-3">6.2</span> Prodigy</h3>
<div class="outline-text-3" id="text-6-2">
</div><div id="outline-container-orgheadline25" class="outline-4">
<h4 id="orgheadline25"><span class="section-number-4">6.2.1</span> 配置</h4>
<div class="outline-text-4" id="text-6-2-1">
<div class="org-src-container">

<pre class="src src-lisp">(prodigy-define-service
  <span style="color: #b0c4de;">:name</span> <span style="color: #ffa07a;">"Hexo Server"</span>
  <span style="color: #b0c4de;">:command</span> <span style="color: #ffa07a;">"hexo"</span>
  <span style="color: #b0c4de;">:args</span> '(<span style="color: #ffa07a;">"server"</span>)
  <span style="color: #b0c4de;">:cwd</span> <span style="color: #ffa07a;">"~/Documents/MyProject/Public/wolfand11"</span>
  <span style="color: #b0c4de;">:tags</span> '(hexo server)
  <span style="color: #b0c4de;">:kill-signal</span> 'sigkill
  <span style="color: #b0c4de;">:kill-process-buffer-on-stop</span> t)

(prodigy-define-service
  <span style="color: #b0c4de;">:name</span> <span style="color: #ffa07a;">"Hexo Deploy"</span>
  <span style="color: #b0c4de;">:command</span> <span style="color: #ffa07a;">"hexo"</span>
  <span style="color: #b0c4de;">:args</span> '(<span style="color: #ffa07a;">"deploy"</span> <span style="color: #ffa07a;">"--generate"</span>)
  <span style="color: #b0c4de;">:cwd</span> <span style="color: #ffa07a;">"~/Documents/MyProject/Public/wolfand11"</span>
  <span style="color: #b0c4de;">:tags</span> '(hexo deploy)
  <span style="color: #b0c4de;">:kill-signal</span> 'sigkill
  <span style="color: #b0c4de;">:kill-process-buffer-on-stop</span> t)

(prodigy-define-service <span style="color: #b0c4de;">:name</span> <span style="color: #ffa07a;">"Hexo Clean"</span>
  <span style="color: #b0c4de;">:command</span> <span style="color: #ffa07a;">"hexo"</span>
  <span style="color: #b0c4de;">:args</span> '(<span style="color: #ffa07a;">"clean"</span>)<span style="color: #b0c4de;">:cwd</span>
  <span style="color: #ffa07a;">"~/Documents/MyProject/Public/wolfand11"</span>
  <span style="color: #b0c4de;">:tags</span> '(hexo clean)<span style="color: #b0c4de;">:kill-signal</span>'sigkill
  <span style="color: #b0c4de;">:kill-process-buffer-on-stop</span> t)
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline26" class="outline-4">
<h4 id="orgheadline26"><span class="section-number-4">6.2.2</span> 使用</h4>
<div class="outline-text-4" id="text-6-2-2">
<p>
开启 prodigy<br>
M-x prodigy 或者 SPC a S<br>
开始执行 s<br>
停止执行 S<br>
显示日志 H<br>
查看帮助 ?<br>
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline31" class="outline-2">
<h2 id="orgheadline31"><span class="section-number-2">7</span> 开启调试</h2>
<div class="outline-text-2" id="text-7">
</div><div id="outline-container-orgheadline29" class="outline-4">
<h4 id="orgheadline29"><span class="section-number-4">7.0.1</span> hexo 开启 debug</h4>
<div class="outline-text-4" id="text-7-0-1">
<p>
如果 export 某个文件出错，可以使用下面命令，进行调试。<br>
</p>
<div class="org-src-container">

<pre class="src src-shell">hexo render ./source/_post/HelloWorld.org --debug
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline30" class="outline-4">
<h4 id="orgheadline30"><span class="section-number-4">7.0.2</span> hexo-renderer-org 开启 Debug</h4>
<div class="outline-text-4" id="text-7-0-2">
<pre class="example">
1. 在站点配置文件中，修改 org 配置如下：
org:
  emacs: '/Applications/Emacs.app/Contents/MacOS/Emacs'
  #emacs: 'D:/Applications/emacs/bin/emacs.exe'
  common: |
          #+OPTIONS: toc:nil
  cachedir: './hexo-org-cache/'
  theme: tango-dark
  # 设置 debug 为 true 开启打印
  debug: true

2. 修改 hexo-renderer-org 源代码
The easiest way for debugging is modify the lib/renderer.js following content

var proc = pty.spawn(emacs_path, exec_args, {
      name: 'xterm-256color',
      cols: 100,
      rows: 30
    });
to

var spawn = require('child_process').spawn;
var proc = spawn(emacs_path, exec_args, {
   stdio: 'inherit'
});
However, this method ONLY work on single page, that is you source/_posts dir should ONLY contain ONE org-mode file.
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline42" class="outline-2">
<h2 id="orgheadline42"><span class="section-number-2">8</span> 错误解决</h2>
<div class="outline-text-2" id="text-8">
</div><div id="outline-container-orgheadline32" class="outline-3">
<h3 id="orgheadline32"><span class="section-number-3">8.1</span> fatal: Not a git repository: source/_posts/D:/Documents/MyProject/Private/wolfand11/.git/modules/source/_posts</h3>
<div class="outline-text-3" id="text-8-1">
<p>
修改 blog git 仓库路径后，会报上面错误，解决办法如下：<br>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">remove submodule</span>
rm -rf source/_posts
git submodule update --init
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline33" class="outline-3">
<h3 id="orgheadline33"><span class="section-number-3">8.2</span> ERROR Deployer not found: git</h3>
<div class="outline-text-3" id="text-8-2">
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#25191;&#34892;&#19979;&#38754;&#21629;&#20196;&#25253;&#38169;</span>
hexo deploy

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20462;&#25913;&#26041;&#26696;&#20026;&#65292;&#25191;&#34892;&#19979;&#38754;&#21629;&#20196;</span>
npm install hexo-deployer-git --save
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline34" class="outline-3">
<h3 id="orgheadline34"><span class="section-number-3">8.3</span> error git clone</h3>
<div class="outline-text-3" id="text-8-3">
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#25191;&#34892;&#19979;&#38754;&#30340;&#21629;&#20196;&#20986;&#38169;</span>
$ npm install https://github.com/coldnew/hexo-renderer-org#coldnew --save

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23436;&#25972;&#38169;&#35823;&#28040;&#24687;&#22312; npm-debug.log &#20013;&#65292;&#31532;&#19968;&#20010;&#38169;&#35823;&#28040;&#24687;&#22914;&#19979;&#65306;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">error git clone C:\Users\Administrator\AppData\Roaming\npm-cache\_git-remotes\git-https-github-com-coldnew-hexo-renderer-org-git-coldnew-ae823c90 D:\Applications\babun\.babun\cygwin\tmp\npm-3136-507eab85\git-cache-bf65ba19\19441451b98da806317963be2c770d4b1aaf0083: Cloning into 'D:\Applications\babun\.babun\cygwin\tmp\npm-3136-507eab85\git-cache-bf65ba19\19441451b98da806317963be2c770d4b1aaf0083'...</span>
</pre>
</div>

<div class="org-src-container">

<pre class="src src-javascript"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#20462;&#25913;&#26041;&#26696;&#22914;&#19979;&#65306;</span>
<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#20462;&#25913;&#25991;&#20214;&#20013; execGit &#20989;&#25968;&#22914;&#19979; D:\Applications\nodejs\node_modules\npm\lib\utils\git.js</span>
<span style="color: #00ffff;">function</span> <span style="color: #87cefa;">execGit</span> (<span style="color: #eedd82;">args</span>, <span style="color: #eedd82;">options</span>, <span style="color: #eedd82;">cb</span>) {
    <span style="color: #00ffff;">if</span>(args) {
        <span style="color: #00ffff;">for</span>(<span style="color: #00ffff;">var</span> <span style="color: #eedd82;">i</span>=0; i&lt;args.length; i++) {
            <span style="color: #00ffff;">if</span>(<span style="color: #ffa07a;">'C:\\'</span>.indexOf(args[i]) != 0) {
                args[i] = args[i].replace(<span style="color: #ffa07a;">/\\/</span>g, <span style="color: #ffa07a;">'/'</span>).replace(<span style="color: #ffa07a;">/C\:\//</span>i, <span style="color: #ffa07a;">'/cygdrive/c/'</span>);
            }
            <span style="color: #00ffff;">if</span>(<span style="color: #ffa07a;">'D:\\'</span>.indexOf(args[i]) != 0) {
                args[i] = args[i].replace(<span style="color: #ffa07a;">/\\/</span>g, <span style="color: #ffa07a;">'/'</span>).replace(<span style="color: #ffa07a;">/D\:\//</span>i, <span style="color: #ffa07a;">'/cygdrive/d/'</span>);
            }
        }
    }
    log.info(<span style="color: #ffa07a;">'git'</span>, args)
    <span style="color: #00ffff;">var</span> <span style="color: #eedd82;">fullArgs</span> = prefixGitArgs().concat(args || [])
    <span style="color: #00ffff;">return</span> exec(git, fullArgs, options, noProgressTillDone(cb))
}

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#21442;&#32771;&#38142;&#25509; - https://github.com/npm/npm/issues/7357</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline35" class="outline-3">
<h3 id="orgheadline35"><span class="section-number-3">8.4</span> hexo command not found</h3>
<div class="outline-text-3" id="text-8-4">
<p>
环境变量 Path 添加 C:\Users\Administrator\AppData\Roaming\npm<br>
如果你的 hexo 被安装在 C:\Program Files\nodejs\目录下，那么你应该添加 C:\Program Files\nodejs\到环境变量 Path 中。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline36" class="outline-3">
<h3 id="orgheadline36"><span class="section-number-3">8.5</span> 404 status code downloading 64-bit node.lib</h3>
<div class="outline-text-3" id="text-8-5">
<p>
npm config set msvs_version=2015 &#x2013;global<br>
参考链接 <a href="https://github.com/coldnew/hexo-renderer-org/issues/7" target="_blank" rel="external">https://github.com/coldnew/hexo-renderer-org/issues/7</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline37" class="outline-3">
<h3 id="orgheadline37"><span class="section-number-3">8.6</span> 404 status code downloading 32-bit node.lib</h3>
<div class="outline-text-3" id="text-8-6">
<ol class="org-ol">
<li>Open a command prompt as administrator<br></li>
<li>Change the current directory to the directory your version of NPM is running from. For me that is "C:\Program Files\nodejs\node_modules\npm"<br></li>
<li>copy the "C:\Program Files\nodejs\node_modules\npm" to something like "C:\Program Files\nodejs\node_modules\npmOld" in case you want to undo the next step<br></li>
<li>typed: npm install node-gyp@latest. 注意 node-gyp 应该被安装到 C:\Program Files\nodejs\node_modules\npm\node_modules 目录下<br></li>
<li>hit enter<br></li>
</ol>
<p>
参考链接 <a href="https://github.com/nodejs/node-gyp/issues/724" target="_blank" rel="external">https://github.com/nodejs/node-gyp/issues/724</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline40" class="outline-3">
<h3 id="orgheadline40"><span class="section-number-3">8.7</span> Segmentation fault node "$basedir/node_modules/hexo-cli/bin/hexo"</h3>
<div class="outline-text-3" id="text-8-7">
</div><div id="outline-container-orgheadline38" class="outline-4">
<h4 id="orgheadline38"><span class="section-number-4">8.7.1</span> 如果.md 文件导出有错误</h4>
<div class="outline-text-4" id="text-8-7-1">
<ol class="org-ol">
<li>delete dir C:\Users\Administrator\AppData\Roaming\npm<br></li>
<li>reinstall $ npm install -g hexo-cli<br></li>
</ol>
</div>
</div>
<div id="outline-container-orgheadline39" class="outline-4">
<h4 id="orgheadline39"><span class="section-number-4">8.7.2</span> 如果.org 文件导出有错误</h4>
<div class="outline-text-4" id="text-8-7-2">
<p>
检查站点配置文件中，org 的 emacs 路径是否正确<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline41" class="outline-3">
<h3 id="orgheadline41"><span class="section-number-3">8.8</span> YAMLException: name of an alias node must contain at least one character at line</h3>
<div class="outline-text-3" id="text-8-8">
<pre class="example">
在博客中使用分隔符时，会出现这个错误。暂时先不要使用分割符号了。
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline43" class="outline-2">
<h2 id="orgheadline43"><span class="section-number-2">9</span> 参考资料</h2>
<div class="outline-text-2" id="text-9">
<p>
<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a><br>
<a href="https://tono.tk/2016/03/26/Add_copyright_for_hexo/" target="_blank" rel="external">https://tono.tk/2016/03/26/Add_copyright_for_hexo/</a><br>
<a href="http://cighao.com/2016/03/01/add-copyright-to-hexo/" target="_blank" rel="external">http://cighao.com/2016/03/01/add-copyright-to-hexo/</a><br>
</p>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blog </tag>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GameModules]]></title>
      <url>http://wolfand11.coding.me/2016/07/15/architecture/GameModules/</url>
      <content type="html"><![CDATA[


<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><span class="section-number-2">1</span> GameModules</h2>
<div class="outline-text-2" id="text-1">
<a id="more"></a>


<div class="figure">
<p><img src="GameArchitecture.png"><br>
</p>
</div>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> architecture </category>
            
        </categories>
        
        
        <tags>
            
            <tag> architecture </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AlgorithmIntroduce]]></title>
      <url>http://wolfand11.coding.me/2016/07/01/algorithm/AlgorithmIntroduce/</url>
      <content type="html"><![CDATA[

<p>
这篇主要是算法导论相关的笔记。<br>
</p>
<a id="more"></a>
<div id="outline-container-orgheadline20" class="outline-2">
<h2 id="orgheadline20"><span class="section-number-2">1</span> Foundations</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-orgheadline7" class="outline-3">
<h3 id="orgheadline7"><span class="section-number-3">1.1</span> 函数的增长</h3>
<div class="outline-text-3" id="text-1-1">

<div class="figure">
<p><img src="Img_asymptotic_notation.jpg"><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline1" class="outline-4">
<h4 id="orgheadline1"><span class="section-number-4">1.1.1</span> \(\Theta\) 记号</h4>
<div class="outline-text-4" id="text-1-1-1">
<p>
对于一个给定函数 \(g(n)\) ,用 \(\Theta(g(n))\) 来表示函数集合：<br>
\(\Theta(g(n)) = \{f(n):存在常数 c_1,c_2 和 n_0，使对所有的 n \geq n_0 ,有 0 \leq c_1g(n) \leq f(n) \leq c_2g(n)\} \quad 也就是说，对于任一函数 f(n),若存在正常数 c_1,c_2,使当 n 充分大时，f(n)能被夹在 c_1g(n)和 c_2g(n)中间，则 f(n)属于集合 \Theta(g(n))\)<br>
\(\Theta 记号 给出了函数 f(n)的上下界\)<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-4">
<h4 id="orgheadline2"><span class="section-number-4">1.1.2</span> \(O\) 记号</h4>
<div class="outline-text-4" id="text-1-1-2">
<p>
对于一个给定函数 \(g(n)\) ,用 \(O(g(n))\) 来表示函数集合：<br>
\(O(g(n)) = \{f(n):存在常数 c 和 n_0，使对所有的 n \geq n_0 ,有 0 \leq  f(n) \leq cg(n)\} \quad 也就是说，对于任一函数 f(n),若存在正常数 c,使当 n 充分大时，f(n)的值都在 cg(n)之下，则 f(n)属于集合 O(g(n))\)<br>
\(O 记号 给出了函数 f(n)的上界\)<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-4">
<h4 id="orgheadline3"><span class="section-number-4">1.1.3</span> \(\Omega\) 记号</h4>
<div class="outline-text-4" id="text-1-1-3">
<p>
对于一个给定函数 \(g(n)\) ,用 \(\Omega(g(n))\) 来表示函数集合：<br>
\(\Omega(g(n)) = \{f(n):存在常数 c 和 n_0，使对所有的 n \geq n_0 ,有 0 \leq cg(n) \leq  f(n) \} \quad 也就是说，对于任一函数 f(n),若存在正常数 c,使当 n 充分大时，f(n)的值都在 cg(n)之上，则 f(n)属于集合 \Omega(g(n))\)<br>
\(\Omega 记号 给出了函数 f(n)的下界\)<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-4">
<h4 id="orgheadline4"><span class="section-number-4">1.1.4</span> \(o\) 记号</h4>
<div class="outline-text-4" id="text-1-1-4">
<p>
对于一个给定函数 \(g(n)\) ,用 \(o(g(n))\) 来表示函数集合：<br>
\(o(g(n)) = \{f(n):对任意正常数 c ,存在常数 n_0 > 0，使对所有的 n \geq n_0 ,有 0 \leq  f(n) < cg(n)\}\)<br>
\(o 记号 给出了函数 f(n)的非渐近紧确上界\)<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline5" class="outline-4">
<h4 id="orgheadline5"><span class="section-number-4">1.1.5</span> \(\omega\) 记号</h4>
<div class="outline-text-4" id="text-1-1-5">
<p>
对于一个给定函数 \(g(n)\) ,用 \(\omega(g(n))\) 来表示函数集合：<br>
\(\omega(g(n)) = \{f(n):对任意正常数 c ,存在常数 n_0 > 0，使对所有的 n \geq n_0 ,有 0 \leq cg(n) < f(n) \}\)<br>
\(\omega 记号 给出了函数 f(n)的非渐近紧确下界\)<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline6" class="outline-4">
<h4 id="orgheadline6"><span class="section-number-4">1.1.6</span> 渐近记号的解释</h4>
<div class="outline-text-4" id="text-1-1-6">
<p>
\(X(g(n))是一个集合，可以用 f(n) \in X(g(n)) 来表示 f(n)属于 X(g(n))。不过通常写为 f(n) = X(g(n))来表示这种关系。需要注意的是不能写为 X(g(n)) = f(n)\)<br>
一般来说，当渐近记号出现在某个公式中时，我们将其解释为一个不在乎其名称的匿名函数。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline12" class="outline-3">
<h3 id="orgheadline12"><span class="section-number-3">1.2</span> 递归式</h3>
<div class="outline-text-3" id="text-1-2">
</div><div id="outline-container-orgheadline9" class="outline-4">
<h4 id="orgheadline9"><span class="section-number-4">1.2.1</span> 代换法</h4>
<div class="outline-text-4" id="text-1-2-1">
<ul class="org-ul">
<li>用代换法解递归式需要两个步骤：<br>
<ol class="org-ol">
<li>猜测解的形式<br></li>
<li>用数学归纳法找出使解真正有效的常数。<br></li>
</ol></li>
<li>使用数学归纳法进行证明的步骤<br>
<ul class="org-ul">
<li>数学归纳法第一种形式<br>
<ol class="org-ol">
<li>证明当 m=1 时命题成立。<br></li>
<li>假设 m=n 时命题成立，推导出在 m=n+1 时命题也成立。（n 代表任意自然数）<br></li>
</ol></li>
<li>数学归纳法第二种形式<br>
<ol class="org-ol">
<li>证明当 m=1 时命题成立<br></li>
<li>假设 m&lt;n 时命题成立，推导出在 m=n 时命题也成立。（n 代表任意自然数）<br></li>
</ol></li>
</ul></li>
</ul>
</div>
<ol class="org-ol"><li><a id="orgheadline8"></a>实例<br><div class="outline-text-5" id="text-1-2-1-1">
<ul class="org-ul">
<li><p>
求递归式 \(T(n) = 2T(\biggl\lfloor \frac{n}{2} \biggr\rfloor) + n\)<br>
</p>
\begin{align}
&-\quad Step 1\, 猜测解的形式        \nonumber\\ 
&猜测\quad T(n) = O(nlgn),即存在常数 c 和 n_0 使得 T(n)的值都在 nlgn 之下 \nonumber\\ 
&-\quad Step 2\, 使用数学归纳法证明    \nonumber\\ 
&-\quad Step 2.1\, 证明 m=2,3 时成立 \nonumber\\ 
&n=1 时，T(1) = 2*0 + 1 = 1 > c1lg1=0   \, &(无论 c 取何值都不成立)    \nonumber\\ 
&n=2 时，T(2) = 2*1 + 2 = 4 \leq c2lg2  \, &(c\geq2 时成立) \nonumber\\ 
&n=3 时，T(3) = 2*1 + 3 = 5 \leq c3lg3  \, &(c\geq2 时成立) \nonumber\\ 
&-\quad Step 2.2\, 假设 m < n 成立，证明 m=n 时也成立 \nonumber\\
&依据假设有 m < n 成立，所以对于 m=\frac{n}{2} 时，有 T(\frac{n}{2}) \leq c\frac{n}{2}lg\frac{n}{2}           \nonumber\\
&T(n) = 2T(\biggl\lfloor \frac{n}{2} \biggr\rfloor) + n \leq 2c\frac{n}{2}lg\frac{n}{2} + n \nonumber\\
&T(n) \leq cnlg\frac{n}{2} + n = cnlgn - cn + n <= 1="" 2="" cnlgn="" \quad="" (c\geq="" 时成立)="" \nonumber\\="" &-\quad="" step="" 2.3\,="" 依据数学归纳法可以可出结论="" &所以，当取="" c="" \geq="" 时，t(n)="" \leq="" cnlgn。即="" t(n)="O(nlgn)" \end{align}<="" li="">
<li><p>
求递归式 \(T(n) = 2T(n-1) + 1 \quad (n>0) \quad T(0) = 0\)<br>
</p>
\begin{align}  
&-\quad Step 1\, 猜测解的形式        \nonumber\\ 
&猜测\quad T(n) = O(2^n),即存在常数 c 和 n_0 使得 T(n)的值都在 2^n 之下 \nonumber\\ 
&-\quad Step 2\, 使用数学归纳法证明    \nonumber\\ 
&-\quad Step 2.1\, 证明 m=2,3 时成立 \nonumber\\ 
&n=1 时，T(1) = 2*0 + 1 = 1 \leq c2^1 \, &(c\geq1 时成立)    \nonumber\\ 
&n=2 时，T(2) = 2*1 + 1 = 3 \leq c2^2 \, &(c\geq1 时成立) \nonumber\\ 
&n=3 时，T(3) = 2*3 + 1 = 7 \leq c2^3 \, &(c\geq1 时成立) \nonumber\\ 
&-\quad Step 2.2\, 假设 n=k-1 时成立，证明 n = k 时也成立 \nonumber\\ 
&依据假设有 T(k-1) \leq c2^{k-1}                      \nonumber\\
&T(k) = 2T(k-1) + 1 \leq 2c2^{k-1} + 1             \nonumber\\
&T(k) \leq c2^k+1                                  \nonumber\\ 
&T(k) \leq c2^k (c\geq 2 时成立)                     \nonumber\\ 
&所以，当取 c \geq 2 时，T(n) \leq c2^n。即 T(n) = O(2^n)
\end{align}</li>
</=></li></ul>
</div></li></ol>
</div>
<div id="outline-container-orgheadline10" class="outline-4">
<h4 id="orgheadline10"><span class="section-number-4">1.2.2</span> 递归树方法</h4>
<div class="outline-text-4" id="text-1-2-2">
<p>
如下图利用递归树方法求解 \(T(n) = 3T(n/4) + c n ^2\)<br>
<img src="Img_recursion_tree.jpg"><br>
</p>
\begin{align}  
T(n) &= cn^2 + \frac{3}{16}cn^2 + ({\frac{3}{16}})^2cn^2 + \ldots + ({\frac{3}{16}})^{log_4(n-1)}cn^2 + \Theta(n^{log_43}) \nonumber\\ 
& = \sum_{i=0}^{log_4n-1}(\frac{3}{16})^icn^2 + \Theta(n^{log_43})\nonumber\\ 
& = \frac{(3/16)^{log_4n}-1}{(3/16)-1}cn^2+\Theta(n^{log_43})     \nonumber\\ 
T(n) & < \sum_{i=0}^{\infty}(\frac{3}{16})^icn^2 + \Theta(n^{log_43})\nonumber\\ 
& = \frac{1}{1-(3/16)}cn^2+\Theta(n^{log_43})     \nonumber\\ 
& = \frac{16}{13}cn^2+\Theta(n^{log_43})          \nonumber\\ 
& = O(n^2)
\end{align}
</div>
</div>
<div id="outline-container-orgheadline11" class="outline-4">
<h4 id="orgheadline11"><span class="section-number-4">1.2.3</span> 主方法</h4>
<div class="outline-text-4" id="text-1-2-3">
<p>
主方法是递归树的一种应用。可以通过递归树来证明主方法。主方法所依赖的主定理如下：<br>
</p>
\begin{align}  
&设 a \geq 1 和 b > 1 为常数，设 f(n)为一个函数，T(n)在非负整数上通过下列递归式来定义       \nonumber \\
&T(n) = aT(n/b) + f(n)                                                      \nonumber \\
&其中 n/b 为\biggl\lfloor n/b \biggr\rfloor 或  \biggl\lceil n/b \biggr\rceil,那么 T(n)有下列的渐近边界： \nonumber \\
&(1) \; 若对于某常数\epsilon >0,有 f(n)=O(n^{log_ba-\epsilon}),则 T(n) = \Theta(n^{log_ba}) \nonumber \\
&(2) \; 若 f(n) = \Theta(n^{log_ba}),则 T(n) = \Theta(n^{log_ba}lgn) \nonumber \\
&(3) \; 若对于某常数\epsilon >0,有 f(n)=\Omega(n^{log_ba+\epsilon}),且对常数 c<1 与足够大的="" n="" 有="" af(n="" b)="" \leq="" cf(n),则="" t(n)="\Theta(f(n))\nonumber" \\="" \end{align}="" <="" div="">
</1></div>
</div>
<div id="outline-container-orgheadline19" class="outline-3">
<h3 id="orgheadline19"><span class="section-number-3">1.3</span> 概率分析和随机算法</h3>
<div class="outline-text-3" id="text-1-3">
</div><div id="outline-container-orgheadline13" class="outline-4">
<h4 id="orgheadline13"><span class="section-number-4">1.3.1</span> 随机排列数组</h4>
<div class="outline-text-4" id="text-1-3-1">
<div class="org-src-container">

<pre class="src src-lua"><span style="color: #00ffff;">function</span> <span style="color: #87cefa;">PermuteBySorting</span>(lst)
    <span style="color: #00ffff;">local</span> <span style="color: #eedd82;">priority</span> = {}
    <span style="color: #00ffff;">local</span> <span style="color: #eedd82;">len</span> = #lst
    <span style="color: #00ffff;">local</span> <span style="color: #eedd82;">max_random</span> = len*len*len
    <span style="color: #00ffff;">for</span> <span style="color: #eedd82;">i</span>=1,len <span style="color: #00ffff;">do</span>
        priority[i] = random(1, max_random)
    <span style="color: #00ffff;">end</span>

    <span style="color: #ff0000;">-- </span><span style="color: #ff0000;">sort list with priority</span>
    sort(lst, priority)
<span style="color: #00ffff;">end</span>

<span style="color: #00ffff;">function</span> <span style="color: #87cefa;">RandomInPlace</span>(lst)
    <span style="color: #00ffff;">local</span> <span style="color: #eedd82;">len</span> = #lst
    <span style="color: #00ffff;">for</span> <span style="color: #eedd82;">i</span>=1,len <span style="color: #00ffff;">do</span>
        <span style="color: #00ffff;">local</span> <span style="color: #eedd82;">random_idx</span> = random(i, len)
        <span style="color: #00ffff;">local</span> <span style="color: #eedd82;">tmp</span> = lst[i]
        lst[i] = lst[random_idx]
        lst[random_idx] = tmp
    <span style="color: #00ffff;">end</span>
<span style="color: #00ffff;">end</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline14" class="outline-4">
<h4 id="orgheadline14"><span class="section-number-4">1.3.2</span> 雇佣问题</h4>
</div>
<div id="outline-container-orgheadline15" class="outline-4">
<h4 id="orgheadline15"><span class="section-number-4">1.3.3</span> 生日悖论</h4>
</div>
<div id="outline-container-orgheadline16" class="outline-4">
<h4 id="orgheadline16"><span class="section-number-4">1.3.4</span> 球与盒子</h4>
</div>
<div id="outline-container-orgheadline17" class="outline-4">
<h4 id="orgheadline17"><span class="section-number-4">1.3.5</span> 序列</h4>
</div>
<div id="outline-container-orgheadline18" class="outline-4">
<h4 id="orgheadline18"><span class="section-number-4">1.3.6</span> 在线雇佣问题</h4>
</div>
</div>
</div>
<div id="outline-container-orgheadline35" class="outline-2">
<h2 id="orgheadline35"><span class="section-number-2">2</span> Sorting and Order Statistics</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-orgheadline21" class="outline-3">
<h3 id="orgheadline21"><span class="section-number-3">2.1</span> 堆排序</h3>
<div class="outline-text-3" id="text-2-1">
<p>
二叉堆在数组中构建的二叉树结构。其主要操作以及对应的时间复杂度如下：<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">操作</th>
<th scope="col" class="org-left">时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Heapify</td>
<td class="org-left">\(O(lgn)\)</td>
</tr>

<tr>
<td class="org-left">HeapBuild</td>
<td class="org-left">\(O(nlgn)\)</td>
</tr>

<tr>
<td class="org-left">HeapInsert</td>
<td class="org-left">\(O(lgn)\)</td>
</tr>

<tr>
<td class="org-left">HeapDelete</td>
<td class="org-left">\(O(lgn)\)</td>
</tr>

<tr>
<td class="org-left">HeapExtract</td>
<td class="org-left">\(O(lgn)\)</td>
</tr>

<tr>
<td class="org-left">HeapSort</td>
<td class="org-left">\(O(nlgn)\)</td>
</tr>
</tbody>
</table>

<p>
堆相关代码实现请参考如下文件<br>
<a href="Code_Heap.lua">Code_Heap.lua</a><br>
</p>
</div>
</div>

<div id="outline-container-orgheadline27" class="outline-3">
<h3 id="orgheadline27"><span class="section-number-3">2.2</span> 快速排序</h3>
<div class="outline-text-3" id="text-2-2">
<ul class="org-ul">
<li>快速排序采用了分治法<br></li>
<li>快速排序是一种原地排序，不需要额外空间<br></li>
</ul>
</div>
<div id="outline-container-orgheadline22" class="outline-4">
<h4 id="orgheadline22"><span class="section-number-4">2.2.1</span> 快速排序分析</h4>
<div class="outline-text-4" id="text-2-2-1">
<ul class="org-ul">
<li><p>
当数据已经升序或降序拍好时，快速排序出现最坏情况<br>
</p>
\begin{align}
 T(n) &= T(0) + T(n-1) + O(n)  \nonumber \\
 &= O(1) + T(n-1) + O(n)       \nonumber \\
 &= T(n-1) + O(n)              \nonumber \\
 &= O(1) +  O(2) + \ldots + O(n-1) + O(n)              \nonumber \\
 &= O(n^2)                     \nonumber \\
 \end{align}</li>
<li><p>
当每次划分都在中间时<br>
</p>
      \begin{align}
T(n) &= 2T(n/2)  \nonumber \\
&= O(1) + T(n-1) + O(n)       \nonumber \\
&= O(nlog_2n)                 \nonumber \\
\end{align}</li>
<li><p>
假设每次划分都为 1/10 9/10<br>
</p>
\begin{align}
&T(n) = T(\frac{n}{10}) + T(\frac{n9}{10}) + O(n) \nonumber \\
&T(n) = knlog_{\frac{10}{9}}n + O(n) \nonumber \\
&T(n) = O(nlogn)                   \nonumber \\
\end{align}</li>
<li><p>
假设一步划分最优，一步划分最坏<br>
</p>
\begin{align}
&L(n) = 2U(n/2) + O(n)       \nonumber \\
&U(n) = L(n-1) + O(n)        \nonumber \\
&L(n) = 2(L(\frac{n}{2}-1) + O(\frac{n}{2})) + O(n) \nonumber \\
&L(n) = 2L(\frac{n}{2}-1) + O(n) \nonumber \\
&L(n) = O(nlogn)                 \nonumber \\
\end{align}</li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline23" class="outline-4">
<h4 id="orgheadline23"><span class="section-number-4">2.2.2</span> 快速排序实现</h4>
<div class="outline-text-4" id="text-2-2-2">
<div class="org-src-container">

<pre class="src src-lua"><span style="color: #00ffff;">function</span> <span style="color: #87cefa;">Partition</span>(arr, p, q)
    i = p
    <span style="color: #00ffff;">for</span> <span style="color: #eedd82;">j</span>=p+1,q <span style="color: #00ffff;">do</span>
        <span style="color: #00ffff;">if</span> arr[j] &lt;= arr[p] <span style="color: #00ffff;">then</span>
            exchange(arr[i],arr[j])
            i++
        <span style="color: #00ffff;">end</span>
    <span style="color: #00ffff;">end</span>
    exchange(arr[i],arr[p])
    <span style="color: #00ffff;">return</span> i
<span style="color: #00ffff;">end</span>
<span style="color: #00ffff;">function</span> <span style="color: #87cefa;">QuickSort</span>(arr, p, q)
    <span style="color: #00ffff;">if</span> p&lt;0 <span style="color: #00ffff;">or</span> p&gt;=q <span style="color: #00ffff;">then</span>
        <span style="color: #00ffff;">return</span>
    <span style="color: #00ffff;">end</span>

    i = Partition(arr, p, q)
    QuickSort(arr, p, i-1)
    QuickSort(arr, i+1, q)
<span style="color: #00ffff;">end</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline25" class="outline-4">
<h4 id="orgheadline25"><span class="section-number-4">2.2.3</span> 随机快速排序</h4>
<div class="outline-text-4" id="text-2-2-3">
<p>
每一次划分之前，将主元素和一个随机的元素交换。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline24"></a>随机快速排序分析<br><div class="outline-text-5" id="text-2-2-3-1">
<p>
随机快速排序的时间复杂度为 \(O(nlogn)\)<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline26" class="outline-4">
<h4 id="orgheadline26"><span class="section-number-4">2.2.4</span> 随机快速排序实现</h4>
<div class="outline-text-4" id="text-2-2-4">
<div class="org-src-container">

<pre class="src src-lua"><span style="color: #00ffff;">function</span> <span style="color: #87cefa;">Partition</span>(arr, p, q)
    exchange(arr[p], arr[random(p,q)])
    i = p
    <span style="color: #00ffff;">for</span> <span style="color: #eedd82;">j</span>=p+1,q <span style="color: #00ffff;">do</span>
        <span style="color: #00ffff;">if</span> arr[j] &lt;= arr[p] <span style="color: #00ffff;">then</span>
            exchange(arr[i],arr[j])
            i++
        <span style="color: #00ffff;">end</span>
    <span style="color: #00ffff;">end</span>
    exchange(arr[i],arr[p])
    <span style="color: #00ffff;">return</span> i
<span style="color: #00ffff;">end</span>
<span style="color: #00ffff;">function</span> <span style="color: #87cefa;">QuickSort</span>(arr, p, q)
    <span style="color: #00ffff;">if</span> p&lt;0 <span style="color: #00ffff;">or</span> p&gt;=q <span style="color: #00ffff;">then</span>
        <span style="color: #00ffff;">return</span>
    <span style="color: #00ffff;">end</span>

    i = Partition(arr, p, q)
    QuickSort(arr, p, i-1)
    QuickSort(arr, i+1, q)
<span style="color: #00ffff;">end</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline32" class="outline-3">
<h3 id="orgheadline32"><span class="section-number-3">2.3</span> 线性时间排序</h3>
<div class="outline-text-3" id="text-2-3">
</div><div id="outline-container-orgheadline28" class="outline-4">
<h4 id="orgheadline28"><span class="section-number-4">2.3.1</span> 比较排序的下界</h4>
</div>
<div id="outline-container-orgheadline29" class="outline-4">
<h4 id="orgheadline29"><span class="section-number-4">2.3.2</span> 计数排序</h4>
</div>
<div id="outline-container-orgheadline30" class="outline-4">
<h4 id="orgheadline30"><span class="section-number-4">2.3.3</span> 基数排序</h4>
</div>
<div id="outline-container-orgheadline31" class="outline-4">
<h4 id="orgheadline31"><span class="section-number-4">2.3.4</span> 桶排序</h4>
</div>
</div>
<div id="outline-container-orgheadline33" class="outline-3">
<h3 id="orgheadline33"><span class="section-number-3">2.4</span> 中位数和顺序统计</h3>
</div>
<div id="outline-container-orgheadline34" class="outline-3">
<h3 id="orgheadline34"><span class="section-number-3">2.5</span> Sorting implement</h3>
<div class="outline-text-3" id="text-2-5">
<p>
关于各种排序相关算法的实现，可以参考如下文件：<br>
<a href="Code_Heap.lua">Code_Heap.lua</a><br>
<a href="Code_Sort.lua">Code_Sort.lua</a><br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline77" class="outline-2">
<h2 id="orgheadline77"><span class="section-number-2">3</span> DataStructure</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-orgheadline36" class="outline-3">
<h3 id="orgheadline36"><span class="section-number-3">3.1</span> Stack Queue</h3>
<div class="outline-text-3" id="text-3-1">
<p>
栈                后进先出<br>
队列                先进先出<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline38" class="outline-3">
<h3 id="orgheadline38"><span class="section-number-3">3.2</span> LinkList</h3>
<div class="outline-text-3" id="text-3-2">
</div><div id="outline-container-orgheadline37" class="outline-4">
<h4 id="orgheadline37"><span class="section-number-4">3.2.1</span> 单链表倒序</h4>
<div class="outline-text-4" id="text-3-2-1">
<div class="org-src-container">

<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Reverse</span> (<span style="color: #98fb98;">Node</span>* <span style="color: #eedd82;">list</span>)
{
    <span style="color: #98fb98;">Node</span>* <span style="color: #eedd82;">pre</span> = null;
    <span style="color: #00ffff;">while</span>(list)
    {
        <span style="color: #98fb98;">Node</span>* <span style="color: #eedd82;">next</span> = list.next;
        list.next = pre;
        pre = list;
        list = next;
    }
    <span style="color: #00ffff;">return</span> pre;
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline43" class="outline-3">
<h3 id="orgheadline43"><span class="section-number-3">3.3</span> SkipList</h3>
<div class="outline-text-3" id="text-3-3">
</div><div id="outline-container-orgheadline40" class="outline-4">
<h4 id="orgheadline40"><span class="section-number-4">3.3.1</span> SkipList 时间复杂度分析</h4>
<div class="outline-text-4" id="text-3-3-1">
<ul class="org-ul">
<li>两层的 SkipList<br>
对于包含 n 个元素，只有两层的 SkipList，时间消耗为 \(T(n) = |L_1| + \frac{n}{|L_1|} \quad 当|L_1| = \frac{n}{|L_1|}时，取到最小值，即 |L_1|=\sqrt{n}，所以 T(n) = 2\sqrt{n}\)<br></li>
<li>三层的 SkipList<br>
三层 SkipList，因为每层最多需要遍历 \(\sqrt[3]{n}\) 个元素， 所以时间消耗为 \(T(n) = 3\sqrt[3]{n}\)<br></li>
<li>\(log_2n\) 层的 SkipList<br>
当 SkipList 取 \(log_2n\) 层时，SkipList 最优。此时时间消耗为 \(T(n) = log_2n\sqrt[log_2n]{n} = 2log_2n\)<br></li>
</ul>
</div>
<ol class="org-ol"><li><a id="orgheadline39"></a>SkipList 高概率最优<br><div class="outline-text-5" id="text-3-3-1-1">
<p>
对于 n 个节点的 SkipList，每次查找元素的时间消耗高概率为 \(O(lgn)\)<br>
</p>
</div></li></ol>
</div>
<div id="outline-container-orgheadline41" class="outline-4">
<h4 id="orgheadline41"><span class="section-number-4">3.3.2</span> SkipList 高度分析</h4>
<div class="outline-text-4" id="text-3-3-2">
<p>
对每层来说，一个节点会向上增长的概率为 \(\frac{1}{2}\) ，则第 m 层向上增长的概率为 \(\frac{1}{2^m}\)<br>
底层一共有 n 个元素，上升到 m 层时，m 层元素数目的期望为 \(E[C_m] = n\frac{1}{2^m} = \frac{n}{2^m}\)<br>
令 \(E[C_m] \leq 1 则 \frac{n}{2^m} \leq 1 即 n \leq 2^m 所以 lgn \leq m\)<br>
即 当 \(m \geq lgn\) 时，m 层的元素数目小于 1，即 m 层不存在元素了。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline42" class="outline-4">
<h4 id="orgheadline42"><span class="section-number-4">3.3.3</span> SkipList Maintain</h4>
<div class="outline-text-4" id="text-3-3-3">
<ul class="org-ul">
<li>插入节点<br>
插入新节点的时候随机一个 1 到 100 的数字 randomV，如果 randomV 大于 50，则将这个数提升到更高层的表中，对这个节点继续执行前面的随机操作。<br></li>
<li>删除节点<br>
删除节点的时候，如果该节点在多层中出现，则直接将其在出现的层中都删除掉。<br></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgheadline44" class="outline-3">
<h3 id="orgheadline44"><span class="section-number-3">3.4</span> Tree</h3>
<div class="outline-text-3" id="text-3-4">
<ul class="org-ul">
<li>对于二叉树，每一个树的节点用 p,l,r,data 分别表示 指向父亲节点的指针， 指向左孩子的指针，指向右孩子的指针，节点的数据。<br></li>
<li>对于非二叉树，和二叉树同理，每个树的节点用 p,child1,child2 &#x2026; childn,data 来表示。因为可能有的节点有 n 个孩子，而有的节点只有 1 个或没有孩子, 所以这种方法对于有多个可变数目孩子的树来说会造成空间的浪费。<br></li>
<li>还有一种树的表示形式是，每个树的节点用 p,lChild,rSibling 来表示。这样就不会造成空间的浪费了。<br></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline63" class="outline-3">
<h3 id="orgheadline63"><span class="section-number-3">3.5</span> Hash Table</h3>
<div class="outline-text-3" id="text-3-5">
</div><div id="outline-container-orgheadline45" class="outline-4">
<h4 id="orgheadline45"><span class="section-number-4">3.5.1</span> 直接寻址表 Direct-address table</h4>
<div class="outline-text-4" id="text-3-5-1">
<p>
<img src="Img_direct-address-table.jpg"><br>
缺点：<br>
</p>
<ul class="org-ul">
<li>如果关键字的全域 U 很大时，由于内存大小限制，无法在计算机中存储 U 中所有元素。<br></li>
<li>如果关键字的全域 U 和实际关键字集合相差很大时，存储 U 中所有元素会造成很多空间浪费。<br></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline48" class="outline-4">
<h4 id="orgheadline48"><span class="section-number-4">3.5.2</span> 散列表 Hash table</h4>
<div class="outline-text-4" id="text-3-5-2">
<p>
散列函数 h 将关键字 k 散列到一个小范围域内，从而减弱直接寻址表缺点的影响。<br>
<img src="Img_hash-table.jpg"><br>
缺点：<br>
有可能不同的关键字会被 h 函数散列到同一槽上。这种情况被称为发生了碰撞。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline47"></a>链接法解决碰撞<br><div class="outline-text-5" id="text-3-5-2-1">
<p>
这种方法将 hash 值相同的元素，用链表存储。<br>
通过 hash 表查找某个元素 ki 的算法如下：<br>
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">Find</span>(hashTable, ki)
{
    <span style="color: #98fb98;">var</span> <span style="color: #eedd82;">hashValue</span> = h(ki);
    <span style="color: #98fb98;">Node</span>* <span style="color: #eedd82;">list</span> = hashTable[hashValue];
    <span style="color: #00ffff;">while</span> (list)
    {
        <span style="color: #00ffff;">if</span> (list.key == ki)
        {
            <span style="color: #00ffff;">return</span> list.data
        }
        list = list.next;
    }
    <span style="color: #00ffff;">return</span> null;
}
</pre>
</div>
</div>
<ol class="org-ol"><li><a id="orgheadline46"></a>装载因子<br><div class="outline-text-6" id="text-3-5-2-1-1">
<p>
给定一个能存放 n 个元素的、具有 m 个槽位的散列表 T，定义 T 的装载因子 \(\alpha\) 为 n/m，即一个链中平均存储的元素数。<br>
</p>
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline57" class="outline-4">
<h4 id="orgheadline57"><span class="section-number-4">3.5.3</span> 散列函数</h4>
<div class="outline-text-4" id="text-3-5-3">
</div><ol class="org-ol"><li><a id="orgheadline49"></a>好的散列函数的特点<br><div class="outline-text-5" id="text-3-5-3-1">
<p>
散列函数应该尽可能让关键字平均分配到不同的槽上，这样可以保证碰撞发生的概率最小。<br>
</p>
</div></li>
<li><a id="orgheadline50"></a>将关键字解释为自然数<br><div class="outline-text-5" id="text-3-5-3-2">
<p>
例如，一个字符串关键字可以被解释为按适当的基数几号表示的整数。pt 可以被解释为十进制整数对(112,116),因为 ASCII 字符集中，p 为 112，t 为 116。按照 128 为基数来表示，pt = 112*128+126 = 14452；<br>
</p>
</div></li>
<li><a id="orgheadline51"></a>除法散列法<br><div class="outline-text-5" id="text-3-5-3-3">
\begin{equation}  
h(k) = k\ mod\ m;
\end{equation}
<p>
除法散列中，需要注意 m 的选择。例如，当 m 为 \(2^p\) 时，h(k)的值为 k 的 p 个最低位数字。<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-right">

<col class="org-right">

<col class="org-right">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-right">公式</th>
<th scope="col" class="org-right">被取模数的二进制</th>
<th scope="col" class="org-right">结果的二进制</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-right">8%7</td>
<td class="org-right">1000</td>
<td class="org-right">001</td>
</tr>

<tr>
<td class="org-right">9%7</td>
<td class="org-right">1001</td>
<td class="org-right">010</td>
</tr>

<tr>
<td class="org-right">10%7</td>
<td class="org-right">1010</td>
<td class="org-right">011</td>
</tr>

<tr>
<td class="org-right">11%7</td>
<td class="org-right">1011</td>
<td class="org-right">100</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-right">8%8</td>
<td class="org-right">1000</td>
<td class="org-right">000</td>
</tr>

<tr>
<td class="org-right">9%8</td>
<td class="org-right">1001</td>
<td class="org-right">001</td>
</tr>

<tr>
<td class="org-right">10%8</td>
<td class="org-right">1010</td>
<td class="org-right">010</td>
</tr>

<tr>
<td class="org-right">11%8</td>
<td class="org-right">1011</td>
<td class="org-right">011</td>
</tr>
</tbody>
</table>
<p>
从上表可以看出，当选择 \(m=2^3=8\) 时，他们之间有数据排布关系，h(k)的值为 k 的 p 个最低位数字。而当选择 \(m=7\) 时，则没有这种关系。<br>
m 通常选为和 2 的整数幂不太接近的指数。<br>
</p>
</div></li>
<li><a id="orgheadline52"></a>乘法散列法<br><div class="outline-text-5" id="text-3-5-3-4">
\begin{align}  
h(k) = \biggl\lfloor m(kA\: \: mod \:\:  1) \biggr\rfloor \quad (0\,< A\,< 1)
\end{align}  
<p>
乘法散列的优点是，它对 m 的选择没有特别的要求。但是，一般会选择 \(m=2^p\) ，因为这样方便实现散列函数。<br>
</p>
</div></li>
<li><a id="orgheadline56"></a>全域散列 Universal hashing<br><ol class="org-ol"><li><a id="orgheadline53"></a>定义<br><div class="outline-text-6" id="text-3-5-3-5-1">
<p>
随机地选择散列函数，使之独立于要存储的关键字，这种方法被称作全域散列。严格的定义如下：<br>
设 H 为有限的一组散列函数，它将给定的关键字域 U 映射到{0,1,&#x2026;&#x2026;,m-1}中。如果对于每一个不同的关键字 \(k,l \in U\) ，满足 \(h(k)=h(l)\) 的散列函数 \(h \in H\) 的个数至多为 \(|H| / m\) 。那么就称这样的一个函数组是全域的。<br>
\(|H|\) 为集合 H 中函数的个数。上面定义的另一种解释是，如果从 H 中随机取一个散列函数，当关键字 \(k \neq l\) 时，两者发生碰撞的概率 \(P(h(k)=h(l)) \leq \frac{|H|/m}{|H|}\) ， \(\frac{|H|/m}{|H|} = \frac{1}{m}\) 。<br>
</p>
</div></li>
<li><a id="orgheadline54"></a>定理 1<br><div class="outline-text-6" id="text-3-5-3-5-2">
<p>
如果 h 选自一组全域的散列函数，并用于将 n 个关键字散列到一个大小为 m 的用链接法解决碰撞的表 T 中。如果关键字 k 不在链表中，k 被散列至其中的链表的期望长度 \(E(n_{h(k)}) \leq \alpha=\frac{n}{m}\) (说明： \(n_{h(k)}\) 为链表 T[h(k)]的长度)。如果关键字 k 在链表中，则包含关键字 k 的链表的期望长度 \(E(n_{h(k)}) \leq 1+\alpha = 1+\frac{n}{m}\) <br>
也就是说使用全域的散列函数，可以将 key 均匀地散列到各个链表中。<br>
</p>
<ul class="org-ul">
<li><p>
证明<br>
定义指示器随机变量如下<br>
</p>
\begin{eqnarray}
c_{kl} = c\{h(k)=h(l)\} =
\begin{cases}
1   & h(k)=h(l) \\
0   & h(k) \leq h(l) \\
\end{cases} \nonumber
\end{eqnarray}
<p>
根据全域散列函数定义 \(Pr\{h(k)=h(l)\} \leq 1/m\) ，即 \(E[c_{kl}] \leq 1/m\) 。<br>
定义随机变量 \(C_k\) ，它表示对于每个关键字 k，非 k 的、和 k 散列到同一槽位中的其他关键字的数目。<br>
</p>
\begin{equation}  
C_k = \sum_{l \in T \, l \neq k}c_{kl} \nonumber
\end{equation}
<p>
从而有：<br>
</p>
\begin{equation}
E[C_k] = E[\sum_{l \in T \, l \neq k}c_{kl}] = \sum_{l \in T \, l \neq k}E[c_{kl}] \leq \sum_{l \in T \, l \neq k}\frac{1}{m} = \frac{n-1}{m}
\end{equation}</li>
</ul>
</div></li>
<li><a id="orgheadline55"></a>构造一种全域哈希的一种方案<br><div class="outline-text-6" id="text-3-5-3-5-3">
<p>
设定 m 为素数，用 m 将关键字 k 分解为 r+1 位数字，即用 m 进制来表示关键字 k。<br>
\(k = \{k_0\,k_1\,k_2\, \ldots \,k_r\}\) 其中 \(0 \leq k_i \leq m-1\)<br>
随机地选择一个数字 \(a=\{a_0\,a_1\,a_2\, \ldots \,a_r\}\) 其中 \(0 \leq a_i \leq m-1\)<br>
</p>
\begin{equation}
h_a(k) = (\sum_{i=0}^{r}a_i k_i) mod m
\end{equation}
<p>
即 \(h_a(k)\) 为 a 和 k 的点积再对 m 取模。<br>
这样构造出来的全域哈希函数组中一共有 \(m^{r+1}\) 个哈希函数，因为 a 一共有 r+1 位，每一位可以有 m 种选择。<br>
</p>
<ul class="org-ul">
<li><p>
证明<br>
\(x = \{x_0\,x_1\,x_2\, \ldots \,x_r\}\) 其中 \(0 \leq x_i \leq m-1\)<br>
\(y = \{y_0\,y_1\,x_2\, \ldots \,y_r\}\) 其中 \(0 \leq y_i \leq m-1\)<br>
  假设这两个不同的关键字 x，y 在第 0 位不同。如果哈希函数 \(h_a\) 使 x 和 y 关键字散列到同一个链表中，则有下面等式<br>
</p>
\begin{align}
&h_a(x)=h_a(y) \nonumber \\
&\sum_{i=0}^{r}a_i x_i \equiv \sum_{i=0}^{r}a_i y_i \quad mod \quad m \nonumber \\
&\sum_{i=0}^{r}a_i (x_i-y_i) \equiv 0 \quad mod \quad m \nonumber \\
&a_0(x_0-y_0)+\sum_{i=1}^{r}a_i (x_i-y_i) \equiv 0 \quad mod \quad m \nonumber \\
&a_0(x_0-y_0) \equiv -\sum_{i=1}^{r}a_i (x_i-y_i) \quad mod \quad m \nonumber \\
&\because x_0 \neq y_0 \therefore \exists(x_0-y_0)^{-1} \\
&a_0 \equiv -(\sum_{i=1}^{r}a_i (x_i-y_i))(x_0-y_0)^{-1} \quad mod \quad m \nonumber \\
\end{align}
<p>
所以，对于任意 \(a_1 a_2 \ldots a_r\) 只存在唯一的 \(a_0\) 使得 x 和 y 被散列到同一个链表中。<br>
\(h_a\) 的个数为 \(m*m \ldots *m*1 = m^r = \frac{|H|}{m} = \frac{m^{r+1}}{m}\)<br>
</p></li>
</ul>
</div></li></ol></li></ol>
</div>
<div id="outline-container-orgheadline61" class="outline-4">
<h4 id="orgheadline61"><span class="section-number-4">3.5.4</span> 开放寻址法</h4>
<div class="outline-text-4" id="text-3-5-4">
<p>
在开放寻址法中，所有元素都存储在散列表中。即，每个表项中或存储一个元素，或存储 NIL 值表示不存储任何元素。<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline58"></a>线性探查<br><div class="outline-text-5" id="text-3-5-4-1">
<p>
给定一个散列函数 h': U-&gt;{0,1,&#x2026;,m-1} （该函数被称为辅助散列函数），线性探查使用的散列函数为：<br>
</p>
\begin{equation}
h(k,i) = (h'(k)+i) \, mod \, m \quad i = 0,1,2 \ldots , m-1
\end{equation}
<p>
在线性探查方法中，初始探查位置确定了整个序列，故只有 m 种不同的探查序列。<br>
</p>
<ul class="org-ul">
<li>缺点<br>
线性探查存在一次群集问题。随着时间推移，连续被占用的槽不断增加，平均查找时间也不断随着增加。<br></li>
</ul>
</div></li>
<li><a id="orgheadline59"></a>二次探查<br><div class="outline-text-5" id="text-3-5-4-2">
<p>
二次探查使用的散列函数为：<br>
</p>
\begin{align}
&h(k,i) = (h'(k)+c_1i+c_2i^2) \, mod \, m \quad i = 0,1,2 \ldots , m-1 \nonumber \\
&h'为辅助散列函数，c_1 和 c_2（\neq 0）为辅助常数。\nonumber \\
\end{align}
<ul class="org-ul">
<li>缺点<br>
<ol class="org-ol">
<li>为了充分利用散列表，c1,c2,m 的值选取要受到限制<br></li>
<li>如果两个关键字的初始探查位置相同，那么它们的探查序列也是相同的，这种群集详细被称为二次群集。<br></li>
</ol></li>
</ul>
</div></li>

<li><a id="orgheadline60"></a>双重散列<br><div class="outline-text-5" id="text-3-5-4-3">
<p>
双重散列是用于开放寻址法的最好的方法之一，它使用的散列函数为：<br>
</p>
\begin{align}
&h(k,i) = (h_1(k) + ih_2(k)) \, mod \, m \quad i = 0,1,2 \ldots , m-1 \nonumber \\
&h_1 和 h_2 为辅助散列函数。\nonumber \\
\end{align}
<p>
双重散列使用了 \(\Theta(m^2)\) 种探查序列。而线性探查和二次探查都只使用了 m 中探查序列。<br>
</p>

<p>
下面是一组可行的双重散列函数：<br>
</p>
\begin{align}
&h_1(k) = k \, mod \, m  \nonumber \\
&h_2(k) = k \, mod \, m' \nonumber \\
&m 为素数，m' = m - 1 \nonumber \\
\end{align}
</div></li></ol>
</div>
<div id="outline-container-orgheadline62" class="outline-4">
<h4 id="orgheadline62"><span class="section-number-4">3.5.5</span> 完全散列 Perfect Hashing</h4>
<div class="outline-text-4" id="text-3-5-5">
<p>
给定 n 个关键字，构造一个静态的 hash 表，该表的大小 \(m=O(n)\) ，在最坏的情况下，查询某个关键字的时间复杂度为 \(O(1)\) ，构造出满足这些条件的哈希被称为完全哈希或完美哈希 Perfect Hashing。<br>
构造完美哈希的一种方法是使用两级哈希，并且每一级哈希都为全域哈希。要满足完美哈希就需要第二级全域哈希不会造成冲突。设 \(n_i\) 个关键字被哈希到一级哈希表的第 i 个槽内，在二级哈希表中使用 \(m_i = n_i^2\) 个空间来存储这 \(n_i\) 个元素，则可以使二级哈希不会造成冲突。<br>
</p>
<ul class="org-ul">
<li><p>
证明 1：二级全域哈希不会造成冲突<br>
</p>
\begin{align}
&随机变量 X 表示哈希产生冲突 \nonumber \\
&E[X] = P\{X\} = \frac{n_i(n_i-1)}{2} \frac{1}{n_i^2} = \frac{1-1/n_i}{2} < \frac{1}{2} \nonumber \\
&依据马尔可夫不等式可得： \nonumber \\
&P\{X \geq t\} \leq \frac{E[X]}{t} \nonumber \\
&P\{X \geq 1\} \leq \frac{1/2}{1}  \nonumber \\
&P\{X \geq 1\} \leq \frac{1}{2}    \nonumber \\
\end{align}</li>
<li><p>
证明 2：二级哈希的存储空间复杂度为 \(O(n)\)<br>
  取第一级 hash 表的大小 \(m=n\) ，随机变量 \(n_i\) 表示哈希到第 i 个槽的关键字的数目，在二级哈希表中槽的个数 \(m_i=n_i^2\) 则：<br>
</p>
\begin{align}
&E[totalStorage] = n + E[\sum_{i=0}^{m-1}\theta(n_i^2)] = O(n)    \nonumber
\end{align}</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgheadline66" class="outline-3">
<h3 id="orgheadline66"><span class="section-number-3">3.6</span> Binary Search Trees</h3>
<div class="outline-text-3" id="text-3-6">
<p>
二叉查找树中关键字的存储方式满足以下性质：<br>
设 x 为二叉查找树中的节点。如果 y 是 x 的左子树中的节点，则 key[y]&lt;=key[x]。如果 y 是 x 右子树中的节点，则 key[x]&lt;=key[y]。<br>
</p>
</div>
<div id="outline-container-orgheadline64" class="outline-4">
<h4 id="orgheadline64"><span class="section-number-4">3.6.1</span> 二叉查找树的操作</h4>
<div class="outline-text-4" id="text-3-6-1">
<p>
遍历 查找 最大关键字元素和最小关键字元素 前驱和后继 插入和删除<br>
具体实现可以参考如下文件：<br>
<a href="Code_BST.lua">Code_BST.lua</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline65" class="outline-4">
<h4 id="orgheadline65"><span class="section-number-4">3.6.2</span> 随机构造的二叉查找树</h4>
<div class="outline-text-4" id="text-3-6-2">
<p>
随机二叉查找树高度的期望值为 \(log_2n\)<br>
</p>
<ul class="org-ul">
<li><p>
证明：<br>
step1- 证明 Jensens 不等式<br>
\(f(E[X]) \leq E[f(X)] \quad f(X)为凹函数。\)<br>
step2- 不直接分析 BST 的高度随机变量 \(X_n\) ,而是分析 \(X_n\) 的凹函数，这里分析的是 \(Y_n = 2^{X_n} \, 即 X_n 的指数函数\)<br>
step3- 证明 \(E[Y_n] = O(n^3)\)<br>
step4- 证明结论<br>
</p>
\begin{align}
&2^{E[X_n]} \leq E[2^{X_n}] = E[Y_n] = O(n^3) \nonumber \\
&对上面的公式两边取对数可得: \nonumber \\
&E[X_n] \leq log_2O(n^3) = 3log_2n+O(1) \nonumber \\
\end{align}</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgheadline67" class="outline-3">
<h3 id="orgheadline67"><span class="section-number-3">3.7</span> Balance Search Trees</h3>
<div class="outline-text-3" id="text-3-7">
<p>
平衡搜索树的数据结构维护一个 n 个元素的动态集的时间为 \(log_2n\) ，树的高度为 \(O(log_2n)\)<br>
常见的平衡搜索树有：<br>
</p>
<ul class="org-ul">
<li>AVL Trees<br></li>
<li>2-3 Trees<br></li>
<li>2-3-4 Trees<br></li>
<li>B-Trees<br></li>
<li>Red Black Trees<br></li>
<li>Skip lists<br></li>
<li>Treaps<br></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline72" class="outline-3">
<h3 id="orgheadline72"><span class="section-number-3">3.8</span> Red-Black Trees</h3>
<div class="outline-text-3" id="text-3-8">
<p>
红黑树是一种二叉搜索树，其中每个节点包含一个 color 属性，并且每个节点满足下面的条件<br>
</p>
<ul class="org-ul">
<li>每个节点为红色或者黑色<br></li>
<li>根节点和叶子节点都为黑色<br></li>
<li>每个红色节点的父节点都为黑色 即每个红色节点的两个子节点都为黑色节点<br></li>
<li>对于每个节点，从该节点到其子孙节点(叶子节点)的所有路径上包含相同数目的黑节点<br></li>
</ul>
</div>
<div id="outline-container-orgheadline68" class="outline-4">
<h4 id="orgheadline68"><span class="section-number-4">3.8.1</span> RBTree 的高度</h4>
<div class="outline-text-4" id="text-3-8-1">
<p>
包含 n 个关键字(内节点)的红黑树，它的高度满足 \(h \leq 2log_2(n+1) = O(log_2n)\)<br>
</p>
<ul class="org-ul">
<li><p>
证明<br>
将每个红节点并入它的黑色父节点中，会形成一个 2-3-4 树。<br>
</p>
<ol class="org-ol">
<li>2-3-4 树的每一个内节点中包含 2-4 个子节点<br></li>
<li>2-3-4 树的所有叶子节点有相同的深度，该深度等于叶子节点的黑高度<br></li>
</ol>
<p>
假设 生成的该 2-3-4 树的高度为 \(h'\) ，平衡二叉树外节点的个数比所有内节点个数多 1，所以，原来红黑树的外节点数为 \(n+1\) ，所以，该 2-3-4 树的叶子节点的个数 \(leaves = n+1\) 。<br>
</p>
\begin{align}
&而叶子节点的个数满足下面不等式： \nonumber \\
&2^{h'} \leq leaves \leq 4^{h'}  \nonumber \\
&2^{h'} \leq n+1                 \nonumber \\
&h' \leq log_2(n+1)              \nonumber \\
&h \leq 2h' \leq 2log_2(n+1)     \nonumber \\
\end{align}</li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline69" class="outline-4">
<h4 id="orgheadline69"><span class="section-number-4">3.8.2</span> RBTree Insert</h4>
<div class="outline-text-4" id="text-3-8-2">
<div class="org-src-container">

<pre class="src src-lua"><span style="color: #00ffff;">function</span> <span style="color: #87cefa;">RBTree_Insert</span>(T, x)
    Tree_Insert(T, x)
    color[x] = RED
    <span style="color: #00ffff;">while</span> x!=root[T] <span style="color: #00ffff;">and</span> color[p[x]]==RED <span style="color: #00ffff;">do</span>
        <span style="color: #00ffff;">if</span> p[x] == left[p[p[x]]] <span style="color: #00ffff;">then</span>    <span style="color: #ff0000;">-- </span><span style="color: #ff0000;">case A x &#30340;&#29238;&#20146;&#20026;&#24038;&#33410;&#28857;</span>
            y = right[p[p[x]]]
            <span style="color: #00ffff;">if</span> color[y] == RED <span style="color: #00ffff;">then</span>       <span style="color: #ff0000;">-- </span><span style="color: #ff0000;">case A-1 x &#30340;&#21460;&#21460;&#20026;&#32418;&#33394;</span>
                color[p[x]] = BLACK
                color[y] = BLACK
                color[p[p[x]]] = RED
                x = p[p[x]]
            <span style="color: #00ffff;">elseif</span> x == right[p[x]] <span style="color: #00ffff;">then</span> <span style="color: #ff0000;">-- </span><span style="color: #ff0000;">case A-2 x &#30340;&#21460;&#21460;&#20026;&#40657;&#33394;&#65292;&#24182;&#19988; x &#20026;&#21491;&#33410;&#28857;</span>
                x = p[x]
                LEFT-Rotate(T,x)
            <span style="color: #00ffff;">end</span>

            <span style="color: #ff0000;">-- </span><span style="color: #ff0000;">x == left[p[x]]           -- case A-3 x &#30340;&#21460;&#21460;&#20026;&#40657;&#33394;&#65292;&#24182;&#19988; x &#20026;&#24038;&#33410;&#28857;</span>
            color[p[x]] = BLACK
            color[p[p[x]]] = RED
            RIGHT-Rotate(T,p[p[x]])
        <span style="color: #00ffff;">else</span> <span style="color: #ff0000;">-- </span><span style="color: #ff0000;">p[x] == right[p[p[x]]]   -- case B</span>
            <span style="color: #b0c4de;">print</span>(<span style="color: #ffa07a;">"same as case A"</span>)
        <span style="color: #00ffff;">end</span>
    <span style="color: #00ffff;">end</span>
    color[root[T]] = BLACK
<span style="color: #00ffff;">end</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline70" class="outline-4">
<h4 id="orgheadline70"><span class="section-number-4">3.8.3</span> <span class="todo TODO">TODO</span> RBTree Delete</h4>
<div class="outline-text-4" id="text-3-8-3">
<div class="org-src-container">

<pre class="src src-lua"><span style="color: #00ffff;">function</span> <span style="color: #87cefa;">RBTree_Delete</span>(T,x)
<span style="color: #00ffff;">end</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline71" class="outline-4">
<h4 id="orgheadline71"><span class="section-number-4">3.8.4</span> Red-Black Tree 实现</h4>
<div class="outline-text-4" id="text-3-8-4">
<p>
具体实现参考下面文件：<br>
<a href="Code_RBT.lua">Code_RBT.lua</a><br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline76" class="outline-3">
<h3 id="orgheadline76"><span class="section-number-3">3.9</span> Augmenting Data Structures</h3>
<div class="outline-text-3" id="text-3-9">
</div><div id="outline-container-orgheadline73" class="outline-4">
<h4 id="orgheadline73"><span class="section-number-4">3.9.1</span> 动态顺序统计</h4>
<div class="outline-text-4" id="text-3-9-1">
<p>
用扩展的红黑树来实现动态顺序统计，OS-Select 和 OS-Rank 的时间复杂度为 \(lg(n)\) .<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline74" class="outline-4">
<h4 id="orgheadline74"><span class="section-number-4">3.9.2</span> 为什么不在红黑树中直接记录节点的秩？</h4>
<div class="outline-text-4" id="text-3-9-2">
<p>
秩 即为元素在序列中的顺序值。<br>
因为这样做的话，添加或删除节点，需要修改很多节点的秩，这样维护红黑树的时间复杂度为 \(O(n)\) 。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline75" class="outline-4">
<h4 id="orgheadline75"><span class="section-number-4">3.9.3</span> 数据结构扩展</h4>
<div class="outline-text-4" id="text-3-9-3">
<p>
数据结构扩展的 4 个步骤：<br>
</p>
<ol class="org-ol">
<li>选择基础数据结构<br></li>
<li>确定要在基础数据结构中添加哪些信息<br></li>
<li>验证可用基础数据结构上的基本修改操作来维护这些添加的信息<br></li>
<li>设计新的操作。<br></li>
</ol>

<p>
以动态顺序统计为例来说，整个过程为以下步骤：<br>
</p>
<ol class="org-ol">
<li>选择红黑树来作为基础数据结构<br></li>
<li>在基础数据结构中添加额外的 size[x] 信息，size 为以 x 节点为根的子树的节点数目<br></li>
<li>插入-删除-节点旋转等操作对新加的 size 信息是可维护的。<br>
[重新实现这些修改操作，来支持对 size 信息的维护]<br></li>
<li>设计新的操作：OS-Select 和 OS-Rank。<br></li>
</ol>

<p>
以区间树为例来说，整个过程为以下步骤：<br>
</p>
<ol class="org-ol">
<li>选择红黑树来作为基础数据结构。在基础数据结构中存储区间信息，并以区间的低端点作为节点的关键字<br></li>
<li>在基础数据结构中添加额外的 max[x]信息，max[x]为以 x 节点为根的子树中端点最大的数值。<br></li>
<li>重新实现这些修改操作，来支持对 max 信息的维护<br></li>
<li>设计新的操作：Interval_Search(T, i)<br></li>
</ol>
</div>
</div>
</div>
</div>

<div id="outline-container-orgheadline91" class="outline-2">
<h2 id="orgheadline91"><span class="section-number-2">4</span> Advanced Design And Analysis Techniques</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-orgheadline84" class="outline-3">
<h3 id="orgheadline84"><span class="section-number-3">4.1</span> 动态规划法</h3>
<div class="outline-text-3" id="text-4-1">
</div><div id="outline-container-orgheadline78" class="outline-4">
<h4 id="orgheadline78"><span class="section-number-4">4.1.1</span> 动态规划的特征</h4>
<div class="outline-text-4" id="text-4-1-1">
<ul class="org-ul">
<li>最优子结构<br>
      如果问题的一个最优解包含子问题的最优解，就称该问题具有最优子结构。<br>
例如： 如果 z = LCS(x,y)，那么任何 z 序列的前缀也是 x 序列前缀和 y 序列前缀的最长公共子序列<br></li>
<li>重叠子问题，一个递归的过程包含少数独立的子问题被反复计算多次。<br></li>
<li>在动态规划法中，每一步都要做出选择，但是这些选择依赖于子问题的解。因此，解动态规划问题一般是自底向上，从小子问题处理至大子问题。这样可以避免子问题被反复计算。<br></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline79" class="outline-4">
<h4 id="orgheadline79"><span class="section-number-4">4.1.2</span> 找寻最优子结构的模式</h4>
<div class="outline-text-4" id="text-4-1-2">
<ol class="org-ol">
<li>问题的一个解可以是做一个选择。做这种选择会得到一个或多个有待解决的子问题。<br></li>
<li>假设对一个给定的问题，已知的是一个可以导致最优解的选择。不必关心如何确定这个选择，尽管假定它是已知的。<br></li>
<li>在已知这个选择后，要确定哪些子问题会随之发生，以及如何最好地描述所得到的子问题空间。<br>
描述子问题空间的一个有效经验是，尽量保持这个空间简单，然后在需要时再扩充它。<br>
      在装配线调度问题中，我们所考虑的子问题空间就是从工厂入口通过装配站 \(S_{1,j}和 S_{2,j}\) 的最快路线。这个子问题空间很合适，因而没必要再去尝试一个更具一般性的子问题空间了。<br>
在矩阵链乘积问题中，<br></li>
<li>利用 cut-and-paste 技术，来证明在问题的一个最优解中，使用的子问题的解本身也必须是最优的。<br></li>
</ol>
</div>
</div>
<div id="outline-container-orgheadline80" class="outline-4">
<h4 id="orgheadline80"><span class="section-number-4">4.1.3</span> 动态规划算法的设计步骤</h4>
<div class="outline-text-4" id="text-4-1-3">
<ol class="org-ol">
<li>描述最优解的结构。即寻找最优子结构，利用子问题的最优解来构造原问题的一个最优解。<br></li>
<li>递归定义最优解的值。<br></li>
<li>按自底向上计算最优解的值。<br></li>
<li>由计算出的结果构造一个最优解。<br></li>
</ol>
</div>
</div>
<div id="outline-container-orgheadline83" class="outline-4">
<h4 id="orgheadline83"><span class="section-number-4">4.1.4</span> 最长公共子序列</h4>
<div class="outline-text-4" id="text-4-1-4">
<p>
有两个序列 x[1&#x2026;m] y[1&#x2026;n], (1) 求这两个序列的最长公共子序列之一的长度 (2) 输出所有最长公共子序列<br>
</p>
</div>
<ol class="org-ol"><li><a id="orgheadline81"></a>穷举法<br><div class="outline-text-5" id="text-4-1-4-1">
<p>
取 x[1&#x2026;m]的所有子序列，分别遍历 y[1&#x2026;n]来查看是否该子序列是公共子序列，记录下当前最长的所有公共子序列。遍历完之后，依次输出。<br>
</p>
<ul class="org-ul">
<li>算法分析<br>
每次遍历 y[1&#x2026;n]的消耗为 n，x[1&#x2026;m]一共有 \(2^m\) 个子序列，所以总的时间消耗为 \(n2^m\)<br></li>
</ul>
</div></li>
<li><a id="orgheadline82"></a>动态规划法<br><div class="outline-text-5" id="text-4-1-4-2">
<p>
定义 \(LCS(x,y)\) 为序列 x 和 y 的最长公共子序列之一<br>
定义 \(|S|\) 为 \(S\) 序列的长度<br>
定义 \(c[i,j] = |LCS(x[1,i],y(1,j))|\)<br>
则 \(c[m,m] = |LCS(x,y)|\)<br>
</p>
\begin{eqnarray}
c[i,j] =
\begin{cases}
c[i-1,j-1]+1              & if \, x[i]==y[j] \\
max(c[i,j-1], c[i-1,j])   & other \, cases   \\
\end{cases} \nonumber
\end{eqnarray}
<ul class="org-ul">
<li>最坏情况分析<br>
取上面的递归公式中最耗时的部分 \(c[i,j] = max(c[i,j-1], c[i-1,j])\) ，将其转化为递归树，可以计算出树的高度为 $m+n$，这个树的节点数目为 \(2^{m+n}\)<br></li>
<li>子问题被重复计算<br>
LCS 问题的子问题空间包含 \(m*n\) 个独立的子问题(c[i,j]一共有 m*n 种组合)，而在最坏情况分析中，一共需要解决的问题数目为  \(2^{m+n}\) ，可以通过记录已经求解过的问题的结果来避免重复的计算。<br>
使用平摊分析可以得出采用记录求解过的问题结果后，LCS 的时间复杂度为 \(O(n*m)\)<br></li>
</ul>
</div></li></ol>
</div>
</div>
<div id="outline-container-orgheadline86" class="outline-3">
<h3 id="orgheadline86"><span class="section-number-3">4.2</span> 贪心算法</h3>
<div class="outline-text-3" id="text-4-2">
</div><div id="outline-container-orgheadline85" class="outline-4">
<h4 id="orgheadline85"><span class="section-number-4">4.2.1</span> 贪心算法的特征</h4>
<div class="outline-text-4" id="text-4-2-1">
<ul class="org-ul">
<li>一个全局最优解可以通过局部最优选择来达到。换句话说就是，当我们考虑做选择时，我们只考虑对当前问题最佳的选择而不考虑子问题的结果。<br></li>
<li>在贪心算法中，我们做的总是当前看似最佳的选择，然后再解决选择之后所出现的子问题。贪心算法所做的当前选择可能要依赖于已经做出的所有选择，但不依赖于有待做出的选择或子问题的解。因此，贪心策略通常是自顶先下，一个一个地做出贪心选择，不断地将给定的问题实例归约为更小的问题。<br></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgheadline90" class="outline-3">
<h3 id="orgheadline90"><span class="section-number-3">4.3</span> 平摊分析</h3>
<div class="outline-text-3" id="text-4-3">
<p>
平摊分析是分析一系列数据结构操作的平均时间消耗。即，n 个操作总的时间消耗为 \(C\) ，则一个操作的的时间消耗为 \(\frac{C}{n}\) 。<br>
</p>
</div>
<div id="outline-container-orgheadline87" class="outline-4">
<h4 id="orgheadline87"><span class="section-number-4">4.3.1</span> 聚集分析</h4>
<div class="outline-text-4" id="text-4-3-1">
<p>
通过求总的时间消耗 \(C\) ，然后除以操作数目 \(n\) 得出每个操作的平摊代价。<br>
\(c = \frac{C}{n}\)<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline88" class="outline-4">
<h4 id="orgheadline88"><span class="section-number-4">4.3.2</span> 记账方法</h4>
<div class="outline-text-4" id="text-4-3-2">
<p>
通过为不同的操作收取不同的费用，操作没有花费掉的费用存入银行，用总价格 \(P\) 减去银行的存款 \(B\) 然后再除以总的操作数 $n$。<br>
\(总的平摊代价 C = P-B\)<br>
\(每个操作的平均平摊代价 c = \frac{P-B}{n}\)<br>
\(在 n 个操作中，令第 i 个操作的实际代价为 c_i,第 i 个操作的平摊代价为\widehat{c_i},则对于 n 个操作的所有序列需要满足 \sum_{i=1}^n\widehat{c_i} \geq \sum_{i=1}^nc_i, 这样总的平摊代价就是实际代价的一个上界。\)<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline89" class="outline-4">
<h4 id="orgheadline89"><span class="section-number-4">4.3.3</span> 势能方法</h4>
<div class="outline-text-4" id="text-4-3-3">
<p>
势能方法中不是将已预付的工作作为存储在数据结构特定对象中的存款来表示，而是表示成一种“势能”或“势”，它在需要时可以释放出来，以支付后面的操作。势是与整个数据结构而不是其中的个别对象发生联系的。<br>
\(\widehat{c_i} = c_i + \Phi(D_i) - \Phi(D_{i-1})\)<br>
\(\sum_{i=1}^n\widehat{c_i} = \sum_{i=1}^n(c_i + \Phi(D_i) - \Phi(D_{i-1})) = \sum_{i=1}^nc_i + \Phi(D_i) - \Phi(D_0)\)<br>
如果能定义一个势能函数 \(\Phi\) 使得 \(\Phi(D_i) \geq \Phi(D_0)\) ,则总的平摊代价就是实际代价的一个上界。<br>
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline101" class="outline-2">
<h2 id="orgheadline101"><span class="section-number-2">5</span> Graph Algorithms</h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-orgheadline95" class="outline-3">
<h3 id="orgheadline95"><span class="section-number-3">5.1</span> 图的基本算法</h3>
<div class="outline-text-3" id="text-5-1">
</div><div id="outline-container-orgheadline92" class="outline-4">
<h4 id="orgheadline92"><span class="section-number-4">5.1.1</span> 图的表示</h4>
<div class="outline-text-4" id="text-5-1-1">
<ul class="org-ul">
<li>图的数学描述<br>
G=(V,E) 表示拥有顶点集合 V 和边集合 E 的图 G。|V|表示顶点的数量，|E|表示边的数量<br></li>
<li>邻接矩阵<br>
空间复杂度为 \(|V|^2\)<br>
矩阵中所存储的数值，可用来表示图中边的权值<br></li>
<li>邻接表<br>
如果 G 是一个有向图，则所有邻接表的长度之和为|E|。如果 G 是一个无向图，则所有邻接表的长度之和为 2|E|。不论是有向图还是无向图，邻接表的空间复杂度为 \(O(V+E)\)<br>
当 E 远小于 \(|V|^2\) 时，采用邻接表更省空间。<br>
邻接表中存储的节点可以携带权值，表示当前顶点到该节点的权值大小。<br>
邻接表在需要确定图中边(u,v)是否存在，只能在邻接表 Adj[u]中搜索是否存在 v。<br></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline93" class="outline-4">
<h4 id="orgheadline93"><span class="section-number-4">5.1.2</span> 广度优先搜索</h4>
<div class="outline-text-4" id="text-5-1-2">
<p>
广度优先搜索的时间复杂度为 \(O(V+E)\)<br>
搜索过程中，通过给节点上色来避免节点重复被访问<br>
广度优先搜索需要利用队列来保证搜索过程基于广度优先。<br>
</p>
</div>
</div>
<div id="outline-container-orgheadline94" class="outline-4">
<h4 id="orgheadline94"><span class="section-number-4">5.1.3</span> 深度优先搜索</h4>
<div class="outline-text-4" id="text-5-1-3">
<p>
深度优先搜索的时间复杂度为 \(O(V+E)\)<br>
搜索过程中，通过给节点上色来避免节点重复被访问<br>
</p>
</div>
</div>
</div>

<div id="outline-container-orgheadline97" class="outline-3">
<h3 id="orgheadline97"><span class="section-number-3">5.2</span> 最小权生成树</h3>
<div class="outline-text-3" id="text-5-2">
<p>
Minimum Spanning Trees<br>
最小生成树算法 Prim_MST 的思路为 遍历所有顶点，每次取出度最小的节点 NodeMin 进行处理，处理过程中遍历 NodeMin 节点的所有邻接节点为他们更新最小出度值。需要注意的是处理邻接节点时，需要判断邻接节点是否已经被当做 NodeMin 处理过，若是，则不能再次更新其出度。<br>
Prim_MST 的时间复杂度如下：<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">最小优先队列数据结构</th>
<th scope="col" class="org-left">时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">数组</td>
<td class="org-left">\(O(V^2+E)=O(V^2)\)</td>
</tr>

<tr>
<td class="org-left">二叉堆</td>
<td class="org-left">\(O((V+E)lgV)\)</td>
</tr>

<tr>
<td class="org-left">斐波那契堆</td>
<td class="org-left">\(O(VlgV+E)\)</td>
</tr>
</tbody>
</table>
</div>
<div id="outline-container-orgheadline96" class="outline-4">
<h4 id="orgheadline96"><span class="section-number-4">5.2.1</span> 应用</h4>
<div class="outline-text-4" id="text-5-2-1">
<p>
最小生成树可以用来解决整体耗费最小的问题。如下面所述问题<br>
</p>
<ol class="org-ol">
<li>旅游路线选择<br>
N 个旅游地点都得去，但是要总路费最小。<br></li>
<li>多个城市之间电缆架设等问题<br>
N 个城市都得连接，但是要总的电缆使用最少。<br></li>
</ol>
</div>
</div>
</div>
<div id="outline-container-orgheadline99" class="outline-3">
<h3 id="orgheadline99"><span class="section-number-3">5.3</span> 最短路径问题</h3>
<div class="outline-text-3" id="text-5-3">
</div><div id="outline-container-orgheadline98" class="outline-4">
<h4 id="orgheadline98"><span class="section-number-4">5.3.1</span> 单源最短路径</h4>
<div class="outline-text-4" id="text-5-3-1">
<p>
单源最短路径 Dijkstra 的思路为 维护一个集合 \(S\) ,让该集合内的所有元素到源点 \(s\) 的距离为最短距离, 然后不断扩大这个集合让其包含所有的顶点。为了保证新加入集合 \(S\) 的元素符合条件，必须取 \(V-S\) 中距离 \(S\) 最小的元素。具体操作是，从源点开始对图进行广度优先遍历，判断当前顶点的邻接顶点到源点的距离是否比之前记录的距离短，如果是则更新邻接顶点的父节点和其到源点的距离，选出离源点最近的节点进行下次循环操作。<br>
Dijkstra_SingleSourceShortestPath 的时间复杂度如下：<br>
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">最小优先队列数据结构</th>
<th scope="col" class="org-left">时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">数组</td>
<td class="org-left">\(O(V^2+E)=O(V^2)\)</td>
</tr>

<tr>
<td class="org-left">二叉堆</td>
<td class="org-left">\(O((V+E)lgV)\)</td>
</tr>

<tr>
<td class="org-left">斐波那契堆</td>
<td class="org-left">\(O(VlgV+E)\)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-orgheadline100" class="outline-3">
<h3 id="orgheadline100"><span class="section-number-3">5.4</span> Graph Implement</h3>
<div class="outline-text-3" id="text-5-4">
<p>
关于图的各种基础算法的实现，可以参考如下文件：<br>
<a href="Code_Graph.lua">Code_Graph.lua</a><br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline111" class="outline-2">
<h2 id="orgheadline111"><span class="section-number-2">6</span> 数学概念</h2>
<div class="outline-text-2" id="text-6">
</div><div id="outline-container-orgheadline102" class="outline-3">
<h3 id="orgheadline102"><span class="section-number-3">6.1</span> 对数</h3>
<div class="outline-text-3" id="text-6-1">
<p>
对数的性质<br>
</p>
\begin{align}
&1 \quad log_aX + log_aY = log_a(XY)          \nonumber \\
&2 \quad log_aX - log_aY = log_a(\frac{X}{Y}) \nonumber \\
&3 \quad log_aX^b = b\,log_aX                 \nonumber \\
&4 \quad \sqrt[log_an]{n} = a                 \nonumber \\
&5 \quad log_ab = \frac{log_cb}{log_ca}       \nonumber \\
&6 \quad a^{b\,log_an} = (a^{log_an})^b = n^b \nonumber \\
&7 \quad log_ba^{log_bn} = log_bn^{log_ba}    \nonumber \\
&                                             \nonumber \\
证明 5 \quad &log_ab = \frac{log_cb}{log_ca}     \nonumber \\
&另 log_ab = X               \nonumber \\
&则 a^X = b                  \nonumber \\
&对上面的等式两边取 c 的对数有      \nonumber \\
&log_c(a^X) = log_cb         \nonumber \\
&X\,log_ca = log_cb          \nonumber \\
&X = \frac{log_cb}{log_cx}   \nonumber \\
&所以 \quad \frac{log_cb}{log_ca} = log_ab  \nonumber \\
证明 7 \quad &log_ba^{log_bn} = log_bn^{log_ba}    \nonumber \\
&log_bn \cdot logb_a = log_ba^{log_bn} \nonumber \\
&log_ba \cdot logb_n = log_bn^{log_ba} \nonumber \\
&所以 \quad log_ba^{log_bn} = log_bn^{log_ba}    \nonumber \\
\end{align}
</div>
</div>
<div id="outline-container-orgheadline108" class="outline-3">
<h3 id="orgheadline108"><span class="section-number-3">6.2</span> 概率论</h3>
<div class="outline-text-3" id="text-6-2">
</div><div id="outline-container-orgheadline103" class="outline-4">
<h4 id="orgheadline103"><span class="section-number-4">6.2.1</span> 随机试验</h4>
<div class="outline-text-4" id="text-6-2-1">
<p>
在概率论中把符合下面三个特点的试验叫做随机试验：<br>
</p>
<ol class="org-ol">
<li>一次试验结果的随机性，即进行一次试验之前无法确定哪一个结果会出现。<br></li>
<li>全体测试结果的可知性，即每次试验的可能结果不止一个，并且能事先明确试验的所有可能结果。<br></li>
<li>可重复性，即可以在同一条件下重复进行试验。<br></li>
</ol>
</div>
</div>
<div id="outline-container-orgheadline104" class="outline-4">
<h4 id="orgheadline104"><span class="section-number-4">6.2.2</span> 随机变量</h4>
<div class="outline-text-4" id="text-6-2-2">
<p>
设 E 是一个随机试验，其样本空间为 S，若对每一个样本点 \(e \in S\) ，都有唯一确定的实数 X(e) 与之对应，则称 S 上的实值函数 X(e) 是一个随机变量（简记为 X）。<br>
</p>
<ul class="org-ul">
<li>实例一<br>
随机投掷一枚硬币，可能的结果有正面朝上 ，反面朝上两种 ，若定义 X 为投掷一枚硬币时朝上的面 ， 则 X 为一随机变量，当正面朝上时，X 取值 1；当反面朝上时，X 取值 0。<br></li>
<li>实例二<br>
又如，掷一颗骰子，它的所有可能结果是出现 1 点、2 点、3 点、4 点、5 点和 6 点 ，若定义 X 为掷一颗骰子时出现的点数，则 X 为一随机变量，出现 1，2，3，4，5，6 点时 X 分别取值 1，2，3，4，5，6。<br></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline105" class="outline-4">
<h4 id="orgheadline105"><span class="section-number-4">6.2.3</span> 指示器随机变量</h4>
<div class="outline-text-4" id="text-6-2-3">
<p>
给定一个样本空间 S 和事件 A，那么事件 A 对应的指示器随机变量：<br>
</p>
\begin{eqnarray}
X_{a} =
\begin{cases}
1   & 如果 A 发生 \\
0   & 如果 A 没有发生 \\
\end{cases} \nonumber
\qquad E[X_a] = Pr{A} \nonumber
\end{eqnarray}
</div>
</div>
<div id="outline-container-orgheadline106" class="outline-4">
<h4 id="orgheadline106"><span class="section-number-4">6.2.4</span> 期望</h4>
<div class="outline-text-4" id="text-6-2-4">
<p>
离散型随机变量的一切可能的取值 xi 与对应的概率 Pi(=xi)之积的和称为该离散型随机变量的数学期望（设级数绝对收敛），记为 E（x）。<br>
设连续性随机变量 X 的概率密度函数为 f(x)，若积分绝对收敛，则称积分的值为随机变量的数学期望，记为 E(X)。<br>
<a href="http://www.zhihujingxuan.com/19043.html" target="_blank" rel="external">http://www.zhihujingxuan.com/19043.html</a><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline107" class="outline-4">
<h4 id="orgheadline107"><span class="section-number-4">6.2.5</span> 马尔可夫不等式证明</h4>
<div class="outline-text-4" id="text-6-2-5">
\begin{align}
&结论： 对于随机变量 X \geq 0, \quad Pr\{X \geq t\} \leq \frac{E[X]}{t} \nonumber \\
&证明： \nonumber \\
E[X] &= \sum_{x=0}^{\infty} x \cdot P_r\{X=x\} \nonumber \\
&\geq \sum_{x=t}^{\infty} x \cdot P_r\{X=x\} \nonumber \\
&\geq \sum_{x=t}^{\infty} t \cdot P_r\{X=x\} \nonumber \\
&= t \cdot P_r\{X \geq t\}
\end{align}
</div>
</div>
</div>
<div id="outline-container-orgheadline110" class="outline-3">
<h3 id="orgheadline110"><span class="section-number-3">6.3</span> 组合数学</h3>
<div class="outline-text-3" id="text-6-3">
</div><div id="outline-container-orgheadline109" class="outline-4">
<h4 id="orgheadline109"><span class="section-number-4">6.3.1</span> <span class="todo TODO">TODO</span> 卡特兰数</h4>
</div>
</div>
</div>
<div id="outline-container-orgheadline114" class="outline-2">
<h2 id="orgheadline114"><span class="section-number-2">7</span> Q&amp;A</h2>
<div class="outline-text-2" id="text-7">
</div><div id="outline-container-orgheadline112" class="outline-3">
<h3 id="orgheadline112"><span class="section-number-3">7.1</span> 为什么 cocos2d-x js 和 c++对象的映射采用 hash table 而不使用 dictionary 呢？</h3>
<div class="outline-text-3" id="text-7-1">
<p>
hash table 的查询效率更高，而 c++和 javascript 交互的时候，需要对该表进行大量查询。<br>
采用链接法处理冲突时，hash table 的平均查询效率为 n/m。<br>
dictionary 的平均查询效率为 h=log(n) 。<br>
当 m=1000 时，n&lt;13746 时，哈希表的查询效率都比 dictionary 要高。<br>
<img src="Img_hash_dict_compare.jpg"><br>
</p>
</div>
</div>
<div id="outline-container-orgheadline113" class="outline-3">
<h3 id="orgheadline113"><span class="section-number-3">7.2</span> 关于 std::unordered_map</h3>
<div class="outline-text-3" id="text-7-2">
<p>
标准库的 std::unordered_map 内部实现为 hash 表，并且该哈希表的默认最大装载因子 max_load_factor 为 1，当哈希表的装载因子 load_factor 大于等于 max_load_factor 时，会触发 rehash 方法，增大 bucket_count 数目，重新生成 hash 表。<br>
rehash 方法的平均复杂度为 存储元素的个数( \(\frac{n}{m}\) )，最坏复杂度为 存储元素个数的二次方( \(\frac{n(1+n)}{2}\) 所有元素被散列到同一个槽内)。<br>
</p>
<ul class="org-ul">
<li>参考资料<br></li>
</ul>
<p>
cpp 官方文档 <a href="http://www.cplusplus.com/reference/unordered_map/unordered_map/rehash/" target="_blank" rel="external">http://www.cplusplus.com/reference/unordered_map/unordered_map/rehash/</a><br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline115" class="outline-2">
<h2 id="orgheadline115"><span class="section-number-2">8</span> 参考资料</h2>
<div class="outline-text-2" id="text-8">
<ul class="org-ul">
<li>对数公开课<br>
<a href="http://open.163.com/special/Khan/logarithms.html" target="_blank" rel="external">http://open.163.com/special/Khan/logarithms.html</a><br></li>
<li>算法导论公开课<br>
<a href="http://open.163.com/special/opencourse/algorithms.html" target="_blank" rel="external">http://open.163.com/special/opencourse/algorithms.html</a><br></li>
<li>全域哈希和完全哈希公开课笔记<br>
<a href="http://www.cnblogs.com/udld/p/4299695.html" target="_blank" rel="external">http://www.cnblogs.com/udld/p/4299695.html</a><br></li>
<li>什么是动态规划<br>
<a href="https://www.zhihu.com/question/23995189" target="_blank" rel="external">https://www.zhihu.com/question/23995189</a><br>
<a href="https://www.zhihu.com/question/23995189/answer/35429905" target="_blank" rel="external">https://www.zhihu.com/question/23995189/answer/35429905</a><br></li>
<li>Advanced Data Structures 公开课<br>
MIT 官网视频<br>
<a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-851-advanced-data-structures-spring-2012/lecture-videos/" target="_blank" rel="external">https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-851-advanced-data-structures-spring-2012/lecture-videos/</a><br>
Bilibili 视频<br>
      <a href="http://www.bilibili.com/video/av3372873/" target="_blank" rel="external">http://www.bilibili.com/video/av3372873/</a><br></li>
<li>算法导论习题答案<br>
<a href="https://ita.skanev.com/index.html" target="_blank" rel="external">https://ita.skanev.com/index.html</a><br>
<a href="https://yinyanghu.github.io/files/clrs_prev.pdf" target="_blank" rel="external">https://yinyanghu.github.io/files/clrs_prev.pdf</a><br></li>
</ul>
</div>
</div>
</div>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
